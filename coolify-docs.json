[
  {
    "title": "How to use Gitlab based Git deployments",
    "url": "https://coolify.io/docs/knowledge-base/git/gitlab/integration",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nIntegration\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nGitlab\nIntegration\n\nA guide on how to use GitLab based repositories with Coolify.\n\n​\nPublic Repositories\n\nYou can use public repositories without any additional setup.\n\nSelect the Public repository option in the Coolify when you create a new resource.\nAdd your repository URL to the input field, for example: https://gitlab.com/andrasbacsai/coolify-examples\nYou can only use the https URL.\nThat’s it! Coolify will automatically pull the latest version of your repository and deploy it.\n​\nPrivate Repositories\n\nPrivate repositories require a few more steps to setup.\n\nAdd a private key (aka Deploy Keys) to Coolify and to your GitLab repository in the Settings / Repository / Deploy Keys menu.\nYou can generate a new key pair with the following command:\nssh-keygen -t rsa -b 4096 -C \"deploy_key\" \n\nOr you can also use Coolify to generate a new key for you in the Keys & Tokens menu.\nCreate a new resource and select the Private Repository (with deploy key)\nAdd your repository URL to the input field, for example: git@gitlab.com:andrasbacsai/coolify-examples.git\nYou need to use the SSH URL, so the one that starts with git@.\nThat’s it! Coolify will automatically pull the latest version of your repository and deploy it.\n​\nAutomatic commit deployments with webhooks (Optional)\n\nYou can add a custom webhook URL to your GitLab repository to trigger a new deployment when you push to your repository.\n\nThis can be set on either public or private repositories.\n\nIn your resource, there is a Webhooks menu. In the Manual Git Webhooks section, you can find the URL what you need to set in your GitLab repository.\n\nSet a secret key in the GitLab Webhook Secret input field.\nGo to your repository in GitLab and open the Settings / Webhooks menu.\nAdd the URL from Coolify to the URL input field and the secret token.\nSelect the Push events option.\nThat’s it! Now when you push to your repository, GitLab will send a webhook request to Coolify and it will trigger a new deployment.\n​\nMerge request deployments with webhooks (Optional)\n\nYou can add a custom webhook URL to your GitLab repository to trigger a new deployment when you create a new merge request.\n\nThis can be set on either public or private repositories.\n\nThe process is the same as the previous one, but you need to select the Merge request events option in the Settings / Webhooks menu.\n\nGithub Actions\nIntegration\ntwitter\ngithub\nPowered by Mintlify\nPublic Repositories\nPrivate Repositories\nAutomatic commit deployments with webhooks (Optional)\nMerge request deployments with webhooks (Optional)"
  },
  {
    "title": "How to configure Bitbucket based Git deployments with Coolify",
    "url": "https://coolify.io/docs/knowledge-base/git/bitbucket/integration",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nIntegration\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nBitbucket\nIntegration\n\nA guide on how to use Bitbucket based repositories with Coolify.\n\nThis guide will show you how to use Bitbucket based repositories with Coolify.\n\n​\nPublic Repositories\n\nYou can use public repositories without any additional setup.\n\nSelect the Public repository option in the Coolify when you create a new resource.\nAdd your repository URL to the input field, for example: https://bitbucket.com/coolify-test2/coolify-examples\nYou can only use the https URL.\nThat’s it! Coolify will automatically pull the latest version of your repository and deploy it.\n​\nPrivate Repositories\n\nPrivate repositories require a few more steps to setup.\n\nAdd a private key (aka Deploy Keys) to Coolify and to your Bitbucket repository in the Repository Settings / Access Keys menu.\nYou can generate a new key pair with the following command:\nssh-keygen -t rsa -b 4096 -C \"deploy_key\" \n\nOr you can also use Coolify to generate a new key for you in the Keys & Tokens menu.\nCreate a new resource and select the Private Repository (with deploy key)\nAdd your repository URL to the input field, for example: git@bitbucket.org:coolify-test2/coolify-examples.git\nYou need to use the SSH URL, so the one that starts with git@.\nThat’s it! Coolify will automatically pull the latest version of your repository and deploy it.\n​\nAutomatic commit deployments with webhooks (Optional)\n\nYou can add a custom webhook URL to your Bitbucket repository to trigger a new deployment when you push to your repository.\n\nThis can be set on either public or private repositories.\n\nIn your resource, there is a Webhooks menu. In the Manual Git Webhooks section, you can find the URL what you need to set in your Bitbucket repository.\n\nSet a secret key in the Bitbucket Webhook Secret input field.\nGo to your repository in Bitbucket and open the Repository Settings / Webhooks menu as Repository hooks.\nAdd the URL from Coolify to the URL input field and the secret token.\nSelect the Push option.\nThat’s it! Now when you push to your repository, Bitbucket will send a webhook request to Coolify and it will trigger a new deployment.\n​\nMerge request deployments with webhooks (Optional)\n\nYou can add a custom webhook URL to your Bitbucket repository to trigger a new deployment when you create a new merge request.\n\nThis can be set on either public or private repositories.\n\nThe process is the same as the previous one. In the Repository Settings / Webhooks menu, you need to select the following events in the Pull Request option:\n\nCreated\nUpdated\nMerged\nDeclined\nIntegration\nIntegration\ntwitter\ngithub\nPowered by Mintlify\nPublic Repositories\nPrivate Repositories\nAutomatic commit deployments with webhooks (Optional)\nMerge request deployments with webhooks (Optional)"
  },
  {
    "title": "How to use Github Actions with Coolify",
    "url": "https://coolify.io/docs/knowledge-base/git/github/github-actions",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nIntegration\nGithub Actions\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nGithub\nGithub Actions\n\nA guide on how to use Github Actions with Coolify to build and deploy your images.\n\nYou can use Github Actions to build your image and deploy it to Coolify.\n\nHere is an example repository and a workflow file that you can check how it works.\n\n​\nProcess Overview\nYou need to create a Github Action workflow file in your repository.\nYou need to build your image and push it to a Docker registry. In the example, I use ghcr.io, but you can use any other registry.\nYou need to create a Coolify API Token and add it to your Github repository secrets.\nCOOLIFY_TOKEN in the example.\nIn Coolify, you need to setup your deployment type. It could be a simple Dockerfile, Docker Compose or Docker Image based deployment.\nGet the proper webhook endpoint from Coolify (Your resource / Webhook menu) and add it to your Github repository secrets.\nCOOLIFY_WEBHOOK in the example.\nNeed to send a GET request to that webhook endpoint (authenticated with the token) to trigger the deployment\nExample: curl --request GET '${{ secrets.COOLIFY_WEBHOOK }}' --header 'Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}'\nThat’s it! Now you can push to your repository and the deployment will be triggered automatically.\nIntegration\nIntegration\ntwitter\ngithub\nPowered by Mintlify\nProcess Overview"
  },
  {
    "title": "How to configure Gitea based Git deployments with Coolify",
    "url": "https://coolify.io/docs/knowledge-base/git/gitea/integration",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nIntegration\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nGitea\nIntegration\n\nA guide on how to use Gitea based repositories with Coolify.\n\nThis guide will show you how to use Gitea based repositories with Coolify.\n\n​\nPublic Repositories\n\nYou can use public repositories without any additional setup.\n\nSelect the Public repository option in the Coolify when you create a new resource.\nAdd your repository URL to the input field, for example: https://gitea.com/heyandras/coolify-examples\nYou can only use the https URL.\nThat’s it! Coolify will automatically pull the latest version of your repository and deploy it.\n​\nPrivate Repositories\n\nPrivate repositories require a few more steps to setup.\n\nAdd a private key (aka Deploy Keys) to Coolify and to your Gitea repository in the Repository Settings / Access Keys menu.\nYou can generate a new key pair with the following command:\nssh-keygen -t rsa -b 4096 -C \"deploy_key\" \n\nOr you can also use Coolify to generate a new key for you in the Keys & Tokens menu.\nCreate a new resource and select the Private Repository (with deploy key)\nAdd your repository URL to the input field, for example: git@gitea.com:heyandras/coolify-examples.git\nYou need to use the SSH URL, so the one that starts with git@.\nThat’s it! Coolify will automatically pull the latest version of your repository and deploy it.\n​\nAutomatic commit deployments with webhooks (Optional)\n\nYou can add a custom webhook URL to your Gitea repository to trigger a new deployment when you push to your repository.\n\nThis can be set on either public or private repositories.\n\nIn your resource, there is a Webhooks menu. In the Manual Git Webhooks section, you can find the URL what you need to set in your Gitea repository.\n\nSet a secret key in the Gitea Webhook Secret input field.\nGo to your repository in Gitea and open the Repository Settings / Webhooks menu as Repository hooks.\nAdd the URL from Coolify to the URL input field and the secret token.\nSelect the Push option.\nThat’s it! Now when you push to your repository, Gitea will send a webhook request to Coolify and it will trigger a new deployment.\n​\nMerge request deployments with webhooks (Optional)\n\nYou can add a custom webhook URL to your Gitea repository to trigger a new deployment when you create a new merge request.\n\nThis can be set on either public or private repositories.\n\nThe process is the same as the previous one. In the Repository Settings / Webhooks menu, you need to select the following events in the Pull Request option:\n\nCreated\nUpdated\nMerged\nDeclined\nIntegration\nIntroduction\ntwitter\ngithub\nPowered by Mintlify\nPublic Repositories\nPrivate Repositories\nAutomatic commit deployments with webhooks (Optional)\nMerge request deployments with webhooks (Optional)"
  },
  {
    "title": "How to use Github based Git deployments.",
    "url": "https://coolify.io/docs/knowledge-base/git/github/integration",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nIntegration\nGithub Actions\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nGithub\nIntegration\n\nA guide on how to use GitHub based repositories with Coolify.\n\nThis guide will show you how to use GitHub based repositories with Coolify.\n\n​\nPublic Repositories\n\nYou can use public repositories without any additional setup.\n\nSelect the Public repository option in the Coolify when you create a new resource.\nAdd your repository URL to the input field, for example: https://github.com/coollabsio/coolify-examples\nYou can only use the https URL.\nThat’s it! Coolify will automatically pull the latest version of your repository and deploy it.\n​\nPrivate Repositories\n​\nWith GitHub App (Recommended)\n\nYou can use private repositories with the GitHub App integration. You will get full integration with GitHub, like automatic commit deployments and pull request deployments.\n\nCreate a new GitHub App in the Sources view.\nCreate a new resource and select the Private Repository (with GitHub App).\nChoose your repository from the list.\nThat’s it!\n​\nWith Deploy Keys\nAdd a private key (aka Deploy Keys) to Coolify and to your GitHub repository in the Settings / Deploy Keys menu.\nYou can generate a new key pair with the following command:\nssh-keygen -t rsa -b 4096 -C \"deploy_key\" \n\nOr you can also use Coolify to generate a new key for you in the Keys & Tokens menu.\nCreate a new resource and select the Private Repository (with deploy key)\nAdd your repository URL to the input field, for example: git@github.com:coollabsio/coolify-examples.git\nYou need to use the SSH URL, so the one that starts with git@.\nThat’s it!\n​\nAutomatic commit deployments with webhooks (Optional)\n\nYou can add a custom webhook URL to your GitHub repository to trigger a new deployment when you push to your repository.\n\nThis can be set on either public or private repositories.\n\nNot required if you use GitHub App integration.\n\nIn your resource, there is a Webhooks menu. In the Manual Git Webhooks section, you can find the URL what you need to set in your GitHub repository.\n\nSet a secret key in the GitHub Webhook Secret input field.\nGo to your repository on GitHub and open the Settings / Webhooks menu.\nAdd the URL from Coolify to the URL input field and the secret token.\nSelect the Push events option.\nThat’s it! Now when you push to your repository, Github will send a webhook request to Coolify and it will trigger a new deployment.\n​\nPull request deployments with webhooks (Optional)\n\nYou can add a custom webhook URL to your GitHub repository to trigger a new deployment when you create a new merge request.\n\nThis can be set on either public or private repositories.\n\nNot required if you use GitHub App integration.\n\nThe process is the same as the previous one, but you need to select the Pull Request events option in the Settings / Webhooks menu.\n\nDelete User\nGithub Actions\ntwitter\ngithub\nPowered by Mintlify\nPublic Repositories\nPrivate Repositories\nWith GitHub App (Recommended)\nWith Deploy Keys\nAutomatic commit deployments with webhooks (Optional)\nPull request deployments with webhooks (Optional)"
  },
  {
    "title": "What is exactly Coolify and what are the core features?",
    "url": "https://coolify.io/docs/introduction",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGet Started\nIntroduction\nScreenshots\nVideos\nQuickstart\nInstallation - Self-hosted\nUninstall - Self-hosted\nUpgrade - Self-hosted\nDowngrade - Self-hosted\nContact\nGet Started\nIntroduction\n\nWhat is Coolify?\n\nCoolify is an all-in one PaaS that helps you to self-host your own applications, databases or services (like Wordpress, Plausible Analytics, Ghost) without managing your servers, also known as an open-source & self-hostable Heroku / Netlify / Vercel alternative.\n\n​\nFeatures\nAny Language\n\nCoolify is compatible with a wide range of programming languages and frameworks, enabling you to launch static websites, APIs, backends, databases, services, and other types of applications.\n\nAny Server\n\nYou can deploy your resources to any server, including your own servers, VPS, Raspberry Pi, EC2, DigitalOcean, Linode, Hetzner\n\n(referral link)\n\n, and more. All you need is an SSH connection.\n\nAny Use Case\n\nYou can deploy your resources to a single server, multiple servers, or Docker Swarm clusters according to your requirements.\n\n\n\n\n\n(Support for Kubernetes is on the way!)\n\nPush to Deploy\n\nNowadays, Git integration is considered the norm. We provide integration with both hosted and self-hosted platforms like GitHub, GitLab, Bitbucket, Gitea, and others.\n\nFree SSL Certificates\n\nCoolify takes care of automatically setting up and renewing Let’s Encrypt SSL certificates for your custom domains, so you can relax and not have to deal with it.\n\nAutomatic DB Backups\n\nYour data is automatically backed up to any S3 compatible solution, allowing you to easily restore it with just a few clicks if any problems occur.\n\nWebhooks\n\nIntegrate into your CI/CD pipelines or create custom integrations using Github Actions, Gitlab CI, Bitbucket Pipelines, or any other CI/CD tool of your choice.\n\nPowerful API\n\nCoolify offers a robust API that enables you to automate deployments, manage resources, and integrate with your current tools, providing limitless possibilities.\n\nCollaborative\n\nShare your projects with your team members and work together on them. You can also control permissions and roles for each member.\n\nPull Request Deployments\n\nAutomagically deploy new commits and pull requests separately to quickly review contributions and speed up your teamwork!\n\nServer Automations\n\nOnce your server is connected, Coolify will handle numerous tasks automatically, allowing you to concentrate on your code.\n\nMonitoring\n\nCoolify will keep an eye on your deployments, servers, disk usage, and other aspects, and notify you if any issues arise.\n\nNotifications\n\nCoolify will notify you through your chosen channels like Discord, Telegram, and email in case of any events on your server or with your deployments.\n\nScreenshots\ntwitter\ngithub\nPowered by Mintlify\nFeatures"
  },
  {
    "title": "How to create wildcard SSL certificates with Traefik in Coolify",
    "url": "https://coolify.io/docs/knowledge-base/traefik/wildcard-certificates",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nTraefik\nWildcard SSL Certificates\n\nA guide to configure wildcard subdomain redirects (with Traefik wildcard certificates) in Coolify.\n\n​\nPrerequisites\nYou need to have a domain name and a DNS provider that supports wildcard subdomains.\nYou need to use dnsChallenge in Traefik to get wildcard certificates from Let’s Encrypt.\nYou need to use one of the supported DNS providers.\n\nEach provider needs environment variables to be set in the Traefik configuration. You can find the required variables in the official documentation.\n\nIf you need fine-grained token, like with Cloudflare, check the provider configurations.\n\n​\nConfiguration\nSetup your wildcard subdomain DNS records, *.coolify.io.\nGo to your Proxy settings (Servers / Proxy menu) and add the following configuration based on your providers. The example will use Hetzner as a provider.\nversion: '3.8'\nnetworks:\n  coolify:\n    external: true\nservices:\n  traefik:\n    container_name: coolify-proxy\n    image: 'traefik:v2.10'\n    restart: unless-stopped\n    environment:\n      - HETZNER_API_KEY=<API Key>\n    extra_hosts:\n      - 'host.docker.internal:host-gateway'\n    networks:\n      - coolify\n    ports:\n      - '80:80'\n      - '443:443'\n      - '8080:8080'\n    healthcheck:\n      test: 'wget -qO- http://localhost:80/ping || exit 1'\n      interval: 4s\n      timeout: 2s\n      retries: 5\n    volumes:\n      - '/var/run/docker.sock:/var/run/docker.sock:ro'\n      - '/data/coolify/proxy:/traefik'\n    command:\n      - '--ping=true'\n      - '--ping.entrypoint=http'\n      - '--api.dashboard=true'\n      - '--api.insecure=false'\n      - '--entrypoints.http.address=:80'\n      - '--entrypoints.https.address=:443'\n      - '--entrypoints.http.http.encodequerysemicolons=true'\n      - '--entrypoints.https.http.encodequerysemicolons=true'\n      - '--providers.docker.exposedbydefault=false'\n      - '--providers.file.directory=/traefik/dynamic/'\n      - '--providers.file.watch=true'\n      - '--certificatesresolvers.letsencrypt.acme.httpchallenge=true'\n      - '--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=http'\n      - '--certificatesresolvers.letsencrypt.acme.dnschallenge.provider=hetzner'\n      - '--certificatesresolvers.letsencrypt.acme.dnschallenge.delaybeforecheck=0'\n      - '--certificatesresolvers.letsencrypt.acme.storage=/traefik/acme.json'\n      - '--providers.docker=true'\n    labels:\n      - traefik.enable=true\n      - traefik.http.routers.traefik.entrypoints=http\n      - traefik.http.routers.traefik.middlewares=traefik-basic-auth@file\n      - traefik.http.routers.traefik.service=api@internal\n      - traefik.http.routers.traefik.tls.certresolver=letsencrypt\n      - traefik.http.routers.traefik.tls.domains[0].main=coolify.io\n      - traefik.http.routers.traefik.tls.domains[0].sans=*.coolify.io\n      - traefik.http.services.traefik.loadbalancer.server.port=8080\n      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https\n      - traefik.http.middlewares.gzip.compress=true\n\n\nYou can also set env_file instead of environment in the example above, but then you need to create a .env file with the HETZNER_API_KEY variable on the server.\n\nChange --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=hetzner to your provider.\n\nNow you have two options to configure your wildcard subdomain for your resources.\n\n​\nNormal\n\nIf you would like to use one (wildcard) certificate for all of your resources, you can use this option.\n\nIt is useful, because Traefik do not need to generate a new certificate for every resource, so new deployments will be available immediately without waiting for the certificate generation.\n\nIn your application, set your FQDN to a subdomain you would like to use: https://example.coolify.io.\ntraefik.enable=true\ntraefik.http.routers.<unique_router_name>.rule=Host(`example.coolify.io`) && PathPrefix(`/`)\ntraefik.http.routers.<unique_router_name>.entryPoints=https\ntraefik.http.routers.<unique_router_name>.middlewares=gzip\ntraefik.http.routers.<unique_router_name>.service=<unique_service_name>\ntraefik.http.services.<unique_service_name>.loadbalancer.server.port=80\ntraefik.http.routers.<unique_router_name>.tls=true\ntraefik.http.routers.<unique_router_name>.tls.certresolver=letsencrypt\ntraefik.http.routers.<unique_router_name>.rule=Host(`example.coolify.io`) && PathPrefix(`/`)\ntraefik.http.routers.<unique_router_name>.entryPoints=http\ntraefik.http.routers.<unique_router_name>.middlewares=redirect-to-https\n\n​\nSaaS\n\nRedirect all subdomains to one application. You can use this option if you want to use Coolify as a SaaS provider.\n\nIn your application, leave the FQDN configuration empty.\nAdd the following custom label configuration:\ntraefik.enable=true\ntraefik.http.routers.<unique_router_name>.rule=HostRegexp(`{subdomain:[a-zA-Z0-9-]+}.coolify.io`)\ntraefik.http.routers.<unique_router_name>.entryPoints=https\ntraefik.http.routers.<unique_router_name>.middlewares=gzip\ntraefik.http.routers.<unique_router_name>.service=<unique_service_name>\ntraefik.http.services.<unique_service_name>.loadbalancer.server.port=80\ntraefik.http.routers.<unique_router_name>.tls=true\ntraefik.http.routers.<unique_router_name>.tls.certresolver=letsencrypt\ntraefik.http.routers.<unique_router_name>.rule=HostRegexp(`{subdomain:[a-zA-Z0-9-]+}.coolify.io`)\ntraefik.http.routers.<unique_router_name>.entryPoints=http\ntraefik.http.routers.<unique_router_name>.middlewares=redirect-to-https\n\n\ntraefik.http.routers.<unique_router_name>.tls.certresolver should be the same as your certresolver name in Traefik proxy configuration, by default letsencrypt.\n\ntraefik.http.services.<unique_service_name>.loadbalancer.server.port should be the same as your application listens on. Port 80 if you use a static deployment.\n\nYou cannot use both configurations (Normal & SaaS) at the same time on one server.\n\nRedirects\ntwitter\ngithub\nPowered by Mintlify\nPrerequisites\nConfiguration\nNormal\nSaaS"
  },
  {
    "title": "How to configure redirects with Traefik in Coolify",
    "url": "https://coolify.io/docs/knowledge-base/traefik/redirects",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nTraefik\nRedirects\n\nA guide to configure redirects with Traefik in Coolify\n\n​\nRedirects with Traefik\n\nThis guide will help you to configure redirects in Coolify with Traefik.\n\nThe configuration is slightly different for Standard Applications and Docker Compose based applications/one-click services.\n\n​\nStandard Applications\nYou need to set both FQDNs for your resource, so for example: coolify.io,www.coolify.io\nAdd a unique middleware to your resource.\n​\nwww -> non-www\n# A similar line is already defined.\ntraefik.http.routers.<unique_router_name>.rule=Host(`www.coolify.io`) && PathPrefix(`/`)\n# You need to add the middleware to the router.\ntraefik.http.routers.<unique_router_name>.middlewares=example-middleware\n# If you have multiple middlewares, you need to add them comma separated.\n# traefik.http.routers.<unique_router_name>.middlewares=gzip,example-middleware\n#\ntraefik.http.middlewares.example-middleware.redirectregex.regex=^(http|https)://www\\.(.+)\ntraefik.http.middlewares.example-middleware.redirectregex.replacement=$${1}://$${2}\ntraefik.http.middlewares.example-middleware.redirectregex.permanent=true\n\n​\nnon-www -> www\n# A similar line is already defined.\ntraefik.http.routers.<unique_router_name>.rule=Host(`coolify.io`) && PathPrefix(`/`)\n# You need to add the middleware to the router.\ntraefik.http.routers.<unique_router_name>.middlewares=example-middleware\n# If you have multiple middlewares, you need to add them comma separated.\n# traefik.http.routers.<unique_router_name>.middlewares=gzip,example-middleware\n#\ntraefik.http.middlewares.example-middleware.redirectregex.regex=^(http|https)://(?:www\\.)?(.+)\ntraefik.http.middlewares.example-middleware.redirectregex.replacement=$${1}://www.$${2}\ntraefik.http.middlewares.example-middleware.redirectregex.permanent=true\n\n​\nDocker Compose based Applications & one-click Services\nYou need to set both FQDNs for your resource, so for example: coolify.io,www.coolify.io\nYou only need add the middleware to the router.\n​\nwww -> non-www\ntraefik.http.middlewares.example-middleware.redirectregex.regex=^(http|https)://www\\.(.+)\ntraefik.http.middlewares.example-middleware.redirectregex.replacement=$${1}://$${2}\ntraefik.http.middlewares.example-middleware.redirectregex.permanent=true\n\n​\nnon-www -> www\ntraefik.http.middlewares.example-middleware.redirectregex.regex=^(http|https)://(?:www\\.)?(.+)\ntraefik.http.middlewares.example-middleware.redirectregex.replacement=$${1}://www.$${2}\ntraefik.http.middlewares.example-middleware.redirectregex.permanent=true\n\nLoad-balancing\nWildcard SSL Certificates\ntwitter\ngithub\nPowered by Mintlify\nRedirects with Traefik\nStandard Applications\nwww -> non-www\nnon-www -> www\nDocker Compose based Applications & one-click Services\nwww -> non-www\nnon-www -> www"
  },
  {
    "title": "How to configure a load-balancer with Traefik in Coolify",
    "url": "https://coolify.io/docs/knowledge-base/traefik/load-balancing",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nTraefik\nLoad-balancing\n\nA guide to configure load-balancing with Traefik in Coolify\n\nYou can easily use Traefik to loadbalance an application between:\n\n2+ servers\n2+ containers in one server\n​\n2+ servers\n​\nPrerequisites\nMake sure you set the right DNS record for your domain. Your loadbalanced domain should point to the server’s IP address where you are setting up the loadbalancer.\nYou must deploy your application to more than one servers: read more here.\nMake sure Traefik is running on all servers.\nSet your fqdn to the fqdn you would like to use to reach your application.\nAfter your application are deployed on all servers, you need to make a dynamic configuration for Traefik to loadbalance between your servers in the /data/coolify/proxy/dynamic directory.\n​\nDynamic Configuration\n\nOn your Coolify’s UI, you can go the your Server settings / Proxy tab where you can add the dynamic configuration.\n\nThe following configuration is valid if you would like to use https.\n\nhttp:\n  middlewares:\n    redirect-to-https:\n      redirectscheme:\n        scheme: https\n    gzip:\n      compress: true\n  routers:\n    lb-http:\n      middlewares:\n        - redirect-to-https\n      entryPoints:\n        - http\n      service: noop\n      # Change <CHANGE_THIS_TO_YOUR_DOMAIN> to your domain, like `example.com` without `https://`\n      rule: Host(`<CHANGE_THIS_TO_YOUR_DOMAIN>`)\n    lb-https:\n      middlewares:\n        - gzip\n      entryPoints:\n        - https\n      service: lb-https\n      tls:\n        certResolver: letsencrypt\n      # Change <CHANGE_THIS_TO_YOUR_DOMAIN> to your domain, like `example.com` without `https://`\n      rule: Host(`<CHANGE_THIS_TO_YOUR_DOMAIN>`)\n  services:\n    lb-https:\n      loadBalancer:\n        servers:\n          # Change <CHANGE_THIS_TO_YOUR_IP_ADDRESS> to your servers IP addresses\n          - url: 'http://<CHANGE_THIS_TO_YOUR_IP_ADDRESS>'\n          - url: 'http://<CHANGE_THIS_TO_YOUR_IP_ADDRESS>'\n          # Add any number of servers you want to loadbalance between\n    noop:\n      loadBalancer:\n        servers:\n          - url: ''\n\n\nThe following configuration is valid if you would like to use http.\n\nhttp:\n  middlewares:\n    gzip:\n      compress: true\n  routers:\n    lb-http:\n      middlewares:\n        - gzip\n      entryPoints:\n        - http\n      service: lb-http\n      # Change <CHANGE_THIS_TO_YOUR_DOMAIN> to your domain, like `example.com` without `http://`\n      rule: Host(`<CHANGE_THIS_TO_YOUR_DOMAIN>`)\n  services:\n    lb-http:\n      loadBalancer:\n        servers:\n          # Change <CHANGE_THIS_TO_YOUR_IP_ADDRESS> to your servers IP addresses\n          - url: 'http://<CHANGE_THIS_TO_YOUR_IP_ADDRESS>'\n          - url: 'http://<CHANGE_THIS_TO_YOUR_IP_ADDRESS>'\n          # Add any number of servers you want to loadbalance between\n\n​\n2+ containers in one server\n​\nPrerequisites\nMake sure you set the right DNS record for your domain. Your loadbalanced domain should point to the server’s IP address where you are setting up the loadbalancer.\nYou must deploy your application to more than one containers in one server.\nMake sure Traefik is running on the server.\n​\nDynamic Configuration\n\nThe following configuration is valid if you would like to use https.\n\nhttp:\n  middlewares:\n    redirect-to-https:\n      redirectscheme:\n        scheme: https\n    gzip:\n      compress: true\n  routers:\n    lb-https:\n      tls:\n        certResolver: letsencrypt\n      middlewares:\n        - gzip\n      entryPoints:\n        - https\n      service: lb-https\n      # Change <CHANGE_THIS_TO_YOUR_DOMAIN> to your domain, like `example.com` without `http://`\n      rule: Host(`<CHANGE_THIS_TO_YOUR_DOMAIN>`)\n    lb-http:\n      middlewares:\n        - redirect-to-https\n      entryPoints:\n        - http\n      service: noop\n      # Change <CHANGE_THIS_TO_YOUR_DOMAIN> to your domain, like `example.com` without `http://`\n      rule: Host(`<CHANGE_THIS_TO_YOUR_DOMAIN>`)\n  services:\n    lb-https:\n      loadBalancer:\n        servers:\n          # Change <UUID_OR_HOST.DOCKER.INTERNAL>:<PORT> to your containers UUID or host.docker.internal and port\n          # UUID is when you mapped a port to the host system\n          # host.docker.internal is when you are not exposed any port to the host system\n          - url: 'http://<UUID_OR_HOST.DOCKER.INTERNAL>:<PORT>'\n          - url: 'http://<UUID_OR_HOST.DOCKER.INTERNAL>:<PORT>:<PORT>'\n          # Add any number of containers you want to loadbalance between\n    noop:\n      loadBalancer:\n        servers:\n          - url: ''\n\n\nThe following configuration is valid if you would like to use http.\n\nhttp:\n  middlewares:\n    gzip:\n      compress: true\n  routers:\n    lb-http:\n      middlewares:\n        - gzip\n      entryPoints:\n        - http\n      service: lb-http\n      # Change <CHANGE_THIS_TO_YOUR_DOMAIN> to your domain, like `example.com` without `http://`\n      rule: Host(`<CHANGE_THIS_TO_YOUR_DOMAIN>`)\n  services:\n    lb-http:\n      loadBalancer:\n        servers:\n          # Change <UUID_OR_HOST.DOCKER.INTERNAL>:<PORT> to your containers UUID or host.docker.internal and port\n          # UUID is when you mapped a port to the host system\n          # host.docker.internal is when you are not exposed any port to the host system\n          - url: 'http://<UUID_OR_HOST.DOCKER.INTERNAL>:<PORT>'\n          - url: 'http://<UUID_OR_HOST.DOCKER.INTERNAL>:<PORT>'\n          # Add any number of containers you want to loadbalance between\n\nCustom SSL Certificates\nRedirects\ntwitter\ngithub\nPowered by Mintlify\n2+ servers\nPrerequisites\nDynamic Configuration\n2+ containers in one server\nPrerequisites\nDynamic Configuration"
  },
  {
    "title": "How to configure custom SSL certificates with Traefik in Coolify",
    "url": "https://coolify.io/docs/knowledge-base/traefik/custom-ssl-certs",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nTraefik\nCustom SSL Certificates\n\nA guide to configure custom SSL certificates with Traefik in Coolify\n\nIf you want to use custom SSL certificates with Traefik, you can easily do so by following the steps below.\n\nOn each server, /data/coolify/proxy is mounted into the Coolify Proxy (Traefik) container.\n\nYou can add your custom SSL certificates in the /data/coolify/proxy/certs directory.\n\n1\n\nGenerate or request an SSL certificate\n\nGenerate or request an SSL certificate for your domain. It can be a self-signed certificate, a certificate from a public CA, or a certificate from Let’s Encrypt.\n\nRead more here about certbot and Let’s Encrypt.\n\n2\n\nCopy the key and cert files to the server\n\nCopy the key and cert files to the server where your resource that will use the certificate is running. Use scp or any other method to copy the files.\n\nIt should be placed under /data/coolify/proxy directory, for example:\n\nscp /path/to/your/domain.cert root@your-server-ip:/data/coolify/proxy/certs/domain.cert\nscp /path/to/your/domain.key root@your-server-ip:/data/coolify/proxy/certs/domain.key\n\n\nMake sure the directory /data/coolify/proxy/certs exists on the server.\n\n3\n\nConfigure Traefik\n\nYou can configure Traefik to use the custom SSL certificates by adding a dynamic configuration file through Coolify’s UI or directly adding it to /data/coolify/proxy/dynamic:\n\ntls:\n  certificates:\n    - certFile: /traefik/certs/domain.cert\n      keyFile: /traefik/certs/domain.key\n    - certFile: /traefik/certs/domain2.cert\n      keyFile: /traefik/certs/domain2.key\n\n\n/traefik is the directory inside coolify-proxy container where /data/coolify/proxy is mounted.\n\nTraefik will automatically use this certificate if it matches the domain of the incoming request and the certificate in any of the provided files.\n\nFor more information check Traefik’s official documentation.\n\nDynamic Configurations\nLoad-balancing\ntwitter\ngithub\nPowered by Mintlify"
  },
  {
    "title": "How to make dynamic configurations with Traefik in Coolify",
    "url": "https://coolify.io/docs/knowledge-base/traefik/dynamic-configurations",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nTraefik\nDynamic Configurations\n\nA guide on how to make dynamic configurations with Traefik in Coolify\n\nDynamic configurations are used to configure Traefik on the fly, without restarting it.\n\nYou can add them by going to the Server/Proxy view, and select Dynamic Configurations from the sidebar.\n\nSome of the dynamic configurations cannot be deleted, as they required for Coolify itself.\n\nEnable Dashboard\nCustom SSL Certificates\ntwitter\ngithub\nPowered by Mintlify"
  },
  {
    "title": "How to enable Traefik's dashboard with Coolify",
    "url": "https://coolify.io/docs/knowledge-base/traefik/dashboard",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nTraefik\nEnable Dashboard\n\nA guide on how to enable Traefik’s dashboard with Coolify\n\nBy default, the Traefik dashboard is enabled in secure mode, but not configured to be accessible from the internet.\n\nTo enable access from the internet, you need to add a dynamic configuration and secure it with a username and password.\n\n​\nSecure mode (with Dynamic Configuration)\n\nHow to configure Traefik’s dynamic configuration? Read more\n\nYou can enable Traefik’s dashboard by adding the following dynamic configuration:\n\nhttp:\n  routers:\n    dashboard:\n      rule: Host(`<DOMAIN_FOR_TRAEFIK>`) && (PathPrefix(`/dashboard`) || PathPrefix(`/api`))\n      service: api@internal\n      middlewares:\n        - auth\n  middlewares:\n    auth:\n      basicAuth:\n        users:\n          - \"<GENERATED_USERNAME>:<GENERATED_PASSWORD>\"\n\n\nReplace <DOMAIN_FOR_TRAEFIK>, <GENERATED_USERNAME>, and <GENERATED_PASSWORD> with your own values.\n\nYou can reach the dashboard by visiting http://<DOMAIN_FOR_TRAEFIK>/dashboard/#/.\n\n​\nHow to generate user/password?\n\nYou can generate one with the htpasswd command:\n\nhtpasswd -nbB test test\n\n\nExample output:\n\ntest:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/\n\n​\nInsecure Mode (Not Recommended)\n\nIf you want to enable the dashboard in insecure mode (without a password), all you need to do is go to the proxy configurations view and change the insecure setting to true, then restart the proxy..\n\n   - '--api.insecure=true'\n\nBasic Auth\nDynamic Configurations\ntwitter\ngithub\nPowered by Mintlify\nSecure mode (with Dynamic Configuration)\nHow to generate user/password?\nInsecure Mode (Not Recommended)"
  },
  {
    "title": "How to use Cloudflare Tunnels with Coolify.",
    "url": "https://coolify.io/docs/knowledge-base/cloudflare/tunnels",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nCloudflare\nCloudflare Tunnels\n\nA guide on how to use Cloudflare Tunnels with Coolify.\n\nYou can run Coolify on your local machine (like old laptop/Raspberry PI) and expose it to the internet without opening any ports on your router with Cloudflare Tunnels.\n\nFor more details about CF Tunnels, please visit this page.\n\n​\nSetup Cloudflared\n\nYou have at least two ways to setup Cloudflare Tunnels with Coolify.\n\nAutomated\nManual\n​\nAutomated\n1\n\nSetup Tunnels on Cloudflare\n\nGo to https://one.dash.cloudflare.com/.\n\nSelect your account.\n\nOpen Networks-> Tunnels-> Create a Tunnel\n\nConnector: Cloudflared\n\nChoose any name you like.\n\nCopy your Cloudflare Tunnel Token from any of the commands.\n\nThe token starts with eyJ....\n\nOn the Route Tunnel tab, add the following tunnels:\n\nYou can use any domains/subdomains. This will make sure you can reach your server through Cloudflare Tunnels.\n\n2\n\nSetup Tunnels on Coolify\n\nAdd a new server with your server’s IP Address - it will be reconfigured later on.\n\nValidate the server.\n\nAfter the server is validated, click on Configure in the Cloudflare Tunnels section.\n\nPaste Cloudflare Tunnel Token from the previous step and set the SSH Domain to the domain you set in the previous step.\n\n​\nManual\n\nWIP\n\n​\nSetup Resources in Coolify\n\nYou have several options to use Cloudflare Tunnels with Coolify.\n\nOne domain -> One resource.\nWildcard subdomain -> All resources.\n​\nOne domain -> One resource\n\nIn this case, you need to add a public domain every time you would like to expose a new resource through Cloudflare Tunnels.\n\nYou can stop Coolify Proxy and set it to None, it is not needed in this case.\n\nGo to your tunnel settings on Cloudflare. (https://one.dash.cloudflare.com/ -> Networks -> Tunnels -> Select your tunnel)\nSwitch to Public Hostname tab.\nAdd a new Public Hostname.\nGo to Coolify and to your resource settings: - Remove any Domains settings. - Set Port Mappings to the same port that you set in the Public Hostname settings.\n\nAs an example, I’m deploying a static site, that listens in port 80 inside the container and I’m mapping it to the port 8888 on the host. So, I need to set the Port Mappings to 8888:80.\n\nDeploy & enjoy.\n​\nWildcard subdomain -> All resources\n\nIn this case, you only need to setup a wildcard domain once and you can expose all your resources through it.\n\nYou will need to use Coolify's Proxy to route the traffic to the correct resource.\n\nGo to your tunnel settings on Cloudflare. (https://one.dash.cloudflare.com/ -> Networks -> Tunnels -> Select your tunnel)\nSwitch to Public Hostname tab.\nAdd a new wildcard Public Hostname.\nIn Cloudflare go to Networks -> Tunnels and click on your tunnel name. From the sidebar copy the Tunnel ID.\nIn Cloudflare go to your DNS settings and add a new CNAME record with the following settings:\nName: *\nTarget: <Tunnel ID>.cfargotunnel.com\nTTL: Auto\nGo to Coolify and to your resource settings.\n\nSet the Domains to any subdomain of the wildcard domain you set in the previous step.\n\nYou need to use http:// in the Domains settings. Cloudflare will take care of the https part. For this you need to set SSL/TLS to Full in the SSL/TLS menu on Cloudflare.\n\nDeploy & enjoy.\n\nIf you would like to add a new resource, you only need to do point 6 and 7.\n\n​\nPost Setup\n\nAfter everything is setup, you can fully disable direct access to your server by disabling all the ports (except SSH (port:22 by default)) on your firewall.\n\n​\nSetup self-hosted Coolify\n\nYou can use the one domain without Coolify Proxy or wildcard setup with Coolify Proxy to expose your self-hosted Coolify instance to the internet.\n\nWith the wildcard setup, you have nothing to do.\n\nWith the one domain setup, you need a bit more setup with Coolify to make it work.\n\nLet’s say you configured the following Public Hostnames in Cloudflare:\n\napp.coolify.io mapped to localhost:8000\nrealtime.coolify.io mapped to localhost:6001\n\nAfter you installed Coolify, you need to add 3 lines your .env file, located in /data/coolify/source folder.\n\nAPP_ID=<random string>\nAPP_KEY=<random string>\nAPP_NAME=Coolify\nDB_PASSWORD=<random string>\nPUSHER_APP_ID=<random string>\nPUSHER_APP_KEY=<random string>\nPUSHER_APP_SECRET=<random string>\nREDIS_PASSWORD=<random string>\n\n###########\n# Add these lines\nPUSHER_HOST=realtime.coolify.io\nPUSHER_PORT=443\n###########\n\n\nThis tells Coolify how to connect to it’s realtime server through Cloudflare Tunnels.\n\nRestart Coolify with the installation script.\n\ncurl -fsSL https://cdn.coollabs.io/coolify/install.sh | bash\n\n\nIf you have a firewall, you also need to allow the following ports.\n\n​\nVerify\nNavigate to your Coolify instance, as in the example: https://app.coolify.io.\nLogin with the root user (the first user you created after installation).\nOpen another tab/window and navigate to https://app.coolify.io/realtime. On the other tab (opened in point 2), you should see a notification about the test event.\nIf you know what are you doing, you can check the network tab as well. Search for a websocket connection.\nCustom Commands\nHealthcheck\ntwitter\ngithub\nPowered by Mintlify\nSetup Cloudflared\nAutomated\nManual\nSetup Resources in Coolify\nOne domain -> One resource\nWildcard subdomain -> All resources\nPost Setup\nSetup self-hosted Coolify\nVerify"
  },
  {
    "title": "How to configure basic auth with Traefik in Coolify",
    "url": "https://coolify.io/docs/knowledge-base/traefik/basic-auth",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nTraefik\nBasic Auth\n\nA guide to configure basic auth with Traefik in Coolify\n\nThe configuration is slightly different for Standard Applications and Docker Compose based applications/one-click services.\n\nAll you need to do is to set custom labels on your application.\n\n​\nStandard Applications\ntraefik.http.middlewares.<random_unique_name>.basicauth.users=test:$2y$12$ci.4U63YX83CwkyUrjqxAucnmi2xXOIlEF6T/KdP9824f1Rf1iyNG\ntraefik.http.routers.<unique_router_name>.middlewares=<random_unique_name>\n\n\nYou most likely have a traefik.http.middlewares label already set. In that case, you can append the <random_unique_name> middleware to the existing value. For example:\n\ntraefik.http.routers.<unique_router_name>.middlewares=gzip,<random_unique_name>\n\n\nIn the example above, we are using test as username and test as password.\n\n​\nDocker Compose based Applications & one-click Services\n\nYou only need to add the basicauth middleware.\n\nservices:\n  changedetection:\n    labels:\n      - 'traefik.http.middlewares.<random_unique_name>.basicauth.users=test:$2y$12$ci.4U63YX83CwkyUrjqxAucnmi2xXOIlEF6T/KdP9824f1Rf1iyNG'\n\n\nIn the example above, we are using test as username and test as password.\n\nEnable Escape special characters in labels? when applying basic auth labels.\n\n​\nHow to generate user/password?\n\nYou need to set your username and password in the basicauth.users label.\n\nYou can generate one with the htpasswd command:\n\nhtpasswd -nbB test test\n\nHealthcheck\nEnable Dashboard\ntwitter\ngithub\nPowered by Mintlify\nStandard Applications\nDocker Compose based Applications & one-click Services\nHow to generate user/password?"
  },
  {
    "title": "How to configure healthchecks with Coolify",
    "url": "https://coolify.io/docs/knowledge-base/traefik/healthcheck",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nTraefik\nHealthcheck\n\nA guide on how to configure healthchecks with Coolify\n\nFor Traefik to be able to route traffic to your services, it needs to know if they are healthy or not. This is done by using healthchecks.\n\n​\nEnabled\n\nIf your resource has healthchecks enabled, Traefik will only route traffic to it if the healthcheck passes. If the healthcheck fails, Traefik will not route traffic to the resource.\n\nIt will cause the resource to be 404’d.\n\n​\nDisabled\n\nIf your resource has healthchecks disabled, Traefik will route traffic to it regardless of the healthcheck status.\n\nYou can disable healthchecks on Coolify’s UI in your resource’s settings.\n\n​\nWhich one should I use?\n\nIt is recommended to enable healthchecks for all your resources. This way, you can ensure that only healthy resources are receiving traffic.\n\nBut if you cannot set up healthchecks for some reason, you can disable them.\n\nJust be aware that if the resource is unhealthy, it will still receive traffic.\n\nCloudflare Tunnels\nBasic Auth\ntwitter\ngithub\nPowered by Mintlify\nEnabled\nDisabled\nWhich one should I use?"
  },
  {
    "title": "How to use custom commands for your Docker deployments with Coolify.",
    "url": "https://coolify.io/docs/knowledge-base/docker/custom-commands",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nDocker\nCustom Commands\n\nA guide on how to use custom commands for your Docker deployments with Coolify.\n\nFor deploying your resources, you can add custom options to the final docker command, which is used to run your container.\n\nSome of the docker native options are not supported, because it could break the Coolify’s functionality. If you need any of the unsupported options, please contact us.\n\n​\nSupported Options\n--ip\n--ip6\n--cap-add\n--cap-drop\n--security-opt\n--sysctl\n--device\n--ulimit\n--init\n--ulimit\n--privileged\n​\nUsage\n\nYou can simply add the options to the Custom Docker Options field on the General tab of your resource.\n\nExample: --cap-add SYS_ADMIN --privileged\n\nDocker Compose\nCloudflare Tunnels\ntwitter\ngithub\nPowered by Mintlify\nSupported Options\nUsage"
  },
  {
    "title": "How to use Docker Compose deployments with Coolify.",
    "url": "https://coolify.io/docs/knowledge-base/docker/compose",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nDocker\nDocker Compose\n\nA guide on how to use Docker Compose deployments with Coolify.\n\nIf you are using Docker Compose based deployments, you need to understand how Docker Compose works with Coolify.\n\nIn all cases the Docker Compose (docker-compose.y[a]ml) file is the single source of truth.\n\n​\nDefining environment variables\n\nYou have the following compose file:\n\nversion: \"3.8\"\n\nservices:\n  db:\n    image: adminer\n    environment:\n      TEST: ${TEST}\n\n\nAnd you define TEST and ANOTHERTEST environment variables inside Coolify, only TEST will be used, as Coolify cannot determine where to add ANOTHERTEST environment variable.\n\nSo if you want to use ANOTHERTEST environment variable, you need to add it to the compose file.\n\nversion: \"3.8\"\n\nservices:\n  db:\n    image: adminer\n    environment:\n      TEST: ${TEST}\n      ANOTHERTEST: ${ANOTHERTEST}\n\n​\nRaw Docker Compose Deployment\n\nYou can set with docker compose build pack to deploy your compose file directly without most of Coolify’s magic. It is called Raw Compose Deployment.\n\nThis is for advanced users. If you are not familiar with Docker Compose, we do not recommend this method.\n\n​\nWhat is still set?\n\nCoolify will still add the following labels (if they are not set) to your application:\n\nlabels:\n  - coolify.managed=true\n  - coolify.applicationId=5\n  - coolify.type=application\n\n​\nWhat to set?\n\nTo use Coolify’s Proxy (Traefik), you need to set the following labels to your application:\n\nlabels:\n  - traefik.enable=true\n  - \"traefik.http.routers.<unique_router_name>.rule=Host(`coolify.io`) && PathPrefix(`/`)\"\n  - traefik.http.routers.<unique_router_name>.entryPoints=http\n\n​\nConnect to Predefined Networks\n\nBy default, each compose stack is deployed to a separate network, with the name of your resource uuid. This will allow to each service in your stack to communicate with each other.\n\nBut in some cases, you would like to communicate with other resources in your account. For example, you would like to connect your application to a database, which is deployed in another stack.\n\nTo do this you need to enable Connect to Predefined Network option on your Service Stack page, but this will make the internal Docker DNS not work as expected.\n\nHere is an example. You have a stack with a postgres database and a laravel application. Coolify will rename your postgres stack to postgres-<uuid> and your laravel stack to laravel-<uuid> to prevent name collisions.\n\nIf you set Connect to Predefined Network option on your laravel stack, your laravel application will be able to connect to your postgres database, but you need to use the postgres-<uuid> as your DB_HOST environment variable.\n\nDocker Registry\nCustom Commands\ntwitter\ngithub\nPowered by Mintlify\nDefining environment variables\nRaw Docker Compose Deployment\nWhat is still set?\nWhat to set?\nConnect to Predefined Networks"
  },
  {
    "title": "How to configure a Docker Registry with Coolify.",
    "url": "https://coolify.io/docs/knowledge-base/docker/registry",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nDocker\nDocker Registry\n\nA guide on how to configure a Docker Registry with Coolify.\n\nYou can easily push your built docker images to any docker registries with Coolify.\n\nYou just need to fill the Docker Registry fields in your service General configurations.\n\n​\nConfiguration\n​\nDocker Image\n\nIf this field is set, Coolify will automatically push your built docker image to the specified docker registry.\n\nIf the image is empty, Coolify won’t push your built image.\n\n​\nDocker Image Tag\n\nIf this field is set, Coolify will automatically push your built docker image with the specified tag to the specified docker registry + the git commit sha tag.\n\nIf the tag is empty, Coolify only push your built image with the git commit sha tag.\n\n​\nDocker Credentials\n\nDocker credentials (from v4.0.0-beta.88) are used to authenticate with Docker registries to pull/push images.\n\nIf you want to authenticate Coolify with a Docker Registry:\n\n1\n\nLogin to your server\n\nLogin on the server through SSH with the same user that configured for your server.\n\n2\n\nAuthenticate to Docker Registry\n\nLogin to the Docker Registry, normally execute docker login command.\n\nYou will be prompted to enter your Docker registry username and password/token - this can be varied depending on the Docker registry you are using.\n\nOnce you logged in, Coolify will automatically detect your credentials and use them.\n\n​\nSwarm Mode\n\nIf you are deploying to a Swarm cluster, you need to make sure that your Docker Registry is accessible from all nodes in the cluster, workers and managers.\n\n​\nHost your own registry\n\nYou can easily host your own registry, however, it will consume a lot of storages as by default it stores images locally on the server.\n\nMore info on how to set other storage drivers can be found in the official documentation.\n\nYou can find the one-click service in Coolify.\n\n​\nSetup\n\nYou need to generate an user / password for the registry.\n\nYou can generate one with the htpasswd command:\n\nhtpasswd -nbB test test\n\n\nThen go to Storages menu, and in the /auth/registry.password file, simply add the generated user / password. One line per user.\n\nDo not forget to restart the registry service.\nDocker Swarm\nDocker Compose\ntwitter\ngithub\nPowered by Mintlify\nConfiguration\nDocker Image\nDocker Image Tag\nDocker Credentials\nSwarm Mode\nHost your own registry\nSetup"
  },
  {
    "title": "How to use Docker Swarm with Coolify.",
    "url": "https://coolify.io/docs/knowledge-base/docker/swarm",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nDocker\nDocker Swarm\n\nA guide on how to use Docker Swarm with Coolify.\n\nThis is an experimental feature.\n​\nSetup in Coolify\n\nIf you would like to use a Swarm to deploy your resources, you need to add the Swarm Manager to Coolify.\n\nOptionally, you can add the Swarm Workers to Coolify. This will allow Coolify to do cleanups and other stuff on the Swarm Workers.\n\n​\nDocker Registry\n\nYou need to have an external Docker Registry available to use the a Swarm, as all workers need to be able to pull the images you built with Coolify.\n\nThe Swarm Manager needs to push the image to the Docker Registry.\nThe Swarm Workers need to pull the image from the Docker Registry.\n\nSo set your docker login credentials accordingly. More information here.\n\n​\nInstall Swarm Cluster\n\nWIP This is just a brief guide to install a simple Docker Swarm cluster. For more information, please refer to the official documentation.\n\n​\nPrerequisites\nI will use Hetzner (referral link) for this guide. You can use any other provider.\nYou need at least 3 servers to create a Docker Swarm cluster with the same architecture (ARM or AMD64).\n1 server for the manager node.\n2 servers for the worker nodes (you can add more worker nodes if you want).\nAdd private networking to all servers if possible.\n​\nInstall Docker\n\nInstall Docker on all servers. You can follow the official documentation or:\n\nInstall with Rancher script\ncurl https://releases.rancher.com/install-docker/24.0.sh | sh\n\nInstall with Docker script\ncurl https://get.docker.com | sh -s -- --version 24.0\n\n\nYou only need to use one of the above commands.\n\n​\nConfigure Docker\n\nOn all servers, run the following command to start Docker.\n\nsystemctl start docker\nsystemctl enable docker\n\n\nHetzner specific configuration. Hetnzer servers use a MTU of 1450. You need to configure Docker to use the same MTU.\n\nOn the manager, run the following command to configure Docker.\n\nmkdir -p /etc/docker\ncat <<EOF > /etc/docker/daemon.json\n{\n  \"default-network-opts\": {\n    \"overlay\": {\n      \"com.docker.network.driver.mtu\": \"1450\"\n    }\n  }\n}\nEOF\nsystemctl restart docker\n\n​\nCreate a Swarm cluster\n\nOn the manager node, run the following command to create a new cluster.\n\n# MANAGER_IP = IP of the manager node. If you have private networking, use the private IP, like 10.0.0.x.\ndocker swarm init --advertise-addr <MANAGER_IP>\n\n\n\nThis command will output a command to join the cluster on the worker nodes.\n\nIt should look like something like this:\n\n# DO NOT RUN THIS COMMAND, IT IS JUST AN EXAMPLE, HELLO!\ndocker swarm join --token SWMTKN-1-24zvxeydjarchy7z68mdawichvf684qvf8zalx3rmwfgi6pzm3-4ftqn9n8v98kx3phfqjimtkzx 10.0.0.2:2377\n\n​\nVerify the cluster\n\nRun the following command on the manager node to verify the cluster.\n\ndocker node ls\n\n\nYou should see something like this:\n\nID                            HOSTNAME        STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION\nua38ijktbid70em257ymxufif *   swarm-manager   Ready     Active         Leader           24.0.2\n7rss9rvaqpe9fddt5ol1xucmu     swarm-worker    Ready     Active                          24.0.2\n12239rvaqp43gddtgfsdxucm2     swarm-worker    Ready     Active                          24.0.2\n\n\n​\nDeploy with persistent storage\n\nTo be able to deploy a service with persistent storage, you need to have a shared volume on the swarm-workers. So the Swarm service could move the resources between the swarm-workers.\n\nYou can always use services like AWS EFS, NFS, GlusterFS, etc.\n\nWIP\n\nCloudflare R2\nDocker Registry\ntwitter\ngithub\nPowered by Mintlify\nSetup in Coolify\nDocker Registry\nInstall Swarm Cluster\nPrerequisites\nInstall Docker\nConfigure Docker\nCreate a Swarm cluster\nVerify the cluster\nDeploy with persistent storage"
  },
  {
    "title": "How to configure AWS S3 bucket in Coolify",
    "url": "https://coolify.io/docs/knowledge-base/s3/aws",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nS3\nAWS S3\n\nHere you can find the documentation for configuring AWS S3 bucket in Coolify.\n\n​\nTLDR\nCreate a bucket in AWS Console\nCreate a custom policy in AWS Console with the following permissions:\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:ListBucket\",\n        \"s3:GetObject\",\n        \"s3:DeleteObject\",\n        \"s3:GetObjectAcl\",\n        \"s3:PutObjectAcl\",\n        \"s3:PutObject\"\n      ],\n      \"Resource\": [\n        // rewrite your-bucket-name with your bucket name\n        \"arn:aws:s3:::your-bucket-name\",\n        \"arn:aws:s3:::your-bucket-name/*\"\n      ]\n    }\n  ]\n}\n\nCreate an IAM user in AWS Console & attach the policy from the previous step.\nGo to User settings & create an Access Key in AWS Console.\nAdd the Access Key and Secret Key in Coolify when you create a new S3 source.\n\nYou need to use the S3 HTTP endpoit without the bucket name, for example, https://s3.eu-central-1.amazonaws.com.\n\n​\nDetailed steps\n​\nCreate a bucket\n1\n\nCreate a bucket.\n\nGo to AWS Console and create a new bucket.\n\n2\n\nName your bucket.\n\n​\nCreate a new policy\n1\n\nCreate a new policy.\n\nGo to AWS Console and create a new policy.\n\n2\n\nName & configure your policy.\n\nAdd the following JSON permissions to your policy (replace your-bucket-name with your bucket name):\n\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:ListBucket\",\n        \"s3:GetObject\",\n        \"s3:DeleteObject\",\n        \"s3:GetObjectAcl\",\n        \"s3:PutObjectAcl\",\n        \"s3:PutObject\"\n      ],\n      \"Resource\": [\n        \"arn:aws:s3:::your-bucket-name\",\n        \"arn:aws:s3:::your-bucket-name/*\"\n      ]\n    }\n  ]\n}\n\n\n​\nCreate a new IAM user\n1\n\nCreate a new IAM User.\n\nGo to AWS Console and create a new user.\n\n2\n\nName your user.\n\n3\n\nAttach the policy created in the previous step.\n\n4\n\nGo to your user settings.\n\n5\n\nCreate a new `Access Key`.\n\n6\n\nSet `Other` as use-case.\n\n7\n\nCopy the `Access Key` & `Secret Access Key`.\n\nYou will need it to configure this S3 storage in Coolify.\n\n​\nConfigure S3 in Coolify\n1\n\nAdd new S3 Storage\n\nGo to your Coolify instance and create a new S3 storage.\n\n2\n\nAdd the details.\n\nMake sure you use the S3 HTTP endpoint without the bucket name. For example, https://s3.eu-central-1.amazonaws.com.\n\nWell done!\n\nIntroduction\nCloudflare R2\ntwitter\ngithub\nPowered by Mintlify\nTLDR\nDetailed steps\nCreate a bucket\nCreate a new policy\nCreate a new IAM user\nConfigure S3 in Coolify"
  },
  {
    "title": "How to configure Cloudflare R2 bucket in Coolify",
    "url": "https://coolify.io/docs/knowledge-base/s3/r2",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nS3\nCloudflare R2\n\nHere you can find the documentation for configuring Cloudflare R2 bucket in Coolify.\n\nCloudflare R2 is an S3 compatible storage. You can use it with Coolify to store your backups.\n\n​\nConfiguration\nYou need to create a bucket first in the Cloudflare R2 dashboard.\nThen you need to create a R2 API token with Object Read & Write permission.\nYou can find the S3 client credentials when the token is created.\n\nYou will need the Access Key ID, Secret Access Key and the S3 endpoint from this view. Save them.\n\nYou can use the details from the previous step to configure Coolify.\nAWS S3\nDocker Swarm\ntwitter\ngithub\nPowered by Mintlify\nConfiguration"
  },
  {
    "title": "How to configure S3 compatible storage for Coolify",
    "url": "https://coolify.io/docs/knowledge-base/s3/index",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nS3\nIntroduction\n\nA guide how to configure S3 compatible storage for Coolify.\n\nCurrently supported S3 compatible storages are:\n\nAWS\nDigitalOcean Spaces\nMinIO\nCloudflare’s R2\nBackblaze B2\nScaleway Object Storage\n\nOther’s could work, but not tested yet. If you test it, please let us know.\n\n​\nS3 Client\n\nCoolify uses MinIO’s client, called mc, to copy the backup files to your S3 compatible storage.\n\n​\nVerification\n\nTo be able to use your S3 compatible storage, you need to verify it first. Verification done with ListObjectsV2 request to your specified bucket.\n\nSo you need to create a bucket first, and then you can verify it.\n\nNon-root user\nAWS S3\ntwitter\ngithub\nPowered by Mintlify\nS3 Client\nVerification"
  },
  {
    "title": "How to use a server with a non-root user",
    "url": "https://coolify.io/docs/knowledge-base/server/non-root-user",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nServer\nNon-root user\n\nA guide on how to use a server with a non-root user\n\nThis is an experimental feature.\n\nYou could have a server with a non-root user that will manage your resources instead of the root user.\n\nFor this to work, you need to set up the server correctly.\n\n​\nRequirements\nThe non-root user needs to have the SSH key added to the server.\nSudos permissions for the non-root user.\n​\nSudo permissions\n\nYou need to add the following lines to the /etc/sudoers file:\n\n# Allow the non-root user to run commands as root without a password\nnon-root-user ALL=(ALL) NOPASSWD: ALL\n\n\nThis will allow the non-root user to any command as root without a password.\n\nThis is not the most secure way to set up a non-root user, but we will improve this in the future, by adding more granular permissions on binaries.\n\nAutomated Cleanup\nIntroduction\ntwitter\ngithub\nPowered by Mintlify\nRequirements\nSudo permissions"
  },
  {
    "title": "How automated cleanups work in Coolify",
    "url": "https://coolify.io/docs/knowledge-base/server/automated-cleanup",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nServer\nAutomated Cleanup\n\nA guide on how automated cleanups work in Coolify\n\nCoolify automatically cleans up your servers to prevent them from running out of disk space. It will remove all the unused Docker images, containers, and volumes.\n\n​\nHow it works\nCoolify will run the cleanup script every 10 minutes.\nIf there is an ongoing deployment, the cleanup script will be skipped - to prevent any issues, like deleting the image that is currently being used.\nThe cleanup script will remove all the unused Docker images, containers, and volumes with the following commands:\n# This will remove all unused Docker images\ndocker image prune -af\n# This will remove all coolify.managed containers that are not running\ndocker container prune -f --filter \"label=coolify.managed=true\"\n# This will remove all unused Docker build caches\ndocker builder prune -af\n\nSupported Proxy\nNon-root user\ntwitter\ngithub\nPowered by Mintlify\nHow it works"
  },
  {
    "title": "Supported proxies with Coolify",
    "url": "https://coolify.io/docs/knowledge-base/server/proxies",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nServer\nSupported Proxy\n\nA guide for Coolify supported proxies.\n\nCoolify supports Traefik (default) and Caddy (experimental) proxies.\n\n​\nSwitch between proxies\n\nSince beta.237, we have added support for Caddy and Traefik as proxies. You can switch between them at any time.\n\nBefore you switch proxies and if you have an application that was created before beta.237, you need to make sure of the following:\n\nYou must have caddy_* or traefik_* labels on your resources.\n\nIf you don’t have caddy_* or traefik_* labels: 1. Automatically: A restart of your resource will add the missing labels. 2. Manually: - For Applications: click on the Reset to Coolify Default Labels button. - For Services: simply save the service - it will automatically add required labels.\n\nYou need to restart your service so that the new labels will be applied.\nOracle Cloud\nAutomated Cleanup\ntwitter\ngithub\nPowered by Mintlify\nSwitch between proxies"
  },
  {
    "title": "What is required for Oracle Cloud servers to use in Coolify",
    "url": "https://coolify.io/docs/knowledge-base/server/oracle-cloud",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nServer\nOracle Cloud\n\nA guide to use Oracle Cloud servers in Coolify\n\nIf you are using Oracle Cloud free ARM server, you need to do a few extra steps to use it in Coolify, as a Coolify instance or just a remote server.\n\n​\nNormal user\n\nNon-root user is in experimental mode and works with sudo.\n\nMake sure the ssh key is added to the user’s ~/.ssh/authorized_keys file.\nAll configuration is set for sudo. Details here.\n​\nSetup Root User\n\nBy default, you can’t login as root user. You need to do the following steps to enable root user.\n\nSwitch to root user sudo su -\nEdit /etc/ssh/sshd_config and change PermitRootLogin to without-password.\nRestart ssh service service sshd restart\nAdd a public key to /root/.ssh/authorized_keys file which is also defined in your Coolify instance.\n​\nFirewall Rules\n\nThis is only required if you self-host Coolify on Oracle ARM server.\n\nBy default, Oracle ARM server has a firewall enabled and you need to allow some ports to use Coolify.\n\nFor more details, check this page.\n\nOpenSSH\nSupported Proxy\ntwitter\ngithub\nPowered by Mintlify\nNormal user\nSetup Root User\nFirewall Rules"
  },
  {
    "title": "How to configure OpenSSH for Coolify.",
    "url": "https://coolify.io/docs/knowledge-base/server/openssh",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nServer\nOpenSSH\n\nA guide to configure OpenSSH for Coolify.\n\nCoolify uses SSH to connect to your server and deploy your application, even if you are using only the localhost server - where Coolify is running on.\n\nTo validate your configuration, make sure the followings are set on your server.\n\nSome commands may vary based on your Linux distribution.\n\nMake sure the SSH key does not have a passphrase. Connection will fail if the key has a passphrase.\n\n1\n\nSSH Enabled\n\nMake sure SSH is enabled and you can connect to your server with SSH from your local machine with root user.\n\n\n# Ubuntu/Debian\n\nsudo apt install openssh-server\nsudo systemctl status sshd\n\n# CentOS/RHEL\n\nsudo yum install openssh-server\nsudo systemctl status sshd\n\n# Arch Linux\n\nsudo pacman -S openssh\nsudo systemctl status sshd\n\n# Alpine Linux\n\nsudo apk add openssh\nsudo rc-service sshd status\n\n# SLES/openSUSE\n\nsudo zypper install openssh\nsudo systemctl status sshd\n\n\n2\n\nRoot Login\n\nMake sure PermitRootLogin is set to yes or without-password or prohibit-password in /etc/ssh/sshd_config file.\n\n# Check the current value\ngrep PermitRootLogin /etc/ssh/sshd_config\n\n# If the value is not `yes` or `without-password` or `prohibit-password`, change it and make sure it is not commented out.\n# If it is commented out, remove the `#` character at the beginning of the line.\n\nsudo vi /etc/ssh/sshd_config\n\n# You can exit the editor by pressing `Esc` and then `:wq` and then `Enter` keys - thank me later.\n\n# Restart the SSH service\n# Ubuntu/Debian/CentOS/RHEL/Arch Linux/SLES/openSUSE\nsudo systemctl restart sshd\n\n# Alpine Linux\nsudo rc-service sshd restart\n\n\n3\n\nSSH Key set on the Server\n\nMake sure an SSH key is added to the ~/.ssh/authorized_keys file. If you installed Coolify with the automated script, you don’t need to do anything else.\n\nIf you installed Coolify manually, you need to add an SSH key to the ~/.ssh/authorized_keys file.\n\nMake sure the SSH key does not have a passphrase. Connection will fail if the key has a passphrase.\n\n# Create a new SSH key pair ed25519 (recommended) or rsa (legacy) with the following command.\n\n# The key needs to be created in the `/data/coolify/ssh/keys` directory with,\n# id.root@host.docker.internal name,\n# no passphrase,\n# root@coolify comment.\n\nssh-keygen -t ed25519 -a 100 -f /data/coolify/ssh/keys/id.root@host.docker.internal -q -N \"\" -C root@coolify\nchown 9999 /data/coolify/ssh/keys/id.root@host.docker.internal\n\n# Copy the public key to the `authorized_keys` file\ncat /data/coolify/ssh/keys/id.root@host.docker.internal.pub >>~/.ssh/authorized_keys\n\n# Set the correct permissions\nchmod 600 ~/.ssh/authorized_keys\nchmod 700 ~/.ssh\n\n4\n\nSSH Key set in Coolify\n\nAdd the private key to Coolify at Keys & Tokens menu -> Private Keys and set this new key in the localhost server settings.\n\nMultiple Servers\nOracle Cloud\ntwitter\ngithub\nPowered by Mintlify"
  },
  {
    "title": "How to deploy a resource to multiple servers with Coolify",
    "url": "https://coolify.io/docs/knowledge-base/server/multiple-servers",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nServer\nMultiple Servers\n\nA guide on how to deploy a resource to multiple servers with Coolify\n\nThis is an experimental feature.\n\nWith this feature, You could deploy the same application to multiple servers, add a load balancer in front of them and you will get a highly available application.\n\n​\nRequirements\nEach server should be added to Coolify, validated and reachable.\nEach server (and the optional build server) should be the same architecture (AMD64, ARM).\nYou must push the built image to a Docker Registry. Coolify automates the process, you just need to login to the registry on the server.\n​\nHow to use?\n\nWhen you configure (or already configured) an application, you selected a server / network where it deploys. This will be your main server.\n\nAny additional servers must be set in the Servers menu, simply by clicking on it.\n\nNow everytime you redeploy, restart or stop the application, the action will be done on all servers.\n\nIf the deploy needs a build process, it will be executed on the main server (or on the build server if you have on). The deploy process will upload the built image to the Docker Registry and only after all other servers will be notified to pull and deploy this image.\n\n​\nHow to configure a loadbalancer?\n\nAt the moment, it is not automated. So you have to manually setup a loadbalancer. There are two ways to use.\n\n​\nPort mapping to host\n\nIf you set Ports Mappings for your application, so one port from the docker container will mapped to a port on the host server, all you need to do is to:\n\nSet all the IP:PORT as a destination in your loadbalancer.\nRemove any domains from the Domains field in Coolify.\n\nIn this case, Coolify Proxy is not used as you can reach the application with IP:PORT\n\nThis is super simple and effective. But keep in mind, that you need to only allow incoming connections to the selected PORT from the loadbalancer, otherwise everyone can reach your application directly, without the loadbalancer.\n\n​\nUsing a domain\n\nIn this case, you need to set the loadbalancer domain with HTTP, (not HTTPS) in the Domains field, and then set the proper configuration for your loadbalancer, with SSL termination.\n\nWith this configuration, you can use several domains with one loadbalancer.\n\nBuild Server\nOpenSSH\ntwitter\ngithub\nPowered by Mintlify\nRequirements\nHow to use?\nHow to configure a loadbalancer?\nPort mapping to host\nUsing a domain"
  },
  {
    "title": "How to use a build server with Coolify",
    "url": "https://coolify.io/docs/knowledge-base/server/build-server",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nServer\nBuild Server\n\nA guide on how to use a build server with Coolify\n\nThis is an experimental feature.\n\nYou could have a build server to build your projects on instead of building them on the server where you host your resources.\n\nThis keeps the load separated, so it does not affect your application’s performance.\n\n​\nRequirements\nThe built images needs to be pushed to a container registry.\nThe server needs to be authenticated to the container registry. See this for more information.\nThe server needs to have access to the source code.\nThe server needs Docker Engine installed.\nThe server should be the same architecture as the deployment servers.\n\nIf you have more than one build server, the used server will be chosen randomly.\n\n​\nHow to use\nAdd a new server to Coolify.\nEnable the Build Server feature while creating a new resource.\n\nAfter this, Coolify will use this server to build your resources, in case you enabled the Build Server feature for them.\n\n​\nHow to set a build server for a resource\nCreate or go to a resource that you want to use a build server for.\nEnable the Build Server feature on the General tab, Build section.\nMake sure you set up a container registry for the resource.\nFirewall\nMultiple Servers\ntwitter\ngithub\nPowered by Mintlify\nRequirements\nHow to use\nHow to set a build server for a resource"
  },
  {
    "title": "What firewall rules are required for Coolify",
    "url": "https://coolify.io/docs/knowledge-base/server/firewall",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nServer\nFirewall\n\nA list of ports that need to be open on your firewall for Coolify to work properly.\n\n​\nSelf-hosted version\n\nFor self-hosting Coolify, you need to allow some ports on your firewall.\n\nFor Coolify: 8000 (http), 6001 (websocket) and 22 (SSH, or a custom port) (required)\nReverse Proxy: 80, 443 (optional)\n\nIf you are using Oracle Cloud Free ARM Server, you need to allow these ports inside Oracle’s Dashboard, otherwise you cannot reach your instance from the internet after installation.\n\nFor GitHub integration, check this.\n​\nCloud version\n\nIf you need the public facing IPs to allow inbound connections to your servers, here is an up-to-date list of IPs that you can use to whitelist:\n\nhttps://coolify.io/ipv4.txt\nhttps://coolify.io/ipv6.txt\nIntroduction\nBuild Server\ntwitter\ngithub\nPowered by Mintlify\nSelf-hosted version\nCloud version"
  },
  {
    "title": "What kind of servers can I connect to Coolify?",
    "url": "https://coolify.io/docs/knowledge-base/server/introduction",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nServer\nIntroduction\n\nA guide to help you understand what kind of servers you can connect to Coolify.\n\nNo matter what type of server you have (localhost or remote), you need the following requirements.\n\nConnectivity\n\nSSH connectivity between Coolify and the server with SSH key authentication.\n\nYour public key should be added to root user’s ~/.ssh/authorized_keys. If you do not have an SSH Key, you can generate on through Coolify with a simple button or you can generate one manually.\n\nDocker Engine (24+)\n\n​\nTypes\nLocalhost: the server where Coolify is installed.\nRemote Server: could be any remote linux server.\n​\nLocalhost\n\nTo be able to manage the server where Coolify is running on, the docker container of Coolify should reach the host server through SSH.\n\nYou can use localhost as a server where all your resources are running, but it is not recommended as high server usage could prevent to use Coolify.\n\nYou can use our Cloud version, so you only need a server for your resources. You will get a few other things included with the cloud version, like free email notifications, s3 storage, etc based on your subscription plan.\n\n​\nRemote Server\n\nYou can connect any type of servers to Coolify. It could be a VPS, a Raspberry PI or a laptop running Linux.\n\nIf you don’t have a server or server provider yet, we prefer to use Hetzner.\n\nYou can use our referral link. It will helps us to keep the project alive.\n\n​\nCloudflare Tunnels\n\nYou can also set to use Cloudflare Tunnels for your servers.\n\nCoolify does not install cloudflared on your server, it needs to be done prior.\n\nAll it does is to add the right ProxyCommand (ProxyCommand <ip / hostname> access ssh --hostname %h) to all ssh connections.\n\n​\nFeatures\n​\nDisk Cleanup threshold\n\nYou can set a threshold in % for your / filesystem. If this percentage is reached, Coolify tries to cleanup a lot of unnecessary files from your server.\n\nUnused Docker Images (docker image prune -af')\nUnused Docker Build Images (docker builder prune -af)\nStopped Docker Containers deployed by Coolify (docker container prune -f --filter \"label=coolify.managed=true\")\n​\nWildcard Domain\n\nYou can set a wildcard domain (example: http://example.com) to your server, so you can easily assign generated domains to all the resources connected to this server.\n\nExample: Your application UUID is vgsco4o.\n\nIf you have the example set, you will get the following FQDN: http://vgsco4o.example.com\n\nIf you do not have any wildcard domain set, Coolify will generate a sslip.io domain, which is free & magical domain that you can use anywhere.\n\nIn this case, it will be: http://vgsco4o.127.0.0.1.sslip.io, where 127.0.0.1 is your server’s IP.\n\n​\nProxy\nTraefik: Automatically configure Traefik(v2) based on your deployed resources.\nCustom/None: You will configure a proxy manually (only for advanced users).\n\nSoon we will support Nginx & Caddy with fully automated configuration.\n\n​\nTraefik\n\nCoolify uses Traefik proxy by default to create a reverse proxy for your resources.\n\nTraefik only starts when you did not select any proxy for your server and you have a domain configured for a resource or your Coolify instance itself.\n\n​\nDynamic Configuration\n\nYou can always add your own configuration to the proxy settings from Coolify’s UI (/server/<server_uuid>/proxy).\n\nIntegration\nFirewall\ntwitter\ngithub\nPowered by Mintlify\nTypes\nLocalhost\nRemote Server\nCloudflare Tunnels\nFeatures\nDisk Cleanup threshold\nWildcard Domain\nProxy\nTraefik\nDynamic Configuration"
  },
  {
    "title": "Delete User",
    "url": "https://coolify.io/docs/knowledge-base/self-hosted-admin/delete-user",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nAdministration (Self-hosted)\nDelete User\n\nHow to delete a user from the self-hosted Coolify instance.\n\nThis guide will show you how to delete a user from the self-hosted Coolify instance.\n\nIf you delete a user, and Coolify still has connection to the servers, it will delete all the resources on the servers as well, not just from Coolify’s database.\n\nOnly users who are in the root team can delete users from the UI.\n\nGo to the Team page.\nSwitch to Admin View tab.\n\nHere you can see all the users registered in Coolify. Click on the Delete button next to the user you want to delete.\n\n​\nDeletion process\nThe root team or root user cannot be deleted.\n\nCoolify iterate over all the teams of a user and decide of the followings:\n\n​\nThe user is alone in the team\n\nThe team and all resources from the server and from Coolify’s database are deleted.\n\n​\nThe user is not alone in the team\n\nThe user is the owner/admin of the team and no other owners/admins found, but the team has members:\n\nThe ownership is transferred to the first user in the team who is not the owner/admin.\nThe user is removed from the team. No resources are deleted.\n\nThe user is the owner/admin of the team and no other owners/admins found, but the team has no members:\n\nThe team and all resources from the server and from Coolify’s database are deleted.\n\nThe user is not the owner/admin of the team:\n\nThe user is removed from the team. No resources are deleted.\nLoad Balancing on Hetzner\nIntegration\ntwitter\ngithub\nPowered by Mintlify\nDeletion process\nThe user is alone in the team\nThe user is not alone in the team"
  },
  {
    "title": "How to deploy a loadbalanced application with Coolify on Hetzner",
    "url": "https://coolify.io/docs/knowledge-base/how-to/hetzner-loadbalancing",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nHow-tos\nLoad Balancing on Hetzner\n\nHere you can find the documentation for deploying a loadbalanced application with Coolify on Hetzner.\n\nHetzner Cloud is a cloud hosting provider that offers a wide range of services. In this guide, we will show you how to deploy a load-balanced application with Coolify on Hetzner Cloud.\n\n​\nIntroduction\n\nYour application is growing, and you need to scale it. One of the most common ways to scale an application is to use a load balancer. A load balancer distributes incoming traffic across multiple servers, ensuring that no single server is overwhelmed. This can help improve the performance and reliability of your application.\n\nIn this guide, we will show you how to deploy a load-balanced application with Coolify on Hetzner Cloud. We will use two (or more) servers to host our application and a load balancer to distribute incoming traffic. We will also show you how to set up a database server if you need one.\n\nThe whole infractructure costs around ~15€ per month.\n​\nRequirements\nA domain name managed by Hetzner Cloud\n2 (or more) servers on Hetzner Cloud\nA load balancer on Hetzner Cloud\nFirewall rules to restrict access to your servers\nOptional: A database server on Hetzner Cloud\n​\nSteps\n1\n\nBuy Servers\n\nFirst, you need to buy two (or more) servers on Hetzner Cloud. You can choose the server type and location based on your requirements. Make sure to choose servers with enough resources to run your application.\n\nImportant\n\nMake sure you create and attach a private network to your servers. This will allow your servers to communicate with each other using a private network.\n\nIf you don’t have an account on Hetzner Cloud, you can sign up with this referral link.\n\n2\n\nAdd & validate them in Coolify\n\nOnce you have bought the servers, you need to add them to Coolify. You can do this by clicking on the Add Server button in the Coolify dashboard and following the instructions.\n\nCoolify will automatically install the necessary software on your servers.\n\n3\n\nOptional: Deploy your database\n\nIt is preferable to have a separate database server for your application. Not just for performance reasons, but also for security reasons. Also in this way you can connect your applications to a centralized database server.\n\nSkip this step if you don’t need a database server or if you already have one hosted elsewhere.\n\nOnce you have bought the database server, and added it to Coolify, deploy your preferable database type (MySQL, PostgreSQL, etc.) on it.\n\nImportant\n\nWe won’t use a reverse proxy in this guide. We will bind the database to the public IP address of the server. We will use a firewall to restrict access to the database server.\n\nYou can stop them on the Server tab and switch to a None proxy type.\n\nMake sure you set the Ports Mappings correctly to allow your application servers to connect to the database server.\n\nPostgreSQL: 5432:5432\nMySQL: 3306:3306\nMariaDB: 3306:3306\nMongoDB: 27017:27017\n4\n\nDeploy your applications\n\nNow it’s time to deploy your application on the app servers. Details of deploying your application will depend on the type of application you are deploying.\n\nWith Coolify, you can attach more than one server to the same application. This will allow you to deploy your application on multiple servers.\n\nImportant\n\nWe won’t use a reverse proxy in this guide. We will bind the application to the public IP address of the server, as the load balancer will handle the routing.\n\nYou can stop them on the Server tab and switch to a None proxy type.\n\nMake sure you set the Ports Mappings correctly to forward your application ports to the public IP address of the server.\n\nIf your application uses a database, make sure you update the database connection string to point to the database server.\n\nHetzner Cloud has a private network feature that allows you to connect your servers using a private network. This can help improve the security and performance of your application. Make sure you enable the private network feature on your servers and use it in the database connection string.\n\nTest if your application is working correctly by accessing the public IP address and port of the server in your browser.\n\n5\n\nAdd & configure the loadbalancer\n\nNow it’s time to add a load balancer to distribute incoming traffic across your servers.\n\nThis loadbalancer will do the following:\n\nDistribute incoming traffic across your servers\nTerminates TLS connections (makes your application secure with HTTPS and forwards the traffic to your servers over HTTP)\nHealth checks your servers and routes traffic to healthy servers\n\nYour application is running on port 8000 on both servers and you have a domain name example.com.\n\nGo to the Hetzner Cloud Console and click on Load Balancers in the left sidebar.\nClick on the Create Load Balancer button.\nSelect a region where your servers are located.\nSelect the private network that you have created for your servers.\nSelect all servers in the targets section. Important: (use the private network).\nIn the services, delete the default service and add a TLS Termination predefined service.\nAs Destination Port enter 8000 (source port should be 443).\nAdd a certificate for your domain name. It will generate a certificate for your domain name using Let’s Encrypt.\nIn the health check section, configure the health check endpoint to your application health check endpoint. (just an endpoint that returns 200 OK).\nOptional: Sticky sessions can be enabled, which will make sure that a user is always routed to the same server for a time period, otherwise, the load balancer will distribute the traffic randomly across your servers.\nChoose an algorithm.\nAnd finally name your load balancer and click on Create & Buy now.\n\nWait for the load balancer to be created and healthy. Once it’s healthy, you can check if your application is accessible via the loadbalancer’s IP address.\n\n6\n\nSetup DNS\n\nNow it’s time to point your domain name to the load balancer's IP address. You can do this by adding an A record to your domain name provider’s DNS settings.\n\nGo to your DNS settings.\nAdd an A record with the domain name and the value of the load balancer’s IP address.\nSave the changes and wait for the DNS changes to propagate.\n\nOnce the DNS changes have propagated, you should be able to access your application using your domain name.\n\n7\n\nSetup Firewall\n\nHetzner Cloud offers a firewall feature that allows you to restrict access to your servers. We will use this feature to restrict access to your servers.\n\nAs the load balancer communicates with your servers over the private network, we only need to add rules for the public IP addresses.\n\nThe Inbound rules includes everything that is allowed. Everyting else is blocked by default.\n\nGo to the Hetzner Cloud Console and click on Firewalls in the left sidebar.\nClick on the Create Firewall button.\nAdd SSH access rule for your IP address to the Inbound rules.\nAdd your servers to the Apply rule section.\nName your firewall and click on Create Firewall.\n\nOptional: You can add more rules to allow access to specific ports or IP addresses if needed.\n\nAdd a service\nDelete User\ntwitter\ngithub\nPowered by Mintlify\nIntroduction\nRequirements\nSteps"
  },
  {
    "title": "How to add a new service to Coolify",
    "url": "https://coolify.io/docs/knowledge-base/add-a-service",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nGeneral\nAdd a service\n\nHere you can find the documentation for adding new services to Coolify.\n\nService templates are predefined normal docker-compose files + a bit of magic.\n\n​\nThe bit of Magic\n\nTo be able to predefine values, like usernames, passwords, fqdns, predefined values for bind (file) mounts etc, the docker-compose files are extended with a few keywords.\n\nMore magic coming soon 🪄\n\nIn the environment option, you can do the following.\n\nLet’s use APPWRITE as an example with a generate UUID of vgsco4o and with a wildcard domain of http://example.com.\n\n​\nFQDN\n\nThis will generate a FQDN for appwrite service.\n\nservices:\n  appwrite:\n    environment:\n      # http://appwrite-vgsco4o.example.com/\n      - SERVICE_FQDN_APPWRITE\n\n\nIf you use the same variable on another service, it will generate the same FQDN for you.\n\n# This does not make sense, just here to show you how it works.\nservices:\n  appwrite:\n    environment:\n      # http://appwrite-vgsco4o.example.com/\n      - SERVICE_FQDN_APPWRITE\n  not-appwrite:\n    environment:\n      # http://appwrite-vgsco4o.example.com/\n      - SERVICE_FQDN_APPWRITE\n\n\nYou sometimes need the same domain, but with different paths.\n\n# This make sense, not like the previous.\nservices:\n  appwrite:\n    environment:\n      # http://appwrite-vgsco4o.example.com/\n      - SERVICE_FQDN_APPWRITE\n  not-appwrite:\n    environment:\n      # http://appwrite-vgsco4o.example.com/v1/realtime\n      - SERVICE_FQDN_APPWRITE=/v1/realtime\n  definitely-not-appwrite:\n    environment:\n      # As SERVICE_FQDN_API is not the same as SERVICE_FQDN_APPWRITE\n      # Coolify will generate a new FQDN\n      # http://definitely-not-appwrite-vgsco4o.example.com/api\n      - SERVICE_FQDN_API=/api\n\n\nYou can reuse this generated FQDN anywhere.\n\nservices:\n  appwrite:\n    environment:\n      # http://appwrite-vgsco4o.example.com/\n      - SERVICE_FQDN_APPWRITE\n      - _APP_URL=$SERVICE_FQDN_APPWRITE # _APP_URL will have the FQDN because SERVICE_FQDN_APPWRITE is just a simple environment variable\n\n\nYou sometimes need the same domain, but with different ports. This will tell the proxy which port to proxy to which domain. In the example, we combine paths and ports.\n\nservices:\n  appwrite:\n    environment:\n      # http://appwrite-vgsco4o.example.com/ will be proxied to port 3000\n      - SERVICE_FQDN_APPWRITE_3000\n      # http://api-vgsco4o.example.com/api will be proxied to port 2000\n      - SERVICE_FQDN_API_2000=/api\n\n\nThis could be used as a value as well. No default value allowed.\n\nservices:\n  appwrite:\n    environment:\n      # http://api-vgsco4o.example.com/api defined here\n      - SERVICE_FQDN_API_2000=/api\n      # http://appwrite-vgsco4o.example.com/ will be proxied to port 3000\n      - APPWRITE_URL=$SERVICE_FQDN_APPWRITE_3000\n      # http://api-vgsco4o.example.com/api will be proxied to port 2000\n      - APPWRITE_API_URL=$SERVICE_FQDN_API_2000\n\n​\nURL\n\nThis will generate an URL based on the FQDN you have defined.\n\nservices:\n  appwrite:\n    environment:\n      # appwrite-vgsco4o.example.com\n      - SERVICE_URL_APPWRITE\n\n​\nUsername\n\nExample: $SERVICE_USER_APPWRITE\n\nGenerator: Str::random(16)\n\nservices:\n  appwrite:\n    environment:\n      # qwhraJlpdkyKYSQ1\n      - APPWRITE_USERNAME=$SERVICE_USER_APPWRITE\n\n​\nPassword\n\nExample: $SERVICE_PASSWORD_APPWRITE\n\nGenerator: Str::password(symbols: false)\n\nservices:\n  appwrite:\n    environment:\n      # m5XOD0uY4k1hXgISYoJyLdPHG7oAbNYw\n      - APPWRITE_PASSWORD=$SERVICE_PASSWORD_APPWRITE\n\n\nYou can also generate 64 bit long password.\n\nExample: $SERVICE_PASSWORD_64_APPWRITE\n\nGenerator: Str::password(length: 64, symbols: false)\n\nservices:\n  appwrite:\n    environment:\n      # J0QT0Cqr2ArmIT4RgTwK5F5lcXShgnJ53XTiHjqBbPntWVVG8DRHKnrsIjXBZJ8e\n      - APPWRITE_PASSWORD=$SERVICE_PASSWORD_64_APPWRITE\n\n​\nStorage\n\nYou can predefine storage normally in your compose file, but there are a few extra options that you can set to tell Coolify what to do with the storage.\n\n​\nCreate an empty directory\n# Predefine directories with host binding\nservices:\n  filebrowser:\n    image: filebrowser/filebrowser:latest\n    volumes:\n      - type: bind\n        source: ./srv\n        target: /srv\n        is_directory: true # This will tell Coolify to create the directory (this is not avaiable in a normal docker-compose)\n\n​\nCreate a file with content\n\nHere you can see how to add a file with content and an dynamic value that is coming from an environment variable.\n\nservices:\n  filebrowser:\n    image: filebrowser/filebrowser:latest\n    environment:\n      - POSTGRES_PASSWORD=password\n    volumes:\n      - type: bind\n        source: ./srv/99-roles.sql\n        target: /docker-entrypoint-initdb.d/init-scripts/99-roles.sql\n        content: |\n          -- NOTE: change to your own passwords for production environments\n           \\set pgpass `echo \"$POSTGRES_PASSWORD\"`\n\n           ALTER USER authenticator WITH PASSWORD :'pgpass';\n           ALTER USER pgbouncer WITH PASSWORD :'pgpass';\n\n​\nMetadata\n\nYou need to add extra metadata to the top of the docker-compose file, like:\n\ndocumentation link\na slogan\nadditional tags (for better searching)\nicon (local icon, could be svg, png, etc)\nport (always use the port which is the main entrypoint - like frontend - of the service)\n\nAlways add a port, because Caddy Proxy cannot determine the port of the service automatically.\n\nExample:\n\n# documentation: https://docs.n8n.io/hosting/\n# slogan: n8n is an extendable workflow automation tool which enables you to connect anything to everything via its open, fair-code model.\n# tags: n8n,workflow,automation,open,source,low,code\n# icon: svgs/n8n.svg\n# port: 5678\n\n... rest of the compose file ...\n\n\n​\nAdd a new service\n\nOfficial templates stored here. They are just normal docker-compose files with a bit of magic.\n\nTo add a new service, your can easily test your templates with Docker Compose deployments inside Coolify. It uses the same process to parse, generate and deploy as the one-click services.\n\nIf you are done with tests and everything works, open a PR, that have the new <service>.yaml compose file under /templates/compose.\n\nCoolify will use a parsed version.\n\n​\nRequest a new service\n\nIf there is a service template you’d like to see:\n\nSearch GitHub discussions here.\nIf it has already been requested, upvote it. If not, create a new request.\nCommands\nLoad Balancing on Hetzner\ntwitter\ngithub\nPowered by Mintlify\nThe bit of Magic\nFQDN\nURL\nUsername\nPassword\nStorage\nCreate an empty directory\nCreate a file with content\nMetadata\nAdd a new service\nRequest a new service"
  },
  {
    "title": "What commands are available to manage my Coolify server",
    "url": "https://coolify.io/docs/knowledge-base/commands",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nGeneral\nCommands\n\nA list of commands that you can use to manage your Coolify server.\n\nRoot password reset without SMTP.\n\nRoot email change.\n\nDelete a stuck service.\n\nDrain Logs\nAdd a service\ntwitter\ngithub\nPowered by Mintlify"
  },
  {
    "title": "How to configure drain logs to third-party applications like Axiom or New Relic with Coolify",
    "url": "https://coolify.io/docs/knowledge-base/drain-logs",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nGeneral\nDrain Logs\n\nA guide how to drain logs to third-party applications like Axiom or New Relic.\n\nYou can drain logs of your deployed services to a third-party applications like Axiom or New Relic.\n\nWe will support more services in the future, like Signoz, HyperDX, etc.\n\n​\nHow to enable?\n\nGo to your Server where you want to enable the Drain Logs and click on the Drain Logs tab.\n\n​\nAxiom\n\nYou need to have a Dataset and an API key from Axiom. More information here.\n\n​\nNew Relic\n\nYou need to have an License key from New Relic. More information here.\n\nOnce you enabled at least one of the Drain Logs, you need to Restart your service to apply the changes.\n\nDNS Configuration\nCommands\ntwitter\ngithub\nPowered by Mintlify\nHow to enable?\nAxiom\nNew Relic"
  },
  {
    "title": "How to configure DNS for your domains with Coolify.",
    "url": "https://coolify.io/docs/knowledge-base/dns-configuration",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nGeneral\nDNS Configuration\n\nA guide on how to configure DNS for your domains with Coolify.\n\nIn general you need an A record for all the domains or subdomains you want to use, pointing to the IP address of your server where you would like to deploy your application.\n\nNote that you can use the same IP address for multiple domains and subdomains.\n\nIn the examples, 1.1.1.1 is your server’s IP address.\n\n​\nSingle Domain\n\nLet’s say you want deploy your resource to example.com with the IP address 1.1.1.1.\n\nYou need to set an A record for example.com pointing to 1.1.1.1.\n\nYou can also add www.example.com as an A record and redirect it inside Coolify with the chosen reverse proxy.\n\nThen you can use https://example.com as a FQDN (Fully Qualified Domain Name) for any of your resources, even for your Coolify instance.\n\n​\nWildcard Domains\n\nLet’s say you want deploy your resource to *.example.com with the IP address 1.1.1.1.\n\nYou need to set an A record for *.example.com pointing to 1.1.1.1.\n\nThis allows you to use any subdomain of example.com as a FQDN (Fully Qualified Domain Name) for any of your resources, even for your Coolify instance.\n\nFor example, you can use https://app.example.com or https://api.example.com as a FQDN.\n\n​\nAutogenerated Domains\n\nIf you set a wildcard domain in your DNS settings, you can also use Coolify to autogenerate domains for your resources. You just need to go to the Server settings and set the Wildcard Domain field to your domain, for example https://example.com.\n\nThen if you create a new resource:\n\nYou will get a random subdomain for your application, for example https://random.example.com.\nAlso for your Preview Deployments, for example https://<PRId>.random.example.com.\n\nThe Preview URL template could be modified in the application’s page / Preview Deployments tab.\n\n​\nInstance Domain\n\nIf you self-host Coolify, you can set your Coolify instance a custom domain in the /settings page.\n\nDatabase Backups\nDrain Logs\ntwitter\ngithub\nPowered by Mintlify\nSingle Domain\nWildcard Domains\nAutogenerated Domains\nInstance Domain"
  },
  {
    "title": "How to configure database backups in Coolify",
    "url": "https://coolify.io/docs/knowledge-base/backups",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nGeneral\nDatabase Backups\n\nA guide how backups work in Coolify.\n\nScheduled database backups could be configured for PostgreSQL and for Coolify itself.\n\nThis schedules are based on cron expressions, so you can configure them to run as often as you want.\n\nYou can also use simple cron expressions like:\n\nconst VALID_CRON_STRINGS = [\n    'every_minute' => '* * * * *',\n    'hourly' => '0 * * * *',\n    'daily' => '0 0 * * *',\n    'weekly' => '0 0 * * 0',\n    'monthly' => '0 0 1 * *',\n    'yearly' => '0 0 1 1 *',\n];\n\n​\nPostgreSQL\n\nCoolify creates a full backup of your PostgreSQL databases. You can specify which database to backup, with a comma separated list.\n\nCoolify own database is also backed up using this method.\n​\nBackup command\npg_dump --format=custom --no-acl --no-owner --username <username> <databaseName>\n\n​\nRestore command\n\nThe backup has custom format, so you can restore it using the following command (or with any equivalent tool):\n\npg_restore --verbose --clean -h localhost -U postgres -d postgres pg-dump-postgres-1697207547.dmp\n\n​\nMySQL\nmysqldump -u root -p <password> <datatabaseName>\n\n​\nMariaDB\nmariadb-dump -u root -p <password> <datatabaseName>\n\n​\nMongoDB\nmongodump --authenticationDatabase=admin --uri=<uri> --gzip --archive=<archive>\n\n\nOr if you exclude some collections:\n\nmongodump --authenticationDatabase=admin --uri=<uri> --gzip --archive=<archive> --excludeCollection=<collectionName> --excludeCollection=<collectionName>\n\n​\nS3 Backups\n\nYou can also define your own S3 compatible storage to store your backups.\n\nPersistent Storage\nDNS Configuration\ntwitter\ngithub\nPowered by Mintlify\nPostgreSQL\nBackup command\nRestore command\nMySQL\nMariaDB\nMongoDB\nS3 Backups"
  },
  {
    "title": "How to use persistent storage in Coolify",
    "url": "https://coolify.io/docs/knowledge-base/persistent-storage",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nGeneral\nPersistent Storage\n\nA guide how to use persistent storage in Coolify.\n\nYou could add persistent storage to your resources, so you can preserve your data between deployments.\n\nThis persistent storage could be different in different types of Destinations.\n\n​\nDocker Engine\n\nIf you are using Docker Engine, persistent storage could be a volume or a bind mount (a file/directory from the host system - your server).\n\n​\nVolume\n\nTo create a volume, you need to define:\n\nName of the volume.\nDestination Path where the volume will be mounted inside the container.\n\nThe base directory inside the container is /app. So if you need to store your files under storage directory, you need to define /app/storage as the destination path.\n\nTo prevent storage overlapping between resources, Coolify automatically adds the resource’s UUID to the volume name.\n\n​\nBind Mount\n\nTo create a bind mount, you need to define:\n\nName of the volume, which will be used as a reference.\nSource Path from the host system. No docker volume created in this case.\nDestination Path where the volume will be mounted inside the container.\n\nThe base directory inside the container is /app. So if you need to store your files under storage directory, you need to define /app/storage as the destination path.\n\nShare file between more than one container? NOT RECOMMENDED.\n\nIf you mount the same file to more than one container, you will need to make sure that the proper file locking mechanism is implemented in your resources.\n\nEnvironment Variables\nDatabase Backups\ntwitter\ngithub\nPowered by Mintlify\nDocker Engine\nVolume\nBind Mount"
  },
  {
    "title": "How to use environment variables with Coolify",
    "url": "https://coolify.io/docs/knowledge-base/environment-variables",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nGeneral\nEnvironment Variables\n\nA guide how to use environment variables in Coolify.\n\nYou can define environment variables for your resources, and they will be available in your application.\n\nPreview Deployments could have different environment variables, so you can test your application as a staging environment for example.\n\n​\nBuild Time Variables\n\nIf you would like to set environment variables for the build process, you can do by setting Build Variable on the UI.\n\n​\nShared Variables\n\nYou could have 3 types of shared variables:\n\nTeam Based\nProject Based\nEnvironment Based (production, staging, etc.)\n\nYou can set shared variables on their respective pages.\n\nThen you can use these variables anywhere. For example: You defined NODE_ENV to production.\n\n​\nTeam Based\n\nYou can set them on the Team page and use it with {{team.NODE_ENV}}.\n\n​\nProject Based\n\nYou can set them on the Projects page, under the gear icon and use it with {{project.NODE_ENV}}.\n\n​\nEnvironment Based\n\nYou can set them on the Environments page (select a Project), under the gear icon and use it with {{environment.NODE_ENV}}.\n\n​\nPredefined Variables\n\nCoolify predefines some variables for you, so you can use them in your application. All you need to do is to add an environment variable like this to your application.\n\n# For example, you can use this variable in your application\nMY_VARIABLE=$SOURCE_COMMIT\n# You will have the commit hash of the source code in your application as an environment variable in MY_VARIABLE\n\n​\nCOOLIFY_FQDN\n\nFully qualified domain name(s) of the application.\n\n​\nCOOLIFY_URL\n\nURL(s) of the application.\n\n​\nCOOLIFY_BRANCH\n\nBranch name of the source code.\n\n​\nSOURCE_COMMIT\n\nCommit hash of the source code.\n\n​\nPORT\n\nIf not set: it is set to the Port Exposes’s first port.\n\n​\nHOST\n\nIf not set: it is set to 0.0.0.0.\n\nMonitoring\nPersistent Storage\ntwitter\ngithub\nPowered by Mintlify\nBuild Time Variables\nShared Variables\nTeam Based\nProject Based\nEnvironment Based\nPredefined Variables\nCOOLIFY_FQDN\nCOOLIFY_URL\nCOOLIFY_BRANCH\nSOURCE_COMMIT\nPORT\nHOST"
  },
  {
    "title": "How the built-in monitoring system works in Coolify",
    "url": "https://coolify.io/docs/knowledge-base/monitoring",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nGeneral\nMonitoring\n\nA guide on how the built-in monitoring system works in Coolify\n\nCoolify has a built-in monitoring system, which can be used to monitor your resources and send notifications to your team if something goes wrong.\n\nCurrently Coolify monitors the following resources:\n\nDisk usage - If your disk usage is above the configured threshold, it does an automatic cleanup.\nIf any of your containers are stopped or restarted.\nBackup status.\n​\nNotifications\n\nYou can set up several types of notifications. Each team could have different notification settings.\n\n​\nEmail\n\nEmail notifications requires you to set up an SMTP server or supported service (Resend).\n\n​\nSystem Wide (transactional)\n\nIf you self-host Coolify, you can set up a system-wide SMTP server in the Settings menu.\n\n​\nTeam Wide\n\nTo setup notifications, go to the Team tab and click on Notifications and then Email.\n\nIf you have a System Wide Email settings, you can enable to use it for the team. Otherwise, you can set up a custom SMTP server/Resend for the team.\n\n​\nTelegram\n\nYou need to create a bot token on Telegram. You can do that by talking to the BotFather.\n\nMore information on how to create a bot token can be found here.\n\nYou can add your new bot to a group chat, so you can share these notifications with your team.\n\n​\nDiscord\n\nYou only need to add a Discord webhook endpoint to receive notifications.\n\nMore information on how to create a webhook can be found here.\n\n​\nEvents\n\nYou can subscribe to the following events:\n\nContainer Status Changed (Stopped, Started, Restarted).\nApplication Deployments (Finished, Failed).\nBackup Status (Finished, Failed).\nDomains\nEnvironment Variables\ntwitter\ngithub\nPowered by Mintlify\nNotifications\nEmail\nSystem Wide (transactional)\nTeam Wide\nTelegram\nDiscord\nEvents"
  },
  {
    "title": "How to add domains to Coolify",
    "url": "https://coolify.io/docs/knowledge-base/domains",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nGeneral\nDomains\n\nA guide on how to add domains to Coolify\n\nYou can easily add your own domains to Coolify or your resources.\n\nAll domain fields are capable to generate your proxy configurations based on the following rules:\n\nYou need to use FQDN (Fully Qualified Domain Name) format: https://coolify.io\nYou can give multiple domains, separated by comma: https://coolify.io,https://www.coolify.io\nYou can also add a port to the domain, so the proxy will know which port you would like to map to the domain: https://coolify.io:8080,http://api.coolify.io:3000\n​\nWildcard Domain\n\nYou can set a wildcard domain (example: http://example.com) to your server, so you can easily assign generated domains to all the resources connected to this server. More details\n\n​\nDNS Validation\n\nSince version beta.191, Coolify will validates DNS records for your domains with 1.1.1.1 Cloudflare DNS server.\n\nIf you want to use different DNS server, go to your Settings page and change the DNS Servers field (comma separated list).\n\nDatabases\nMonitoring\ntwitter\ngithub\nPowered by Mintlify\nWildcard Domain\nDNS Validation"
  },
  {
    "title": "How to configure databases with Coolify",
    "url": "https://coolify.io/docs/knowledge-base/databases",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nGeneral\nDatabases\n\nHere you can find the documentation for databases in Coolify.\n\nYou can configure a database with a simple click. Coolify supports the following databases:\n\nPostgreSQL\nMySQL\nMariaDB\nMongoDB\nRedis\n​\nPorts Mapping vs Public Port\n​\nPorts Mapping\n\nPorts mapping is using the Docker port mapping feature. It is used to map the container port to the host port. For example, if you set the port mapping to 8080:80, the container port 80 will be mapped to the host port 8080.\n\n​\nPublic Port\n\nPublic port is used to expose the container port to the internet, by starting an Nginx TCP proxy.\n\n​\nWhich one should I use?\nPort mappings makes the connection/port permanent (you need to restart your database to change it).\nThe public port makes the connection/port dynamic (you can change it without restarting the database, Coolify will restart the Nginx TCP proxy for you).\n​\nAccess database during builds\n\nIf you are using Nixpacks build pack, you have two ways to access your database during builds:\n\nDatabase & your application are in the same network: You can reach it using the internal URL provided by Coolify.\nDatabase & your application are not in the same network: You need to set enable yout database to be Accessible over the internet and use the public URL provided by Coolify.\nApplications\nDomains\ntwitter\ngithub\nPowered by Mintlify\nPorts Mapping vs Public Port\nPorts Mapping\nPublic Port\nWhich one should I use?\nAccess database during builds"
  },
  {
    "title": "General Application Configurations with Coolify",
    "url": "https://coolify.io/docs/knowledge-base/applications",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nGeneral\nApplications\n\nA general guide to configure your application with Coolify.\n\nApplication could be any type of web application. It could be a static site, a NodeJS application, a PHP application, etc.\n\nFor complex applications, you can use Docker Compose based deployments or the one-click services.\n\n​\nGeneral Configuration\n​\nCommands\n\nYou can overwrite the default commands by setting a custom value on the UI.\n\nBuild\nInstall\nStart\n\nIf you leave it empty, Nixpacks will detect which commands to run. For example, in Nodejs, it will check the lock files and run npm ci or yarn install or pnpm install accordingly.\n\n​\nBase Directory\n\nIt is useful for monorepos. You can set the base directory for all the commands that will be executed by Coolify.\n\n​\nPublic Directory\n\nIf you are building a static site, it is important to set the public directory, so the builder will know which directory to serve.\n\n​\nPort Exposes\n\nPort exposes are required for Docker Engine to know which ports to expose. The first port will be the default port for health checks.\n\nExamples:\n\nIf you have a NodeJS application that listens on port 3000, you can set it like this: 3000. If you have a PHP-FPM application that listens on port 9000, you can set it like this: 9000. If you have a Nginx server that listens on port 80, you can set it like this: 80.\n\n​\nPort Mappings\n\nYou will lose some functionality if you map a port to the host system, like Rolling Updates.\n\nIf you would like to map a port to the host system (server), you can do it here like this: 8080:80.\n\nThis will map the port 8080 on the host system to the port 80 inside the container.\n\nIf you would like to get performance boost and you do not need any domain (websocket server with VERY high traffic), you can map its port to the host, so the request will not go through the proxy.\n\n​\nAdvanced\n​\nStatic Site (Is it a static site?)\n\nThis feature is only available for Nixpacks buildpacks.\n\nIf you need to serve a static site (SPA, HTML, etc), you can set this to true. It will be served by Nginx. Disabled by default.\n\n​\nForce HTTPS\n\nIf you would like to force HTTPS, so no HTTP connections allowed, you can set this to true. Enabled by default.\n\n​\nAuto Deploy\n\nThis feature is only available for GitHub App based repositories.\n\nIf you would like to deploy automatically when a new commit is pushed to the repository, you can set this to true. Enabled by default.\n\n​\nPreview Deployments\n\nPreview deployments are a great way to test your application before merging it into the main branch. Imagine it like a staging environment.\n\nURL Template\n\nYou can setup your preview URL with a custom template. Default is {{pr_id}}.{{domain}}.\n\nThis means that if you open a Pull Request with the ID 123, and you resource domain is example.com the preview URL will be 123.example.com.\n\nIf you have several domains for your resource, the first will be used as the {{ domain }} part.\n\nAutomated Preview Deployments\n\nThis feature is only available for GitHub App based repositories.\n\nIf you would like to deploy a preview version of your application (based on a Pull Requests), you can set this to true. Disabled by default.\n\nIf set to true, all PR’s that are opened against the resource’s configured branch, will be deployed to a unique URL.\n\nManually Triggered Preview Deployments\n\nYou can manually deploy a Pull Request to a unique URL by clicking on the Deploy button on the Pull Request page.\n\n​\nGit Submodules\n\nIf you are using git submodules, you can set this to true. Enabled by default.\n\n​\nGit LFS\n\nIf you are using git lfs, you can set this to true. Enabled by default.\n\n​\nEnvironment Variables\n\nRead here\n\n​\nPersistent Storage\n\nRead here\n\n​\nHealth Checks\n\nBy default, all containers are checked for liveness.\n\nTraefik Proxy won’t work if the container has health check defined, but it is unhealthy. If you do not know how to set up health checks, turn it off.\n\n​\nRollbacks\n\nYou can rollback to a previous version of your resource. At the moment, only local images are supported, so you can only rollback to a locally available docker image.\n\n​\nResource Limits\n\nBy default, the container won’t have any resource limits. You can set the limits here. For more details, read the Docker documentation.\n\n​\nDeployment Types\n\nThere are several types of application deployments available.\n\nPublic Git Repository\nPrivate Git Repository (GitHub App)\nPrivate Git Repository (Deploy Key)\nBased on a Dockerfile\nBased on a Docker Compose\nBased on a Docker Image\n​\nBuild Packs\n\nThese are the supported build packs:\n\nNixpacks\nDockerfile\nDocker Image\nDocker Compose\n​\nNixpacks\n\nCoolify uses Nixpacks as build pack by default. Nixpacks detect what kind of application are you trying to deploy and builds it accordingly.\n\nBut if needed, you can customize it by adding a nixpacks.toml file to your repository or setting the right environment variables.\n\nFor example, if you are using a NodeJS application, you can set the NIXPACKS_NODE_VERSION to control the NodeJS version.\n\nWorth reading their documentation to understand how it works.\n\n​\nDockerfile\n\nDockerfile based build packs are useful if you have a custom dockerfile inside your Git repository.\n\n​\nCustom Dockerfile Location\n\nYou can always set your custom dockerfile location. By default, it is set to /Dockerfile.\n\n​\nDocker Image\n\nYou can deploy any docker images from any Docker compatible repository. For example, you can deploy images from Docker Hub, GitHub Container Registry, etc.\n\n​\nDocker Compose\n\nDocker Compose based deployments are useful for complex applications. You can define multiple services in a single docker-compose.yml file and deploy them together.\n\nLanguages/Frameworks\nServices\nFAQ\nDatabases\ntwitter\ngithub\nPowered by Mintlify\nGeneral Configuration\nCommands\nBase Directory\nPublic Directory\nPort Exposes\nPort Mappings\nAdvanced\nStatic Site (Is it a static site?)\nForce HTTPS\nAuto Deploy\nPreview Deployments\nGit Submodules\nGit LFS\nEnvironment Variables\nPersistent Storage\nHealth Checks\nRollbacks\nResource Limits\nDeployment Types\nBuild Packs\nNixpacks\nDockerfile\nCustom Dockerfile Location\nDocker Image\nDocker Compose"
  },
  {
    "title": "Frequently Asked Questions (FAQ) with Coolify",
    "url": "https://coolify.io/docs/knowledge-base/faq",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nGeneral\nFAQ\n\nHere you can find answers to the most common questions, errors and problems.\n\n​\nServer\n\nPermission denied (publickey).\n\nCustom SSH Port\n\nIncrease Concurrent Builds\n\nCoolify Cloud Public IPs\n\n​\nCloudflare\n\nConfigured but application is not reachable.\n\nToo many redirections.\n\n​\nApplications\n\nHow to map a port the server?\n\n​\nDatabase\n\nCannot connect to database during build phase.\n\nApplications\ntwitter\ngithub\nPowered by Mintlify\nServer\nCloudflare\nApplications\nDatabase"
  },
  {
    "title": "Frequently Asked Questions (FAQ) with Coolify",
    "url": "https://coolify.io/docs/knowledge-base/faq",
    "html": "Coolify Documentation home page\nCoolify Documentation\nSearch or ask...\nCtrl K\nSupport\nCloud\nSwitch theme\nDocumentation\nKnowledge Base\nResources\nAPI\nCommunity\nSponsorship\nGeneral\nFAQ\nApplications\nDatabases\nDomains\nMonitoring\nEnvironment Variables\nPersistent Storage\nDatabase Backups\nDNS Configuration\nDrain Logs\nCommands\nAdd a service\nHow-tos\nLoad Balancing on Hetzner\nAdministration (Self-hosted)\nDelete User\nGit\n\nGithub\n\nGitlab\n\nBitbucket\n\nGitea\n\nServer\nIntroduction\nFirewall\nBuild Server\nMultiple Servers\nOpenSSH\nOracle Cloud\nSupported Proxy\nAutomated Cleanup\nNon-root user\nS3\nIntroduction\nAWS S3\nCloudflare R2\nDocker\nDocker Swarm\nDocker Registry\nDocker Compose\nCustom Commands\nCloudflare\nCloudflare Tunnels\nTraefik\nHealthcheck\nBasic Auth\nEnable Dashboard\nDynamic Configurations\nCustom SSL Certificates\nLoad-balancing\nRedirects\nWildcard SSL Certificates\nGeneral\nFAQ\n\nHere you can find answers to the most common questions, errors and problems.\n\n​\nServer\n\nPermission denied (publickey).\n\nCustom SSH Port\n\nIncrease Concurrent Builds\n\nCoolify Cloud Public IPs\n\n​\nCloudflare\n\nConfigured but application is not reachable.\n\nToo many redirections.\n\n​\nApplications\n\nHow to map a port the server?\n\n​\nDatabase\n\nCannot connect to database during build phase.\n\nApplications\ntwitter\ngithub\nPowered by Mintlify\nServer\nCloudflare\nApplications\nDatabase"
  }
]