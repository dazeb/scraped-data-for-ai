[
  {
    "title": "Pelican",
    "url": "https://pelican.dev/docs/guides/php-upgrade/",
    "html": "Skip to main content\nPelican\nInstall\nBlog\nDonate\nNewsletter\nFAQ\nWelcome to Pelican!\nPanel\nGetting Started\nWebserver Configuration\nConfiguration Options\nUpdating the Panel\nAdvanced\nWings\nGuides\nUsing Mounts\nCreating SSL Certificates\nUpgrading PHP\nDatabase Hosts\nTroubleshooting\nWhat is ...?\nGuidesUpgrading PHP\nUpgrading PHP\n\nThis documentation includes instructions for upgrading your system to the latest version of PHP. Please reference the table below to check what PHP version you need for your version of Pelican.\n\nPanel Version\tPHP Version\n1.0.0+\t8.2, 8.3\nInstall PHP​\n\nIn order to install PHP 8.3, you will need to run the following commands. Please keep in mind different operating systems may have slightly different requirements for how this commands are formatted.\n\n# Add additional repository for PHP\nsudo add-apt-repository -y ppa:ondrej/php\nsudo apt -y update\n\n# Optional: Remove old PHP versions\nsudo apt -y purge php*\n\n# Install PHP 8.3\nsudo apt -y install php8.3 php8.3-{gd,mysql,mbstring,bcmath,xml,curl,zip,intl,sqlite3,fpm}\n\nWebserver Configuration​\nNGINX\nApache\nCaddy\n\nAfter upgrading to PHP 8.3, you will most likely need to update your NGINX configuration. Your configuration file is most likely called pelican.conf and located in the /etc/nginx/sites-available/ directory, or if on CentOS, /etc/nginx/conf.d/.\n\nMake sure to update the path in the command below to reflect the actual location of your configuration file.\n\nsed -i -e 's/php[7|8].[0-9]-fpm.sock/php8.3-fpm.sock/' /etc/nginx/sites-available/pelican.conf\n\n\nOnce you have edited the file run the command below to reload NGINX and apply your changes.\n\nsystemctl reload nginx\n\nEdit this page\nPrevious\nCreating SSL Certificates\nNext\nDatabase Hosts\nInstall PHP\nWebserver Configuration\nDocumentation\nPanel\nWings\nSSL Setup\nCommunity\nDiscord\nBlog\nGitHub\nCopyright © 2024 Pelican"
  },
  {
    "title": "Pelican",
    "url": "https://pelican.dev/docs/wings/update/",
    "html": "Skip to main content\nPelican\nInstall\nBlog\nDonate\nNewsletter\nFAQ\nWelcome to Pelican!\nPanel\nGetting Started\nWebserver Configuration\nConfiguration Options\nUpdating the Panel\nAdvanced\nWings\nInstalling Wings\nAdditional Configuration\nUpdating Wings\nGuides\nTroubleshooting\nWhat is ...?\nWingsUpdating Wings\nUpdating Wings\n\nUpdating Wings is a painless process and should take less than a minute to complete.\n\nWings Version Requirements​\nPanel Version\tWings Version\tSupported\n3.x\t3.x\t✅︎\nDownload Update​\n\nFirst, download the updated wings binary into /usr/local/bin. You will need to stop Wings briefly.\n\nTIP\n\nRunning servers will not be affected.\n\nsystemctl stop wings\ncurl -L -o /usr/local/bin/wings \"https://github.com/pelican-dev/wings/releases/latest/download/wings_linux_$([[ \"$(uname -m)\" == \"x86_64\" ]] && echo \"amd64\" || echo \"arm64\")\"\nchmod u+x /usr/local/bin/wings\n\nRestart​\n\nSecondly, Restart the process.\n\nsystemctl restart wings\n\n\nEazy as 1..2.. Oh it's done...\n\nEdit this page\nPrevious\nAdditional Configuration\nNext\nUsing Mounts\nWings Version Requirements\nDownload Update\nRestart\nDocumentation\nPanel\nWings\nSSL Setup\nCommunity\nDiscord\nBlog\nGitHub\nCopyright © 2024 Pelican"
  },
  {
    "title": "Pelican",
    "url": "https://pelican.dev/docs/wings/optional-config/",
    "html": "Skip to main content\nPelican\nInstall\nBlog\nDonate\nNewsletter\nFAQ\nWelcome to Pelican!\nPanel\nGetting Started\nWebserver Configuration\nConfiguration Options\nUpdating the Panel\nAdvanced\nWings\nInstalling Wings\nAdditional Configuration\nUpdating Wings\nGuides\nTroubleshooting\nWhat is ...?\nWingsAdditional Configuration\nAdditional Configuration\nDANGER\n\nThese are advanced configurations for Wings. You risk breaking Wings and making containers unusable if you misconfigure something. Proceed only if you know what each configuration value does.\n\nYou must apply all changes to your Wings config.yml file located at /etc/pelican and restart wings.\nVerify your config file using Yaml Lint should you receive errors related to YAML parsing.\n\nPrivate Registries​\n\nYou can use these settings to authenticate against (private) docker registries when pulling images.\n\nAvailable Keys​\nSetting Key\tDefault Value\tNotes\nname\tnull\tRegistry address\nusername\tnull\tRegistry username\npassword\tnull\tRegistry password\nExample of usage​\ndocker:\n  registries:\n    registry.example.com:\n      username: \"registryusername\"\n      password: \"registrypassword\"\n\nCustom Network Interfaces​\n\nYou can change the network interface that Wings uses for all containers by editing the network name; it is by default set to pelican_nw. For example, to enable Docker host mode change the network name to host.\n\nWARNING\n\nChanging network mode to host grants Pelican direct access to all machine interfaces and Panel users can bind to any IP or Port even if it's not allocated to their container. You will lose all benefits of Docker network isolation. It is not recommended for public installations that are hosting other users' servers.\n\nExample of usage​\ndocker:\n  network:\n    name: host\n    network_mode: host\n\n\nAfter making changes, the following commands will stop the Wings, remove the Pelican network, and start the Wings again. Run at your own risk. systemctl stop wings && docker network rm pelican_nw && systemctl start wings\n\nEnabling Cloudflare proxy​\n\nCloudflare proxying of the Wings isn't beneficial since users will be connecting to the machine directly and bypassing any Cloudflare protection. As such, your Node machine IP will still be exposed.\n\nTo enable Cloudflare proxy, you must change the Wings port to one of the Cloudflare HTTPS ports with caching enabled (more info here), such as 8443, because Cloudflare only supports HTTP on port 8080. Select your Node in the Admin Panel, and on the settings tab, change the port. Make sure that you set \"Not Behind Proxy\" when using Full SSL settings in Cloudflare. Then on Cloudflare dashboard, your FQDN must have an orange cloud enabled beside it.\n\nYou are unable to proxy the SFTP port through Cloudflare unless you have their enterprise plan. Server transfers will most likely not work either due to Cloudflare's request body limits.\n\nContainer PID Limit​\n\nYou can change the total number of processes that can be active in a container at any given moment by changing the container_pid_limit value. The default value is 512. You can set it to 0 to disable the limit completely. However, this is not recommended as the limit prevents malicious overloading of the node. Restart wings and your game server to apply the new limit.\n\nExample of usage​\ndocker:\n  ...\n  container_pid_limit: 512\n  ...\n\nThrottles Limits​\n\nYou can use these settings to adjust or completely disable throttling.\n\nSetting Key\tDefault Value\tNotes\nenabled\ttrue\tWhether or not the throttler is enabled\nlines\t2000\tTotal lines that can be output in a given line_reset_interval period\nmaximum_trigger_count\t5\tAmount of times throttle limit can be triggered before the server will be stopped\nline_reset_interval\t100\tThe amount of time after which the number of lines processed is reset to 0\ndecay_interval\t10000\tTime in milliseconds that must pass without triggering throttle limit before trigger count is decremented\nstop_grace_period\t15\tTime that a server is allowed to be stopping for before it is terminated forcefully if it triggers output throttle\nwrite_limit\t0\tImpose I/O write limit for backups to the disk, 0 = unlimited. Value greater than 0 throttles write speed to the set value in MiB/s\ndownload_limit\t0\tImpose a Network I/O read limit for archives, 0 = unlimited. Value greater than 0 throttles read speed to the set value in MiB/s\nExample of usage​\nthrottles:\n  enabled: true\n  lines: 2000\n  maximum_trigger_count: 5\n  line_reset_interval: 100\n  decay_interval: 10000\n  stop_grace_period: 15\n\nInstaller Limits​\n\nDefines the limits on the installer containers that prevents a server's installation process from unintentionally consuming more resources than expected. This is used in conjunction with the server's defined limits. Whichever value is higher will take precedence in the install containers.\n\nSetting Key\tDefault Value\tNotes\nmemory\t1024\tThe maximum amount of memory install container can use unless server memory limit is higher than this value\ncpu\t100\tThe maximum amount of cpu install container can use unless server cpu limit is higher than this value\nExample of usage​\ninstaller_limits:\n  memory: 1024\n  cpu: 100\n\nOther values​\n\nMore commonly discussed values.\n\nSetting Key\tDefault Value\tNotes\ndebug\tfalse\tForce Wings to run in debug mode\ntmpfs_size\t100\tThe size of the /tmp directory in MB when mounted into a container\nwebsocket_log_count\t150\tThe number of lines to display in the console\ndetect_clean_exit_as_crash\ttrue\tMark server as crashed if it's stopped without user interaction, e.g., not pressing stop button\n(crash detection) timeout\t60\tTimeout between server crashes that will not cause the server to be automatically restarted\ncheck_permissions_on_boot\ttrue\tCheck all file permissions on each boot. Disable this when you have a very large amount of files and the server startup is hanging on checking permissions\nEdit this page\nPrevious\nInstalling Wings\nNext\nUpdating Wings\nPrivate Registries\nAvailable Keys\nExample of usage\nCustom Network Interfaces\nExample of usage\nEnabling Cloudflare proxy\nContainer PID Limit\nExample of usage\nThrottles Limits\nExample of usage\nInstaller Limits\nExample of usage\nOther values\nDocumentation\nPanel\nWings\nSSL Setup\nCommunity\nDiscord\nBlog\nGitHub\nCopyright © 2024 Pelican"
  },
  {
    "title": "Pelican",
    "url": "https://pelican.dev/docs/guides/database-hosts/",
    "html": "Skip to main content\nPelican\nInstall\nBlog\nDonate\nNewsletter\nFAQ\nWelcome to Pelican!\nPanel\nGetting Started\nWebserver Configuration\nConfiguration Options\nUpdating the Panel\nAdvanced\nWings\nGuides\nUsing Mounts\nCreating SSL Certificates\nUpgrading PHP\nDatabase Hosts\nTroubleshooting\nWhat is ...?\nGuidesDatabase Hosts\nDatabase Hosts\n\nDatabase hosts allow to create per-server databases on the given host.\n\nDatabase Configuration​\nCreate Database Host user​\n\nYou will need a database user with the correct permissions before continuing any further.\n\nRun the following commands to quickly create a user for your new database host:\n\nmysql -u root -p\n\n# Remember to change 'yourPassword' below to be a unique password\n# Replace 127.0.0.1 with your panel ip if your panel and wings are on different machines\nCREATE USER 'pelicanuser'@'127.0.0.1' IDENTIFIED BY 'yourPassword';\nGRANT ALL PRIVILEGES ON *.* TO 'pelicanuser'@'127.0.0.1' WITH GRANT OPTION;\nexit\n\nAllow external database access​\n\nChances are you'll need to allow external access to this MySQL instance in order to allow servers to connect to it.\n\nTo do this, open my.cnf, which varies in location depending on your OS and how MySQL was installed. You can type find /etc -iname my.cnf to locate it.\n\nOpen my.cnf, add text below to the bottom of the file and save it:\n\n[mysqld]\nbind-address=0.0.0.0\n\n\nRestart MySQL/ MariaDB to apply these changes. This will override the default MySQL configuration, which by default will only accept requests from localhost. Updating this will allow connections on all interfaces, and thus, external connections. Make sure to allow the MySQL port (default 3306) in your firewall.\n\nPanel Configuration​\n\nIn the admin area of the panel, go to \"Databases\" and click the \"New Database Host\" button.\n\nTIP\n\nUsers will later see the host as their database endpoint. Therefore, you should set it to a public ip or FQDN and not to localhost for example.\n\nHit \"Create\" and if everything was entered correctly you should be redirected to the database host list and see your new database host.\n\nCommon issues​\n\nConnection refused: Make sure that your database server is running and that you allowed external access to your database.\n\nHost '_______' is not allowed to connect to this MariaDB server: You most likely created the database user with a 127.0.0.1 host and are trying to connect from a different host.\n\nAccess denied for user '_______'@'_______': You either entered a wrong password or something is wrong with the database user you entered. Make sure that the database user exists and has the required permissions.\n\nEdit this page\nPrevious\nUpgrading PHP\nNext\nTroubleshooting\nDatabase Configuration\nCreate Database Host user\nAllow external database access\nPanel Configuration\nCommon issues\nDocumentation\nPanel\nWings\nSSL Setup\nCommunity\nDiscord\nBlog\nGitHub\nCopyright © 2024 Pelican"
  },
  {
    "title": "Pelican",
    "url": "https://pelican.dev/docs/guides/mounts/",
    "html": "Skip to main content\nPelican\nInstall\nBlog\nDonate\nNewsletter\nFAQ\nWelcome to Pelican!\nPanel\nGetting Started\nWebserver Configuration\nConfiguration Options\nUpdating the Panel\nAdvanced\nWings\nGuides\nUsing Mounts\nCreating SSL Certificates\nUpgrading PHP\nDatabase Hosts\nTroubleshooting\nWhat is ...?\nGuidesUsing Mounts\nUsing Mounts\n\nMounts is a feature that allows administrators to mount other directories from the host file-system into a Server's container.\n\nWings Configuration​\n\nFor security reasons it is not possible to mount directories on a node by default.\n\nDirectories that should be mountable have to be specified explicitly in the Wings configuration.\n\nIn the Wings configuration file (/etc/pelican/config.yml) the allowed_mounts field is used to list mountable directories. The listed directories and all their subdirectories can be mounted.\n\n/etc/pelican/config.yml\nallowed_mounts:\n- /example\n\n\nYou have to restart Wings to apply new changes to your Wings config.\n\nPanel Configuration​\n\nYou have to configure mounts in admin Panel in order to use them with your servers. They consist of a source pad on the node and a target path where it will be mounted in the container.\n\nWARNING\n\nMounts cannot be mounted to or inside of /home/container or any subdirectory of it, nor can you cross-mount servers such as Server A's directory into Server B.\n\nCreating a Mount​\nIn the admin Panel go to Mounts.\nCreate a new mount.\nFill in the details as required.\nName: Name for your mount.\nDescription: Description for your mount.\nSource: The absolute path to the folder or files on the Node machine.\nTarget: The absolute path where the mount will be placed inside of your server, can not include /home/container in the path.\nRead Only: Whether the mount will be read-only for the servers using it.\nUser Mountable: Whether to allow users to self mount this mount.\nAfter creating the mount, you are required to add both Eggs and Nodes that this mount may be used on.\nWARNING\n\nAll servers using the same mounts will only share their contents when they are on the same node. Mounts are not synchronized between nodes.\n\nAssigning a Mount to a Server​\nIn the admin Panel navigate to the server you would like to use a mount with\nGo to the mounts page\nClick the + button\nRestart the server\n\nThe files of the mount should become available in the target path in the container. You can temporarily change your server startup command to ls <mount target>, which should output the contents of the mount if configured correctly.\n\nTIP\n\nMounts do not appear in the Panel's file manager, nor are they accessible via SFTP. However, the server itself will be able to see and use the mounts.\n\nExample Mount​\n\nThe example mount below is stored in the path /var/lib/pelican/mounts, which we add to the Wings config.yml\n\n/etc/pelican/config.yml\nallowed_mounts:\n  - /var/lib/pelican/mounts\n\nEdit this page\nPrevious\nUpdating Wings\nNext\nCreating SSL Certificates\nWings Configuration\nPanel Configuration\nCreating a Mount\nAssigning a Mount to a Server\nExample Mount\nDocumentation\nPanel\nWings\nSSL Setup\nCommunity\nDiscord\nBlog\nGitHub\nCopyright © 2024 Pelican"
  },
  {
    "title": "Pelican",
    "url": "https://pelican.dev/docs/guides/ssl/",
    "html": "Skip to main content\nPelican\nInstall\nBlog\nDonate\nNewsletter\nFAQ\nWelcome to Pelican!\nPanel\nGetting Started\nWebserver Configuration\nConfiguration Options\nUpdating the Panel\nAdvanced\nWings\nGuides\nUsing Mounts\nCreating SSL Certificates\nUpgrading PHP\nDatabase Hosts\nTroubleshooting\nWhat is ...?\nGuidesCreating SSL Certificates\nCreating SSL Certificates\n\nThese tutorials briefly cover creating a new SSL certificates for your panel and/or wings.\n\nCertbot\nApache w/CloudFlare API\nCaddy w/CloudFlare API\nINFO\n\nThis way is the most recommended and should work in 98% of setups.\n\nTo begin, we will install certbot, a simple script that automatically renews our certificates and allows much easier creation of them. The command below is for Ubuntu distributions, but you can always check Certbot's official site for installation instructions. We have also included a command below to install certbot's Nginx/Apache plugin so you won't have to stop your webserver.\n\nNGINX\nApache\nCaddy / Other\nsudo apt install -y python3-certbot-nginx\n\nCreating a Certificate​\n\nAfter installing certbot, we need to generate a certificate. There are a couple of ways to do that, but the easiest is to use the web server-specific certbot plugin you just installed.\n\nINFO\n\nFor Wings-only machines that don't need a web server, use the standalone or DNS method of the certbot as you don't need a web server for it.\n\nThen, in the command below, you should replace example.com with the domain you would like to generate a certificate for. When you have multiple domains you would like certificates for, simply add more -d anotherdomain.com flags to the command. You can also look into generating a wildcard certificate but that is not covered in this tutorial.\n\nWhen you are using certbot's Nginx/Apache plugin, you won't need to restart your webserver to have the certificate applied assuming that you've already configured the webservers to use SSL as instructed in the web server configuration step.\n\nHTTP challenge​\n\nHTTP challenge requires you to expose port 80 for the challenge verification.\n\nNGINX\nApache\nStandalone\ncertbot certonly --nginx -d example.com\n\nDNS challenge​\n\nDNS challenge requires you to create a new TXT DNS record to verify domain ownership, instead of having to expose port 80. The instructions are displayed when you run the certbot command below.\n\ncertbot -d example.com --manual --preferred-challenges dns certonly\n\nAuto Renewal​\n\nYou'll also probably wasnt to configure the automatic renewal of certificates to prevent unexpected certificate expirations. You can open crontab with sudo crontab -e and add the line from below to the bottom of it for attempting renewal every day at 23 (11 PM).\n\nDeploy hook would restart the Nginx service to apply a new certificate when it's renewed successfully. Change nginx in the restart command to suit your own needs, such as to apache or wings.\n\nINFO\n\nFor advanced users, we suggest installing and using acme.sh which provides more options, and is much more powerful than certbot.\n\n0 23 * * * certbot renew --quiet --deploy-hook \"systemctl restart nginx\"\n\nTroubleshooting​\n\nIf you get an Insecure Connection or SSL/TLS related error when trying to access your panel or wings, the certificate has likely expired. This can be easily fixed by renewing the SSL certificate, although using the command certbot renew might not do the job if port 80 is in use, as it'll return errors like: Error: Attempting to renew cert (domain) from /etc/letsencrypt/renew/domain.conf produced an unexpected error.\n\nThis will happen especially if you're running Nginx instead of Apache. The solution for this is to use Nginx or Apache plugins with --nginx and --apache. Alternatively, you can stop Nginx, then renew the certificate, finally restart Nginx. Replace nginx with your own web server or with wings should you be renewing the certificate for Wings.\n\nStop Nginx:\n\nsystemctl stop nginx\n\n\nRenew the certificate:\n\ncertbot renew\n\n\nOnce the process has completed, you can restart Nginx:\n\nsystemctl start nginx\n\n\nYou may also need to restart Wings as not every service is able to automatically apply an updated certificate:\n\nsystemctl restart wings\n\nEdit this page\nPrevious\nUsing Mounts\nNext\nUpgrading PHP\nCreating a Certificate\nHTTP challenge\nDNS challenge\nAuto Renewal\nTroubleshooting\nObtaining CloudFlare API Key (Legacy)\nCreating a Certificate\nObtaining CloudFlare API Key (Modern)\nCreating a Certificate\nInstalling Caddy with Cloudflare DNS plugin\nObtaining CloudFlare API Token\nReconfiguring Caddy to use Cloudflare DNS for obtaining certificates\nDocumentation\nPanel\nWings\nSSL Setup\nCommunity\nDiscord\nBlog\nGitHub\nCopyright © 2024 Pelican"
  },
  {
    "title": "Pelican",
    "url": "https://pelican.dev/docs/panel/advanced/redis/",
    "html": "Skip to main content\nPelican\nInstall\nBlog\nDonate\nNewsletter\nFAQ\nWelcome to Pelican!\nPanel\nGetting Started\nWebserver Configuration\nConfiguration Options\nUpdating the Panel\nAdvanced\nRedis\nMySQL\nWings\nGuides\nTroubleshooting\nWhat is ...?\nPanelAdvancedRedis\nRedis\nInstall Redis​\n\nTo install Redis you first need add their repository.\n\ncurl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\necho \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n\n\nNow you can install Redis by simply running the following commands.\n\nsudo apt update -y\nsudo apt install -y redis-server\n\n\nAlso make sure to enable that redis will start on boot. You can do that by running the following command:\n\nsudo systemctl enable --now redis-server\n\nSetup Pelican for Redis​\nUse Redis as driver​\n\nRun the following commands and choose redis for the drivers you want. For all other options you can simply hit Enter to use the current selected values.\n\nWhen asked if you want to overwrite the queue worker file answer with yes.\n\ncd /var/www/pelican\nphp artisan p:environment:setup\n\nEdit this page\nPrevious\nUpdating the Panel\nNext\nMySQL\nInstall Redis\nSetup Pelican for Redis\nUse Redis as driver\nDocumentation\nPanel\nWings\nSSL Setup\nCommunity\nDiscord\nBlog\nGitHub\nCopyright © 2024 Pelican"
  },
  {
    "title": "Pelican",
    "url": "https://pelican.dev/docs/wings/install/",
    "html": "Skip to main content\nPelican\nInstall\nBlog\nDonate\nNewsletter\nFAQ\nWelcome to Pelican!\nPanel\nGetting Started\nWebserver Configuration\nConfiguration Options\nUpdating the Panel\nAdvanced\nWings\nInstalling Wings\nAdditional Configuration\nUpdating Wings\nGuides\nTroubleshooting\nWhat is ...?\nWingsInstalling Wings\nInstalling Wings\nWARNING\n\nThis software will not work on Windows operating systems.\n\nSupported Systems​\n\nThe following is a list of supported operating systems. Please be aware that this is not an exhaustive list, there is a high probability that you can run the software on other Linux distributions without much effort. You are responsible for determining which packages may be necessary on those systems. There is also a very high probability that new releases of the supported OSes below will work just fine, you are not restricted to only the versions listed below.\n\nOperating System\tVersion\tSupported\tNotes\nUbuntu\t20.04\t⚠️︎︎\tUbuntu 20.04 EoL is April 2025, not recommended\n\t22.04\t✅︎\t\n\t24.04\t✅︎\tDocumentation written assuming Ubuntu 24.04 as the base OS.\nRocky Linux\t9\t✅︎\t\nDebian\t11\t✅︎\t\n\t12\t✅︎\t\nSystem Requirements​\nWARNING\n\nPlease be aware that some hosts install a modified kernel that does not support some docker features required for Wings to operate correctly. Please check your kernel by running uname -r. If your kernel ends in -xxxx-grs-ipv6-64 or -xxxx-mod-std-ipv6-64 you're probably using a non-supported kernel. You should contact your host, and request a non-modified kernel.\n\nTo run Wings, you will need a Linux system capable of running Docker containers. Most VPS and almost all dedicated servers should be capable of running Docker, but there are edge cases.\n\nWhen your provider uses Virtuozzo, OpenVZ (or OVZ), or LXC virtualization, you will most likely be unable to run Wings. Some providers have made the necessary changes for nested virtualization to support Docker. Ask your provider's support team to make sure. KVM is guaranteed to work.\n\nThe easiest way to check is to type systemd-detect-virt. If the result doesn't contain OpenVZ orLXC, it should be fine. The result of none will appear when running dedicated hardware without any virtualization.\n\nShould that not work for some reason, or you're still unsure, you can also run the command below.\n\nsudo dmidecode -s system-manufacturer\n\nInstalling Docker​\n\nFor a quick install of Docker CE, you can use the command below:\n\ncurl -sSL https://get.docker.com/ | CHANNEL=stable sh\n\nINSTALLING DOCKER CE\n\nIf the above command does not work, please reference the official Docker documentation for how to install Docker CE on your server.\n\nDocker CE Install Overview\nStart Docker on Boot​\n\nIf you are on an operating system with systemd (Ubuntu 16+, Debian 8+, CentOS 7+) run the command below to have Docker start when you boot your machine.\n\nsudo systemctl enable --now docker\n\nEnabling Swap​\n\nOn most systems, Docker will be unable to setup swap space by default. You can confirm this by running docker info and looking for the output of WARNING: No swap limit support near the bottom.\n\nEnabling swap is entirely optional, but we recommended doing it if you will be hosting for others and to prevent OOM errors.\n\nTo enable swap, open /etc/default/grub as a root user and find the line starting with GRUB_CMDLINE_LINUX_DEFAULT. Make sure the line includes swapaccount=1 somewhere inside the double-quotes.\n\nAfter that, run sudo update-grub followed by sudo reboot to restart the server and have swap enabled. Below is an example of what the line should look like, do not copy this line verbatim. It often has additional OS-specific parameters.\n\nGRUB_CMDLINE_LINUX_DEFAULT=\"swapaccount=1\"\n\nGRUB CONFIGURATIONS\n\nSome Linux distros may ignore GRUB_CMDLINE_LINUX_DEFAULT.\nTherefore you might have to use GRUB_CMDLINE_LINUX instead should the above variable not work for you.\n\nInstalling Wings​\n\nThe first step for installing Wings is to ensure we have the required directory structure setup. To do so, run the commands below, which will create the base directory and download the wings executable.\n\nsudo mkdir -p /etc/pelican /var/run/wings\ncurl -L -o /usr/local/bin/wings \"https://github.com/pelican-dev/wings/releases/latest/download/wings_linux_$([[ \"$(uname -m)\" == \"x86_64\" ]] && echo \"amd64\" || echo \"arm64\")\"\nsudo chmod u+x /usr/local/bin/wings\n\nOVH/SYS DEDICATED SERVERS\n\nIf you are using a server provided by OVH or SoYouStart please be aware that your main drive space is probably allocated to /home, and not / by default. Please consider using /home/daemon-data for server data. This can be set when creating the node.\n\nConfigure​\n\nOnce you have installed Wings and the required components, the next step is to create a node on your installed Panel. Go to your Panel administrative view, select Nodes from the sidebar, and on the right side click Create New button.\n\nAfter you have created a node, click on it and there will be a tab called Configuration. Copy the code block content, paste it into a new file called config.yml in /etc/pelican and save it.\n\nAlternatively, you can click on the Generate Token button, copy the sh command and paste it into your terminal.\n\nUSING SSL?\n\nIf your Panel is using SSL, then Wings must also use SSL.\n\nSee Creating SSL Certificates documentation page for how to create these certificates before continuing.\n\nStarting Wings​\n\nTo start Wings, simply run the command below, which will start it in a debug mode. Once you confirmed that it is running without errors, use CTRL+C to terminate the process and daemonize it by following the instructions below. Depending on your server's internet connection pulling and starting Wings for the first time may take a few minutes.\n\nsudo wings --debug\n\n\nYou may optionally add the --debug flag to run Wings in debug mode.\n\nDaemonizing (using systemd)​\n\nRunning Wings in the background is a simple task, just make sure that it runs without errors before doing this. Place the contents below in a file called wings.service in the /etc/systemd/system directory.\n\n/etc/systemd/system/wings.service\n[Unit]\nDescription=Wings Daemon\nAfter=docker.service\nRequires=docker.service\nPartOf=docker.service\n\n[Service]\nUser=root\n\nWorkingDirectory=/etc/pelican\n\nLimitNOFILE=4096\nPIDFile=/var/run/wings/daemon.pid\nExecStart=/usr/local/bin/wings\nRestart=on-failure\nStartLimitInterval=180\nStartLimitBurst=30\nRestartSec=5s\n\n[Install]\nWantedBy=multi-user.target\n\n\nThen, run the commands below to reload systemd and start Wings.\n\nsystemctl enable --now wings\n\nEdit this page\nPrevious\nMySQL\nNext\nAdditional Configuration\nSupported Systems\nSystem Requirements\nInstalling Docker\nEnabling Swap\nInstalling Wings\nConfigure\nStarting Wings\nDaemonizing (using systemd)\nDocumentation\nPanel\nWings\nSSL Setup\nCommunity\nDiscord\nBlog\nGitHub\nCopyright © 2024 Pelican"
  },
  {
    "title": "Pelican",
    "url": "https://pelican.dev/docs/panel/advanced/mysql/",
    "html": "Skip to main content\nPelican\nInstall\nBlog\nDonate\nNewsletter\nFAQ\nWelcome to Pelican!\nPanel\nGetting Started\nWebserver Configuration\nConfiguration Options\nUpdating the Panel\nAdvanced\nRedis\nMySQL\nWings\nGuides\nTroubleshooting\nWhat is ...?\nPanelAdvancedMySQL\nMySQL\nInstall MariaDB​\n\nMariaDB is a MySQL fork and the preferred MySQL software. Run the following commands to quickly install it.\n\ncurl -sS https://downloads.mariadb.com/MariaDB/mariadb_repo_setup | sudo bash\nsudo apt install -y mariadb-server \n\nCreate User & Database​\nLogging In​\n\nAfter installing you want to login to the MySQL command line where we will be executing statements to get things setup. To do so, simply run the command below and provide the Root MySQL account's password that you setup when installing MySQL. If you do not remember doing this, chances are you can just hit enter as no password is set.\n\nmysql -u root -p\n\nCreating User​\n\nNext, we will create a user called pelican and allow logins from localhost which prevents any external connections to our database. You can also use % as a wildcard or enter a numeric IP. We will also set the account password to somePassword.\n\nCREATE USER 'pelican'@'127.0.0.1' IDENTIFIED BY 'somePassword';\n\nCreating Database​\n\nNext, we need to create a database for the panel. In this tutorial we will be naming the database panel, but you can substitute that for whatever name you wish.\n\nCREATE DATABASE panel;\n\nAssigning Permissions​\n\nFinally, we need to tell MySQL that our pelican user should have access to the panel database. To do this, simply run the command below.\n\nGRANT ALL PRIVILEGES ON panel.* TO 'pelican'@'127.0.0.1';\n\nSetup Pelican for MySQL​\n\nAfter you created the user and database you can run the database setup command to use MySQL for Pelican.\n\ncd /var/www/pelican\nphp artisan p:environment:database\n\nEdit this page\nPrevious\nRedis\nNext\nInstalling Wings\nInstall MariaDB\nCreate User & Database\nLogging In\nCreating User\nCreating Database\nAssigning Permissions\nSetup Pelican for MySQL\nDocumentation\nPanel\nWings\nSSL Setup\nCommunity\nDiscord\nBlog\nGitHub\nCopyright © 2024 Pelican"
  },
  {
    "title": "Pelican",
    "url": "https://pelican.dev/docs/glossary/",
    "html": "Skip to main content\nPelican\nInstall\nBlog\nDonate\nNewsletter\nFAQ\nWelcome to Pelican!\nPanel\nGetting Started\nWebserver Configuration\nConfiguration Options\nUpdating the Panel\nAdvanced\nWings\nGuides\nTroubleshooting\nWhat is ...?\nWhat is ...?\nWhat is ...?\nThings & Words​\n\nPanel — web application that interfaces with Wings and lets you control your Servers.\n\nWings — application that gives you secure control of your Servers via your Panel.\n\nNode — machine (computer or server) that runs Wings to connect to the Panel.\n\nServer — instance of a Container that is maintained by Wings.\n\nDocker — platform that lets you run Servers in isolated containers.\n\nDocker Image — file that contains libraries, dependencies, files, etc needed to run a Container.\n\nContainer — virtualized environment that your Servers run in.\n\nEgg — file that configures how to run a Docker Image.\n\nYolks — curated collection of (core) Docker Images that can be used with Pelican's Eggs.\n\nBasic Example Setup Diagram​\nEdit this page\nPrevious\nTroubleshooting\nThings & Words\nBasic Example Setup Diagram\nDocumentation\nPanel\nWings\nSSL Setup\nCommunity\nDiscord\nBlog\nGitHub\nCopyright © 2024 Pelican"
  },
  {
    "title": "Pelican",
    "url": "https://pelican.dev/docs/troubleshooting/",
    "html": "Skip to main content\nPelican\nInstall\nBlog\nDonate\nNewsletter\nFAQ\nWelcome to Pelican!\nPanel\nGetting Started\nWebserver Configuration\nConfiguration Options\nUpdating the Panel\nAdvanced\nWings\nGuides\nTroubleshooting\nWhat is ...?\nTroubleshooting\nTroubleshooting\nPanel errors​\ntail -n 100 /var/www/pelican/storage/logs/laravel-$(date +%F).log | grep \"\\[$(date +%Y)\"\n\n\nIf the command above doesn't return anything you most likely have wrong permissions for your storage folder. So you first need to fix that.\nYou can set the correct permissions by running chmod -R 755 /var/www/pelican/storage/* /var/www/pelican/bootstrap/cache/. Also make sure that your panel files are owned by the correct user.\n\nNGINX/Apache\nRocky Linux NGINX\nRocky Linux Apache\nchown -R www-data:www-data /var/www/pelican \n\nSome common errors​\n500 | SERVER ERROR or An unexpected error was encountered while processing this request you have to check your panel logs by running the following command.\n502 Bad Gateway Error or some code in plain text you either didn't install php-fpm or set the wrong version in your webserver vhost.\nsh: 1: mysql: not found: If you are using MariaDB 11.4 or higher you'll have to restore the mysql alias by running ln -s /usr/bin/mariadb /usr/bin/mysql.\nCSRF token mismatch you are most likely using HTTP instead of HTTPS in APP_URL or you didn't force SESSION_SECURE_COOKIE to false while using HTTP.\nThe MAC is invalid make sure that your APP_KEY matchs your database, if its a clean install just clear it then re run php artisan p:environment:setup\nErrorException: file_put_contents(_____): failed to open stream: Permission denied: Wrong file permissions/ ownership for the panel files, see above.\nConnection timed out after 5001 miliseconds for _______:8080: Your panel can't reach wings, see the wings connection issues steps below.\nConnection refused [tcp://_______:6379]: Redis isn't running or isn't reachable for some other reason. (start by checking the status of the redis service: systemctl status redis-server)\nSSL: no alternative certificate subject name matches target host name '_______': The used SSL certificate for your panel isn't valid for your panel domain, see this guide for creating a new SSL certificate.\nGeneral error: 8 attempt to write a readonly database: Your database.sqlite has wrong file permissions and is readonly. Make sure the file is writeable and owned by the correct user.\nClass '_____' not found: This usually means you are missing php extensions. Make sure all needed extensions are installed and that you are using the correct php version.\nWings connection issues​\nCheck the wings service​\n\nFirst you should make sure that the wings service is running. To do that run systemctl status wings.\nIt should say that the service is active and running. If its in a failed state run sudo wings diagnostics to check the wings logs for errors.\n\nSome common errors in the wings logs are:\n\nopen /etc/letsencrypt/live/_____________/fullchain.pem: no such file or directory: The SSL certificate for wings is missing, see this guide for creating a SSL certificate.\nPool overlaps with other one on this address space: You already have a docker network using the default subnet. (172.18.0.0/16) Change the subnet in your wings config file and use systemctl stop wings && docker network rm pelican_nw && systemctl start wings to apply the change.\nError response from Panel: AccessDeniedHttpException: You are not authorized to access this resource. (HTTP/403): Your wings token is wrong, you need update the token in your config.yml file\nError response from Panel: _MissingResponseCode: No error response returned from API endpoint: Your panel is not responding correctly. This usually happens when Cloudflare is blocking the connection. In that case make sure your wings ip is added to the Cloudflare firewall. If you aren't using Cloudflare it might be some other CDN/ DDoS protection service or your provider.\nremote: could not unmarshal response: invalid character '<' looking for beginning of value: This is basically the same error as above: Cloudflare is blocking the connection.\nCheck the wings port​\n\nIf you confirmed that wings is running without errors you should make sure that the wings port (8080 by default) isn't blocked by any firewall. The best way to check this is to use online port checkers like dnschecker.org\nIt should say \"open\" if you check for your node FQDN (e.g. node.example.com or 123.123.123.123) and your wings port (e.g. 8080). If it says \"timed-out\" you have some firewall blocking the port. This could be an internal firewall (like iptables) or an external firewall (e.g. from your provider).\n\nCheck for NAT loop back​\n\nIf your panel and wings are on the same machine or same network, and you are using domains you should check for NAT loop back issues. Edit the /etc/hosts file on your panel/ wings machine and add an entry for your ip and domain.\n\nExample:\n\n/etc/hosts\n123.123.123.123 panel.example.com node.example.com\n\nCheck the wings connection​\n\nIf you confirmed the above points you have to do some advanced troubleshooting.\n\nCheck if your panel and your browser can connect to wings.\n\nPanel <-> Wings connection​\n\nRun curl <protocol><node fqdn>:<node port> (e.g. curl https://node.example.com:8080 or curl http://123.123.123.123:8080) on your panel machine and see what it outputs.\n\nBrowser <-> Wings connection​\n\nOpen <protocol><node fqdn>:<node port> (e.g. https://node.example.com:8080 or http://123.123.123.123:8080) in your browser and see what it outputs.\n\nIn both cases it should output this when wings is reachable:\n\n{\"error\" : \"The required authorization heads were not present in the request.\"}\n\nINFO\n\nNot sure what a specific error means? Visit our Discord and we will be happy to help you!\n\nEdit this page\nPrevious\nDatabase Hosts\nNext\nWhat is ...?\nPanel errors\nSome common errors\nWings connection issues\nCheck the wings service\nCheck the wings port\nCheck for NAT loop back\nCheck the wings connection\nDocumentation\nPanel\nWings\nSSL Setup\nCommunity\nDiscord\nBlog\nGitHub\nCopyright © 2024 Pelican"
  },
  {
    "title": "Pelican",
    "url": "https://pelican.dev/docs/panel/update/",
    "html": "Skip to main content\nPelican\nInstall\nBlog\nDonate\nNewsletter\nFAQ\nWelcome to Pelican!\nPanel\nGetting Started\nWebserver Configuration\nConfiguration Options\nUpdating the Panel\nAdvanced\nWings\nGuides\nTroubleshooting\nWhat is ...?\nPanelUpdating the Panel\nUpdating the Panel\n\nThis documentation covers the process for updating the panel portion of Pelican.\n\nVersion Requirements​\n\nEach version of Pelican Panel also has a corresponding minimum version of Wings that is required for it to run.\n\nPlease see the chart below for how these versions line up. In most cases your base Wings version should match that of your Panel.\n\nPanel Version\tWings Version\tSupported\tPHP Version\n3.x\t3.x\t✅︎\t8.2/ 8.3\nEnter Maintenance Mode​\n\nWhenever you are performing an update you should be sure to place your Panel into maintenance mode. This will prevent users from encountering unexpected errors.\n\ncd /var/www/pelican\nphp artisan down\n\nDownload Update​\n\nThe first step in the update process is to download the new panel files from GitHub. The command below will download the release archive for the most recent version of Pelican, save it in the current directory and will automatically unpack the archive into your current folder.\n\ncurl -L https://github.com/pelican-dev/panel/releases/latest/download/panel.tar.gz | tar -xzv\n\n\nOnce the zip is downloaded and extracted we need to set the correct permissions on the cache and storage directories to avoid any webserver related errors.\n\nchmod -R 755 storage/* bootstrap/cache\n\nUpdate Dependencies​\ncomposer install --no-dev --optimize-autoloader\n\nClear Compiled Template Cache​\n\nYou'll also want to clear the compiled template cache to ensure that new and modified templates show up correctly for users.\n\nphp artisan view:clear\nphp artisan config:clear\n\nUpdate Database​\n\nYou'll also need to update your database schema. Running the command below will update the schema and ensure the default eggs we ship are up to date (and add any new ones we might have). Just remember, never edit core eggs we ship! They will be overwritten by this update process.\n\nphp artisan migrate --seed --force\n\nSet Permissions​\n\nThe last step is to set proper ownership of the files. In most cases this is www-data but can vary from system to system — sometimes being nginx, caddy, apache, or even nobody.\n\nNGINX/Apache\nRocky Linux NGINX\nRocky Linux Apache\nchown -R www-data:www-data /var/www/pelican/* \n\nRestart Queue Workers​\n\nAfter every update you should restart the queue worker.\n\nphp artisan queue:restart\n\nExit Maintenance Mode​\n\nNow that everything has been updated you need to exit maintenance mode.\n\nphp artisan up\n\nEdit this page\nPrevious\nConfiguration Options\nNext\nRedis\nVersion Requirements\nEnter Maintenance Mode\nDownload Update\nUpdate Dependencies\nClear Compiled Template Cache\nUpdate Database\nSet Permissions\nRestart Queue Workers\nExit Maintenance Mode\nDocumentation\nPanel\nWings\nSSL Setup\nCommunity\nDiscord\nBlog\nGitHub\nCopyright © 2024 Pelican"
  },
  {
    "title": "Configuration Options | Pelican",
    "url": "https://pelican.dev/docs/panel/config/",
    "html": "Skip to main content\nPelican\nInstall\nBlog\nDonate\nNewsletter\nFAQ\nWelcome to Pelican!\nPanel\nGetting Started\nWebserver Configuration\nConfiguration Options\nUpdating the Panel\nAdvanced\nWings\nGuides\nTroubleshooting\nWhat is ...?\nPanelConfiguration Options\nConfiguration Options\nBackups​\n\nPelican allows users to create backups of their servers. In order to create backups, a backup storage method has to be configured.\n\nWhen changing Pelican's backup storage method, users may still download or delete existing backups from the prior storage driver. In the instance of migrating from S3 to local backups, S3 credentials must remain configured after switching to the local backup storage method.\n\nMake sure to clear the config cache (cd /var/www/pelican && php artisan config:clear) and to restart the queue worker (systemctl restart pelican) after changing the backup driver to apply the changes.\n\nUsing Local Backups​\n\nBy default, Pelican uses local storage via Wings for backups. That said, this method of backup storage can be explicitly set with the following configuration in the .env file:\n\nAPP_BACKUP_DRIVER=daemon\n\n\nPlease note that, when using local storage via Wings, the destination for backups is set in the Wings config file with the following setting key:\n\nsystem:\n\n  backup_directory: /path/to/backup/storage\n\nUsing S3 Backups​\n\nAWS S3 (or compatible storage) can be used to store remote or cloud-based backups. The following configuration options have to be set in the .env file or as environment variables in order to enable it:\n\n# Sets your panel to use s3 for backups\nAPP_BACKUP_DRIVER=s3\n\n# Info to connect to AWS S3\nAWS_DEFAULT_REGION=\nAWS_ACCESS_KEY_ID=\nAWS_SECRET_ACCESS_KEY=\nAWS_BACKUPS_BUCKET=\nAWS_ENDPOINT=\n\n\nFor some configurations, you might have to change your S3 URL from bucket.domain.com to domain.com/bucket. To accomplish this, add AWS_USE_PATH_STYLE_ENDPOINT=true to your .env file.\n\nMultipart Upload​\n\nThe S3 backup is using the S3 multipart upload capabilities. In rare situations, you might want to adjust the size of a single part or the lifespan of the generated pre-signed URLs. The default part size is 5GB, and the default pre-signed URL lifespan is 60 minutes.\n\nYou can configure the maximal part size using the BACKUP_MAX_PART_SIZE environment variable. You must specify the size in bytes. To define the pre-signed URL lifespan, use the BACKUP_PRESIGNED_URL_LIFESPAN variable. The expected unit is minutes.\n\nThe following .env snippet configures 1GB parts and uses 120 minutes as the pre-signed URL lifespan:\n\nBACKUP_MAX_PART_SIZE=1073741824\nBACKUP_PRESIGNED_URL_LIFESPAN=120\n\nStorage Class​\n\nShould you need to specify a storage class, use the AWS_BACKUPS_STORAGE_CLASS environment variable. Default option is STANDARD (S3 Standard).\n\nAWS_BACKUPS_STORAGE_CLASS=\n\nReverse Proxy Setup​\n\nWhen running Pelican behind a reverse proxy, such as Cloudflare's Flexible SSL or NGINX/Apache/Caddy, etc., you will need to make a quick modification to the Panel to ensure things continue to work as expected. By default, when using these reverse proxies, your Panel will not correctly handle requests. You'll most likely be unable to login or see security warnings in your browser console as it attempts to load insecure assets. This is because the internal logic the Panel uses to determine how links should be generated thinks it is running over HTTP and not over HTTPS.\n\nYou will need to edit the .env file in the Panel's root directory to contain TRUSTED_PROXIES=* at minimum. We highly suggest providing a specific IP address (or comma-separated list of IPs) rather than allowing *. For example, if your proxy is running on the same machine as the server, the chances are that something like TRUSTED_PROXIES=127.0.0.1 will work for you.\n\nNGINX Specific Configuration​\n\nTo properly respond to an NGINX reverse proxy, the NGINX location config must contain the following lines:\n\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header Host $host;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\nproxy_set_header X-Forwarded-Proto $scheme;\nproxy_redirect off;\nproxy_buffering off;\nproxy_request_buffering off;\n\nCloudflare Specific Configuration​\n\nIf you're using Cloudflare's Flexible SSL you should set TRUSTED_PROXIES to contain their IP addresses. Below is an example of how to set this.\n\nTRUSTED_PROXIES=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/13,104.24.0.0/14,172.64.0.0/13,131.0.72.0/22\n\nDisabling recaptcha​\n\nIf you cannot access your panel, you can modify the database directly using the following commands.\n\nmysql -u root -p\nUPDATE panel.settings SET value = 'false' WHERE `key` = 'settings::recaptcha:enabled';\n\n2FA​\n\nIf possible you should use the panel to update your 2FA settings. If you can't access your panel for what ever reason you can use the following steps.\n\nDisable 2FA requirement​\nmysql -u root -p\nUPDATE panel.settings SET value = 0 WHERE `key` = 'settings::pelican:auth:2fa_required';\n\nDisable 2FA for a specific user​\n\nRun the following command in your /var/www/pelican directory.\n\nphp artisan p:user:disable2fa\n\nEdit this page\nPrevious\nWebserver Configuration\nNext\nUpdating the Panel\nBackups\nUsing Local Backups\nUsing S3 Backups\nReverse Proxy Setup\nNGINX Specific Configuration\nCloudflare Specific Configuration\n2FA\nDisable 2FA requirement\nDisable 2FA for a specific user\nDocumentation\nPanel\nWings\nSSL Setup\nCommunity\nDiscord\nBlog\nGitHub\nCopyright © 2024 Pelican"
  },
  {
    "title": "Pelican",
    "url": "https://pelican.dev/docs/panel/webserver-config/",
    "html": "Skip to main content\nPelican\nInstall\nBlog\nDonate\nNewsletter\nFAQ\nWelcome to Pelican!\nPanel\nGetting Started\nWebserver Configuration\nConfiguration Options\nUpdating the Panel\nAdvanced\nWings\nGuides\nTroubleshooting\nWhat is ...?\nPanelWebserver Configuration\nWebserver Configuration\nINFO\n\nWhen using the SSL (https) configuration you MUST create SSL certificates, otherwise your webserver will fail to start. See the Creating SSL Certificates documentation page to learn how to create these certificates before continuing.\n\nNginx\nApache\nCaddy\nPHP & FPM\n\nIf you're not using php8.3, you will need to edit the config file to point to the proper php fpm socket.\n\nThe line is highlighted below.\n\nFirst, remove the default NGINX configuration.\n\nrm /etc/nginx/sites-enabled/default\n\n\nNow, you should paste the contents of the file below, replacing <domain> with your domain or IP being used in a file called pelican.conf and place the file in /etc/nginx/sites-available/.\n\nhttps\nhttp\nWARNING\n\nNote: IPs cannot be used with SSL.\n\n/etc/nginx/sites-available/pelican.conf\nserver_tokens off;\n\nserver {\n    listen 80;\n\n    server_name <domain>;\n\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n\n    server_name <domain>;\n\n\n    root /var/www/pelican/public;\n    index index.php;\n\n    access_log /var/log/nginx/pelican.app-access.log;\n    error_log  /var/log/nginx/pelican.app-error.log error;\n\n    # allow larger file uploads and longer script runtimes\n    client_max_body_size 100m;\n    client_body_timeout 120s;\n\n    sendfile off;\n\n\n    ssl_certificate /etc/letsencrypt/live/<domain>/fullchain.pem;\n\n    ssl_certificate_key /etc/letsencrypt/live/<domain>/privkey.pem;\n\n    ssl_session_cache shared:SSL:10m;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers \"ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384\";\n    ssl_prefer_server_ciphers on;\n\n    # See https://hstspreload.org/ before uncommenting the line below.\n    # add_header Strict-Transport-Security \"max-age=15768000; preload;\";\n    add_header X-Content-Type-Options nosniff;\n    add_header X-XSS-Protection \"1; mode=block\";\n    add_header X-Robots-Tag none;\n    add_header Content-Security-Policy \"frame-ancestors 'self'\";\n    add_header X-Frame-Options DENY;\n    add_header Referrer-Policy same-origin;\n\n    location / {\n        try_files $uri $uri/ /index.php?$query_string;\n    }\n\n    location ~ \\.php$ {\n        fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n\n        fastcgi_pass unix:/run/php/php8.3-fpm.sock;\n\n        fastcgi_index index.php;\n        include fastcgi_params;\n        fastcgi_param PHP_VALUE \"upload_max_filesize = 100M \\n post_max_size=100M\";\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        fastcgi_param HTTP_PROXY \"\";\n        fastcgi_intercept_errors off;\n        fastcgi_buffer_size 16k;\n        fastcgi_buffers 4 16k;\n        fastcgi_connect_timeout 300;\n        fastcgi_send_timeout 300;\n        fastcgi_read_timeout 300;\n        include /etc/nginx/fastcgi_params;\n    }\n\n    location ~ /\\.ht {\n        deny all;\n    }\n}\n\nEnabling Configuration​\n\nThe final step is to enable your NGINX configuration and restart it.\n\nsudo ln -s /etc/nginx/sites-available/pelican.conf /etc/nginx/sites-enabled/pelican.conf\n\nYou need to restart nginx to load the new config file.​\nsudo systemctl restart nginx\n\nEdit this page\nPrevious\nGetting Started\nNext\nConfiguration Options\nEnabling Configuration\nEnabling Configuration\nDocumentation\nPanel\nWings\nSSL Setup\nCommunity\nDiscord\nBlog\nGitHub\nCopyright © 2024 Pelican"
  },
  {
    "title": "Pelican",
    "url": "https://pelican.dev/docs/",
    "html": "Skip to main content\nPelican\nInstall\nBlog\nDonate\nNewsletter\nFAQ\nWelcome to Pelican!\nPanel\nGetting Started\nWebserver Configuration\nConfiguration Options\nUpdating the Panel\nAdvanced\nWings\nGuides\nTroubleshooting\nWhat is ...?\nWelcome to Pelican!\nWelcome to Pelican!\nWho is Pelican?​\n\nIn the realm of technology and hosting services, five bold pioneers left from the constraints of Pterodactyl to forge their own path.\n\nUnited by a shared vision and a relentless pursuit of excellence, They came together to form Pelican—a beacon of innovation and reliability. Together, they form the heart and soul of Pelican—a company defined not only by its technological prowess but also by its unwavering dedication to customer satisfaction.\n\nAlex: With a penchant for elegant solutions and a razor-sharp focus on user experience, Alex serves as the visionary leader of Pelican. His expertise in user interface design and intuitive workflows has been pivotal in crafting Pelican's user-centric approach.\n\nLance: A coding prodigy with an insatiable thirst for optimization, Lance brings unparalleled technical prowess to the Pelican team.\nHis mastery of backend architecture and server optimization ensures that Pelican's infrastructure remains robust and lightning-fast.\n\nParker: As the resident systems architect, Parker is the architect of Pelican's scalable infrastructure. His innovative solutions and expertise in cloud computing empower Pelican to seamlessly adapt to the ever-changing demands of the digital landscape.\n\nCharles: His expertise lies in the realm of customer relations and strategic partnerships. With a knack for fostering meaningful connections and a deep understanding of market dynamics, he spearheads Pelican's expansion efforts and cultivates fruitful collaborations.\n\nKubi: His passion for security and data integrity is the bedrock upon which Pelican stands. With a background in cybersecurity and a keen eye for vulnerabilities, he fortifies Pelican's defenses against digital threats, ensuring peace of mind for clients.\n\nWith innovation as their compass and collaboration as their strength, Pelican soars to new heights, shaping the future of server management with each triumphant flight.\n\nWhat is Pelican?​\n\nPelican is an open-source game server management tool built upon Pterodactyl.\nPelican runs all servers in isolated Docker containers to keep them separate.\n\nOpen Source!​\n\nPelican is open-source, and completely open to users to browse the code and hunt for security issues.\n\n🔒 REPORTING SECURITY ISSUES. 🔒\n\nIf you come across anything that raises a red flag for you, please reach out directly to team@pelican.dev\nWe ask that you be responsible when disclosing security concerns and that you do not report them on Github.\n\nEdit this page\nNext\nGetting Started\nWho is Pelican?\nWhat is Pelican?\nOpen Source!\nDocumentation\nPanel\nWings\nSSL Setup\nCommunity\nDiscord\nBlog\nGitHub\nCopyright © 2024 Pelican"
  },
  {
    "title": "Pelican",
    "url": "https://pelican.dev/docs/panel/getting-started/",
    "html": "Skip to main content\nPelican\nInstall\nBlog\nDonate\nNewsletter\nFAQ\nWelcome to Pelican!\nPanel\nGetting Started\nWebserver Configuration\nConfiguration Options\nUpdating the Panel\nAdvanced\nWings\nGuides\nTroubleshooting\nWhat is ...?\nPanelGetting Started\nGetting Started\n\nPelican Panel is designed to run on your webserver.\n\nYou are expected to read through our documentation. We have spent a lot of time curating these docs for the community, so please take some time to read through them before asking for help on the forums!\n\nDANGER\n\nYou should have some basic familiarity with Linux before you proceed!\n\nWARNING\n\nPelican is currently in Beta! Some things might change / break between beta versions!\n\nPicking an Operating System (OS)​\n\nPelican runs on a wide range of operating systems, so pick whichever you are most comfortable using. Note: Other OS's, not listed below, might still work.\n\nWARNING\n\nOpenVZ, unless specifically configured, will not work with Pelican.\n\nOperating System\tVersion\tSupported\tNotes\nUbuntu\t20.04\t⚠️︎\tNo SQLite Support, Ubuntu 20.04 EoL is April 2025, not recommended\n\t22.04\t✅︎\t\n\t24.04\t✅︎\tDocumentation written assuming Ubuntu 24.04 as the base OS.\nRocky Linux\t9\t✅︎\t\nDebian\t11\t⚠️\tNo SQLite Support\n\t12\t✅︎\t\n\nSQLite support depends on libsqlite3-0_3.35+ being on the host system. Ubuntu 20.04 & Debian 11 do not meet this requirement.\n\nDependencies​\nWARNING\n\nThe ondrej/php repository is required to install the latest versions of PHP and its required extensions.\n\nIt can be added with the following command.\n\nsudo add-apt-repository ppa:ondrej/php\n\nPHP 8.3 (recommended) or 8.2 with the following extensions: gd, mysql, mbstring, bcmath, xml, curl, zip, intl, sqlite3 and fpm\nMySQL 8 (mysql-server) or MariaDB 10.3+\nA webserver (Apache, NGINX, Caddy, etc.)\ncurl\ntar\ncomposer v2\nInstalling Composer​\n\nComposer is a dependency manager for PHP, You'll need composer installed before continuing in this guide.\n\ncurl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer\n\nCreate Directories & Downloading Files​\n\nThe first step in this process is to create the folder where the panel will live and then move ourselves into that newly created folder.\n\nmkdir -p /var/www/pelican\ncd /var/www/pelican\n\n\nOnce you have created a new directory to use and moved into it you'll need to download the Panel files. This is as simple as using curl to download the latest release.\n\ncurl -Lo panel.tar.gz https://github.com/pelican-dev/panel/releases/latest/download/panel.tar.gz\n\n\nOnce it is downloaded you'll need to unpack the archive and then set the correct permissions on the storage/ and bootstrap/cache/ directories.\n\ntar -xzvf panel.tar.gz\nchmod -R 755 storage/* bootstrap/cache/\n\nInstallation​\n\nNext we will set up the default environment settings file, dependencies, and then generate a new application encryption key.\n\nsudo composer install --no-dev --optimize-autoloader\n\nEnvironment Configuration​\n\nThe core environment is easily configured using a few different CLI commands built into the app. This step will cover setting up things such as sessions, caching, database credentials, and email sending.\n\nRunning php artisan p:environment:setup will, if it does not exist, auto create the required .env file and generate a APP_KEY.\n\nINFO\n\nMake sure to read the MySQL guide first if you want to use MySQL instead of SQLite!\n\nphp artisan p:environment:setup\nphp artisan p:environment:database\n\nSetting up Mail - Optional​\n\nIf you'd like to set up the panel to send emails for newly created servers to users & password resets. Use this command.\n\nphp artisan p:environment:mail\n\nWARNING\n\nBack up your encryption key (APP_KEY in the .env file). This is used as an encryption key for all data that needs to be stored securely (e.g. api keys). Store it somewhere safe - not just on your server. If you lose it all encrypted data is irrecoverable -- even if you have database backups.\n\nDatabase Initialization​\n\nNow we need to set up database for the Panel that you created before. The command below may take some time to run depending on your machine. Please DO NOT exit the process until it is completed!\n\nphp artisan migrate --seed --force\n\nCreating User​\n\nYou'll then need to create an administrative user so that you can log into the panel. To do so, run the command below.\n\nPasswords must meet the following requirements: 8 characters, mixed case, at least one number.\n\nphp artisan p:user:make\n\nCrontab Configuration​\n\nWe need to create a new cronjob that runs every minute to process specific tasks, such as session cleanup and scheduled tasks. You'll want to open your crontab.\n\nNGINX/Apache\nRocky Linux NGINX\nRocky Linux Apache\nsudo crontab -e -u www-data\n\n\nAnd then paste the line below.\n\n* * * * * php /var/www/pelican/artisan schedule:run >> /dev/null 2>&1\n\nSetting Permissions​\n\nThe last step in the installation process is to set the correct permissions on the Panel files so that the webserver can use them correctly.\n\nNGINX/Apache\nRocky Linux NGINX\nRocky Linux Apache\nchown -R www-data:www-data /var/www/pelican\n\nEdit this page\nPrevious\nWelcome to Pelican!\nNext\nWebserver Configuration\nPicking an Operating System (OS)\nDependencies\nInstalling Composer\nCreate Directories & Downloading Files\nInstallation\nEnvironment Configuration\nSetting up Mail - Optional\nDatabase Initialization\nCreating User\nCrontab Configuration\nSetting Permissions\nDocumentation\nPanel\nWings\nSSL Setup\nCommunity\nDiscord\nBlog\nGitHub\nCopyright © 2024 Pelican"
  }
]