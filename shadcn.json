[
  {
    "title": "Tooltip - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/tooltip",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nTooltip\nTooltip\n\nA popup that displays information related to an element when the element receives keyboard focus or the mouse hovers over it.\n\nDocs\nAPI Reference\nPreview\nCode\nStyle:\nDefault\nEdit in\nCopy\nLoading...\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add tooltip\nCopy\nUsage\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\nCopy\n<TooltipProvider>\n  <Tooltip>\n    <TooltipTrigger>Hover</TooltipTrigger>\n    <TooltipContent>\n      <p>Add to library</p>\n    </TooltipContent>\n  </Tooltip>\n</TooltipProvider>\nCopy\nToggle Group\n\nOn This Page\n\nInstallation\nUsage\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Toggle Group - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/toggle-group",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nToggle Group\nToggle Group\n\nA set of two-state buttons that can be toggled on or off.\n\nDocs\nAPI Reference\nPreview\nCode\nStyle:\nEdit in\nCopy\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add toggle-group\nCopy\nUsage\nimport { ToggleGroup, ToggleGroupItem } from \"@/components/ui/toggle-group\"\nCopy\n<ToggleGroup type=\"single\">\n  <ToggleGroupItem value=\"a\">A</ToggleGroupItem>\n  <ToggleGroupItem value=\"b\">B</ToggleGroupItem>\n  <ToggleGroupItem value=\"c\">C</ToggleGroupItem>\n</ToggleGroup>\nCopy\nExamples\nDefault\nPreview\nCode\nStyle:\nEdit in\nCopy\nOutline\nPreview\nCode\nStyle:\nEdit in\nCopy\nSingle\nPreview\nCode\nStyle:\nEdit in\nCopy\nSmall\nPreview\nCode\nStyle:\nEdit in\nCopy\nLarge\nPreview\nCode\nStyle:\nEdit in\nCopy\nDisabled\nPreview\nCode\nStyle:\nEdit in\nCopy\nToggle\nTooltip\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Toggle - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/toggle",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nToggle\nToggle\n\nA two-state button that can be either on or off.\n\nDocs\nAPI Reference\nPreview\nCode\nStyle:\nDefault\nEdit in\nCopy\nLoading...\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add toggle\nCopy\nUsage\nimport { Toggle } from \"@/components/ui/toggle\"\nCopy\n<Toggle>Toggle</Toggle>\nCopy\nExamples\nDefault\nPreview\nCode\nStyle:\nDefault\nEdit in\nCopy\nLoading...\nOutline\nPreview\nCode\nStyle:\nDefault\nEdit in\nCopy\nLoading...\nWith Text\nPreview\nCode\nStyle:\nDefault\nEdit in\nCopy\nLoading...\nSmall\nPreview\nCode\nStyle:\nDefault\nEdit in\nCopy\nLoading...\nLarge\nPreview\nCode\nStyle:\nDefault\nEdit in\nCopy\nLoading...\nDisabled\nPreview\nCode\nStyle:\nDefault\nEdit in\nCopy\nLoading...\nToast\nToggle Group\n\nOn This Page\n\nInstallation\nUsage\nExamples\nDefault\nOutline\nWith Text\nSmall\nLarge\nDisabled\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Toast - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/toast",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nToast\nToast\n\nA succinct message that is displayed temporarily.\n\nDocs\nAPI Reference\nPreview\nCode\nStyle:\nCopy\nAdd to calendar\nInstallation\nCLI\nManual\nRun the following command:\nnpx shadcn-ui@latest add toast\nCopy\nAdd the Toaster component\napp/layout.tsx\nimport { Toaster } from \"@/components/ui/toaster\"\n \nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <head />\n      <body>\n        <main>{children}</main>\n        <Toaster />\n      </body>\n    </html>\n  )\n}\nCopy\nUsage\n\nThe useToast hook returns a toast function that you can use to display a toast.\n\nimport { useToast } from \"@/components/ui/use-toast\"\nCopy\nexport const ToastDemo = () => {\n  const { toast } = useToast()\n \n  return (\n    <Button\n      onClick={() => {\n        toast({\n          title: \"Scheduled: Catch up\",\n          description: \"Friday, February 10, 2023 at 5:57 PM\",\n        })\n      }}\n    >\n      Show Toast\n    </Button>\n  )\n}\nCopy\n\nTo display multiple toasts at the same time, you can update the TOAST_LIMIT in use-toast.tsx.\n\nExamples\nSimple\nPreview\nCode\nStyle:\nCopy\nShow Toast\nWith title\nPreview\nCode\nStyle:\nCopy\nShow Toast\nWith Action\nPreview\nCode\nStyle:\nCopy\nShow Toast\nDestructive\n\nUse toast({ variant: \"destructive\" }) to display a destructive toast.\n\nPreview\nCode\nStyle:\nCopy\nShow Toast\nTextarea\nToggle\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Textarea - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/textarea",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nTextarea\nTextarea\n\nDisplays a form textarea or a component that looks like a textarea.\n\nPreview\nCode\nStyle:\nEdit in\nCopy\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add textarea\nCopy\nUsage\nimport { Textarea } from \"@/components/ui/textarea\"\nCopy\n<Textarea />\nCopy\nExamples\nDefault\nPreview\nCode\nStyle:\nEdit in\nCopy\nDisabled\nPreview\nCode\nStyle:\nEdit in\nCopy\nWith Label\nPreview\nCode\nStyle:\nEdit in\nCopy\nYour message\nWith Text\nPreview\nCode\nStyle:\nEdit in\nCopy\nYour Message\n\nYour message will be copied to the support team.\n\nWith Button\nPreview\nCode\nStyle:\nEdit in\nCopy\nSend message\nForm\nPreview\nCode\nStyle:\nCopy\nBio\n\nYou can @mention other users and organizations.\n\nSubmit\nTabs\nToast\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Tabs - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/tabs",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nTabs\nTabs\n\nA set of layered sections of content—known as tab panels—that are displayed one at a time.\n\nDocs\nAPI Reference\nPreview\nCode\nStyle:\nEdit in\nCopy\nAccount\nPassword\nAccount\n\nMake changes to your account here. Click save when you're done.\n\nName\nUsername\nSave changes\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add tabs\nCopy\nUsage\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nCopy\n<Tabs defaultValue=\"account\" className=\"w-[400px]\">\n  <TabsList>\n    <TabsTrigger value=\"account\">Account</TabsTrigger>\n    <TabsTrigger value=\"password\">Password</TabsTrigger>\n  </TabsList>\n  <TabsContent value=\"account\">Make changes to your account here.</TabsContent>\n  <TabsContent value=\"password\">Change your password here.</TabsContent>\n</Tabs>\nCopy\nTable\nTextarea\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Table - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/table",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nTable\nTable\n\nA responsive table component.\n\nPreview\nCode\nStyle:\nCopy\nA list of your recent invoices.\nInvoice\tStatus\tMethod\tAmount\nINV001\tPaid\tCredit Card\t$250.00\nINV002\tPending\tPayPal\t$150.00\nINV003\tUnpaid\tBank Transfer\t$350.00\nINV004\tPaid\tCredit Card\t$450.00\nINV005\tPaid\tPayPal\t$550.00\nINV006\tPending\tBank Transfer\t$200.00\nINV007\tUnpaid\tCredit Card\t$300.00\nTotal\t$2,500.00\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add table\nCopy\nUsage\nimport {\n  Table,\n  TableBody,\n  TableCaption,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\"\nCopy\n<Table>\n  <TableCaption>A list of your recent invoices.</TableCaption>\n  <TableHeader>\n    <TableRow>\n      <TableHead className=\"w-[100px]\">Invoice</TableHead>\n      <TableHead>Status</TableHead>\n      <TableHead>Method</TableHead>\n      <TableHead className=\"text-right\">Amount</TableHead>\n    </TableRow>\n  </TableHeader>\n  <TableBody>\n    <TableRow>\n      <TableCell className=\"font-medium\">INV001</TableCell>\n      <TableCell>Paid</TableCell>\n      <TableCell>Credit Card</TableCell>\n      <TableCell className=\"text-right\">$250.00</TableCell>\n    </TableRow>\n  </TableBody>\n</Table>\nCopy\nData Table\n\nYou can use the <Table /> component to build more complex data tables. Combine it with @tanstack/react-table to create tables with sorting, filtering and pagination.\n\nSee the Data Table documentation for more information.\n\nYou can also see an example of a data table in the Tasks demo.\n\nSwitch\nTabs\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Switch - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/switch",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nSwitch\nSwitch\n\nA control that allows the user to toggle between checked and not checked.\n\nDocs\nAPI Reference\nPreview\nCode\nStyle:\nDefault\nEdit in\nCopy\nLoading...\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add switch\nCopy\nUsage\nimport { Switch } from \"@/components/ui/switch\"\nCopy\n<Switch />\nCopy\nExamples\nForm\nPreview\nCode\nStyle:\nDefault\nCopy\nLoading...\nSonner\nTable\n\nOn This Page\n\nInstallation\nUsage\nExamples\nForm\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Sonner - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/sonner",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nSonner\nSonner\n\nAn opinionated toast component for React.\n\nDocs\nPreview\nCode\nStyle:\nCopy\nShow Toast\nAbout\n\nSonner is built and maintained by emilkowalski_.\n\nInstallation\nCLI\nManual\nRun the following command:\nnpx shadcn-ui@latest add sonner\nCopy\nAdd the Toaster component\napp/layout.tsx\nimport { Toaster } from \"@/components/ui/sonner\"\n \nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <head />\n      <body>\n        <main>{children}</main>\n        <Toaster />\n      </body>\n    </html>\n  )\n}\nCopy\nUsage\nimport { toast } from \"sonner\"\nCopy\ntoast(\"Event has been created.\")\nCopy\nSlider\nSwitch\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Slider - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/slider",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nSlider\nSlider\n\nAn input where the user selects a value from within a given range.\n\nDocs\nAPI Reference\nPreview\nCode\nStyle:\nDefault\nEdit in\nCopy\nLoading...\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add slider\nCopy\nUsage\nimport { Slider } from \"@/components/ui/slider\"\nCopy\n<Slider defaultValue={[33]} max={100} step={1} />\nCopy\nSkeleton\nSonner\n\nOn This Page\n\nInstallation\nUsage\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Skeleton - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/skeleton",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nSkeleton\nSkeleton\n\nUse to show a placeholder while content is loading.\n\nPreview\nCode\nStyle:\nDefault\nEdit in\nCopy\nLoading...\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add skeleton\nCopy\nUsage\nimport { Skeleton } from \"@/components/ui/skeleton\"\nCopy\n<Skeleton className=\"w-[100px] h-[20px] rounded-full\" />\nCopy\nExamples\nCard\nPreview\nCode\nStyle:\nDefault\nEdit in\nCopy\nLoading...\nSheet\nSlider\n\nOn This Page\n\nInstallation\nUsage\nExamples\nCard\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Sheet - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/sheet",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nSheet\nSheet\n\nExtends the Dialog component to display content that complements the main content of the screen.\n\nDocs\nAPI Reference\nPreview\nCode\nStyle:\nEdit in\nCopy\nOpen\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add sheet\nCopy\nUsage\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from \"@/components/ui/sheet\"\nCopy\n<Sheet>\n  <SheetTrigger>Open</SheetTrigger>\n  <SheetContent>\n    <SheetHeader>\n      <SheetTitle>Are you absolutely sure?</SheetTitle>\n      <SheetDescription>\n        This action cannot be undone. This will permanently delete your account\n        and remove your data from our servers.\n      </SheetDescription>\n    </SheetHeader>\n  </SheetContent>\n</Sheet>\nCopy\nExamples\nSide\n\nUse the side property to <SheetContent /> to indicate the edge of the screen where the component will appear. The values can be top, right, bottom or left.\n\nPreview\nCode\nStyle:\nCopy\ntop\nright\nbottom\nleft\nSize\n\nYou can adjust the size of the sheet using CSS classes:\n\n<Sheet>\n  <SheetTrigger>Open</SheetTrigger>\n  <SheetContent className=\"w-[400px] sm:w-[540px]\">\n    <SheetHeader>\n      <SheetTitle>Are you absolutely sure?</SheetTitle>\n      <SheetDescription>\n        This action cannot be undone. This will permanently delete your account\n        and remove your data from our servers.\n      </SheetDescription>\n    </SheetHeader>\n  </SheetContent>\n</Sheet>\nCopy\nSeparator\nSkeleton\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Separator - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/separator",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nSeparator\nSeparator\n\nVisually or semantically separates content.\n\nDocs\nAPI Reference\nPreview\nCode\nStyle:\nEdit in\nCopy\nRadix Primitives\n\nAn open-source UI component library.\n\nBlog\nDocs\nSource\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add separator\nCopy\nUsage\nimport { Separator } from \"@/components/ui/separator\"\nCopy\n<Separator />\nCopy\nSelect\nSheet\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Select - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/select",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nSelect\nSelect\n\nDisplays a list of options for the user to pick from—triggered by a button.\n\nDocs\nAPI Reference\nPreview\nCode\nStyle:\nEdit in\nCopy\nSelect a fruit\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add select\nCopy\nUsage\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nCopy\n<Select>\n  <SelectTrigger className=\"w-[180px]\">\n    <SelectValue placeholder=\"Theme\" />\n  </SelectTrigger>\n  <SelectContent>\n    <SelectItem value=\"light\">Light</SelectItem>\n    <SelectItem value=\"dark\">Dark</SelectItem>\n    <SelectItem value=\"system\">System</SelectItem>\n  </SelectContent>\n</Select>\nCopy\nExamples\nScrollable\nPreview\nCode\nStyle:\nEdit in\nCopy\nSelect a timezone\nForm\nPreview\nCode\nStyle:\nCopy\nEmail\nSelect a verified email to display\n\nYou can manage email addresses in your email settings.\n\nSubmit\nScroll Area\nSeparator\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Scroll-area - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/scroll-area",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nScroll-area\nScroll-area\n\nAugments native scroll functionality for custom, cross-browser styling.\n\nDocs\nAPI Reference\nPreview\nCode\nStyle:\nDefault\nCopy\nLoading...\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add scroll-area\nCopy\nUsage\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\nCopy\n<ScrollArea className=\"h-[200px] w-[350px] rounded-md border p-4\">\n  Jokester began sneaking into the castle in the middle of the night and leaving\n  jokes all over the place: under the king's pillow, in his soup, even in the\n  royal toilet. The king was furious, but he couldn't seem to stop Jokester. And\n  then, one day, the people of the kingdom discovered that the jokes left by\n  Jokester were so funny that they couldn't help but laugh. And once they\n  started laughing, they couldn't stop.\n</ScrollArea>\nCopy\nExamples\nHorizontal Scrolling\nPreview\nCode\nStyle:\nDefault\nCopy\nLoading...\nResizable\nSelect\n\nOn This Page\n\nInstallation\nUsage\nExamples\nHorizontal Scrolling\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Resizable - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/resizable",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nResizable\nResizable\n\nAccessible resizable panel groups and layouts with keyboard support.\n\nDocs\nAPI Reference\nPreview\nCode\nStyle:\nEdit in\nCopy\nOne\nTwo\nThree\nAbout\n\nThe Resizable component is built on top of react-resizable-panels by bvaughn.\n\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add resizable\nCopy\nUsage\nimport {\n  ResizableHandle,\n  ResizablePanel,\n  ResizablePanelGroup,\n} from \"@/components/ui/resizable\"\nCopy\n<ResizablePanelGroup direction=\"horizontal\">\n  <ResizablePanel>One</ResizablePanel>\n  <ResizableHandle />\n  <ResizablePanel>Two</ResizablePanel>\n</ResizablePanelGroup>\nCopy\nExamples\nVertical\n\nUse the direction prop to set the direction of the resizable panels.\n\nPreview\nCode\nStyle:\nEdit in\nCopy\nHeader\nContent\nimport {\n  ResizableHandle,\n  ResizablePanel,\n  ResizablePanelGroup,\n} from \"@/components/ui/resizable\"\n \nexport default function Example() {\n  return (\n    <ResizablePanelGroup direction=\"vertical\">\n      <ResizablePanel>One</ResizablePanel>\n      <ResizableHandle />\n      <ResizablePanel>Two</ResizablePanel>\n    </ResizablePanelGroup>\n  )\n}\nCopy\nHandle\n\nYou can set or hide the handle by using the withHandle prop on the ResizableHandle component.\n\nPreview\nCode\nStyle:\nEdit in\nCopy\nSidebar\nContent\nimport {\n  ResizableHandle,\n  ResizablePanel,\n  ResizablePanelGroup,\n} from \"@/components/ui/resizable\"\n \nexport default function Example() {\n  return (\n    <ResizablePanelGroup direction=\"horizontal\">\n      <ResizablePanel>One</ResizablePanel>\n      <ResizableHandle withHandle />\n      <ResizablePanel>Two</ResizablePanel>\n    </ResizablePanelGroup>\n  )\n}\nCopy\nRadio Group\nScroll Area\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Radio Group - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/radio-group",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nRadio Group\nRadio Group\n\nA set of checkable buttons—known as radio buttons—where no more than one of the buttons can be checked at a time.\n\nDocs\nAPI Reference\nPreview\nCode\nStyle:\nDefault\nEdit in\nCopy\nLoading...\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add radio-group\nCopy\nUsage\nimport { Label } from \"@/components/ui/label\"\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\"\nCopy\n<RadioGroup defaultValue=\"option-one\">\n  <div className=\"flex items-center space-x-2\">\n    <RadioGroupItem value=\"option-one\" id=\"option-one\" />\n    <Label htmlFor=\"option-one\">Option One</Label>\n  </div>\n  <div className=\"flex items-center space-x-2\">\n    <RadioGroupItem value=\"option-two\" id=\"option-two\" />\n    <Label htmlFor=\"option-two\">Option Two</Label>\n  </div>\n</RadioGroup>\nCopy\nExamples\nForm\nPreview\nCode\nStyle:\nDefault\nCopy\nLoading...\nProgress\nResizable\n\nOn This Page\n\nInstallation\nUsage\nExamples\nForm\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Progress - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/progress",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nProgress\nProgress\n\nDisplays an indicator showing the completion progress of a task, typically displayed as a progress bar.\n\nDocs\nAPI Reference\nPreview\nCode\nStyle:\nDefault\nCopy\nLoading...\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add progress\nCopy\nUsage\nimport { Progress } from \"@/components/ui/progress\"\nCopy\n<Progress value={33} />\nCopy\nPopover\nRadio Group\n\nOn This Page\n\nInstallation\nUsage\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Popover - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/popover",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nPopover\nPopover\n\nDisplays rich content in a portal, triggered by a button.\n\nDocs\nAPI Reference\nPreview\nCode\nStyle:\nEdit in\nCopy\nOpen popover\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add popover\nCopy\nUsage\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\"\nCopy\n<Popover>\n  <PopoverTrigger>Open</PopoverTrigger>\n  <PopoverContent>Place content for the popover here.</PopoverContent>\n</Popover>\nCopy\nPagination\nProgress\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Pagination - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/pagination",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nPagination\nPagination\n\nPagination with page navigation, next and previous links.\n\nPreview\nCode\nStyle:\nEdit in\nCopy\nPrevious\n1\n2\n3\nMore pages\nNext\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add pagination\nCopy\nUsage\nimport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n} from \"@/components/ui/pagination\"\nCopy\n<Pagination>\n  <PaginationContent>\n    <PaginationItem>\n      <PaginationPrevious href=\"#\" />\n    </PaginationItem>\n    <PaginationItem>\n      <PaginationLink href=\"#\">1</PaginationLink>\n    </PaginationItem>\n    <PaginationItem>\n      <PaginationEllipsis />\n    </PaginationItem>\n    <PaginationItem>\n      <PaginationNext href=\"#\" />\n    </PaginationItem>\n  </PaginationContent>\n</Pagination>\nCopy\nNext.js\n\nBy default the <PaginationLink /> component will render an <a /> tag.\n\nTo use the Next.js <Link /> component, make the following updates to pagination.tsx.\n\n+ import Link from \"next/link\"\n \n- type PaginationLinkProps = ... & React.ComponentProps<\"a\">\n+ type PaginationLinkProps = ... & React.ComponentProps<typeof Link>\n \nconst PaginationLink = ({...props }: ) => (\n  <PaginationItem>\n-   <a>\n+   <Link>\n      // ...\n-   </a>\n+   </Link>\n  </PaginationItem>\n)\n \nCopy\n\nNote: We are making updates to the cli to automatically do this for you.\n\nNavigation Menu\nPopover\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Navigation Menu - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/navigation-menu",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nNavigation Menu\nNavigation Menu\n\nA collection of links for navigating websites.\n\nDocs\nAPI Reference\nPreview\nCode\nStyle:\nCopy\nGetting started\nComponents\nDocumentation\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add navigation-menu\nCopy\nUsage\nimport {\n  NavigationMenu,\n  NavigationMenuContent,\n  NavigationMenuIndicator,\n  NavigationMenuItem,\n  NavigationMenuLink,\n  NavigationMenuList,\n  NavigationMenuTrigger,\n  NavigationMenuViewport,\n} from \"@/components/ui/navigation-menu\"\nCopy\n<NavigationMenu>\n  <NavigationMenuList>\n    <NavigationMenuItem>\n      <NavigationMenuTrigger>Item One</NavigationMenuTrigger>\n      <NavigationMenuContent>\n        <NavigationMenuLink>Link</NavigationMenuLink>\n      </NavigationMenuContent>\n    </NavigationMenuItem>\n  </NavigationMenuList>\n</NavigationMenu>\nCopy\nExamples\nLink Component\n\nWhen using the Next.js <Link /> component, you can use navigationMenuTriggerStyle() to apply the correct styles to the trigger.\n\nimport { navigationMenuTriggerStyle } from \"@/components/ui/navigation-menu\"\nCopy\n<NavigationMenuItem>\n  <Link href=\"/docs\" legacyBehavior passHref>\n    <NavigationMenuLink className={navigationMenuTriggerStyle()}>\n      Documentation\n    </NavigationMenuLink>\n  </Link>\n</NavigationMenuItem>\nCopy\n\nSee also the Radix UI documentation for handling client side routing.\n\nMenubar\nPagination\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Label - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/label",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nLabel\nLabel\n\nRenders an accessible label associated with controls.\n\nDocs\nAPI Reference\nPreview\nCode\nStyle:\nEdit in\nCopy\nAccept terms and conditions\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add label\nCopy\nUsage\nimport { Label } from \"@/components/ui/label\"\nCopy\n<Label htmlFor=\"email\">Your email address</Label>\nCopy\nInput OTP\nMenubar\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Menubar - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/menubar",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nMenubar\nMenubar\n\nA visually persistent menu common in desktop applications that provides quick access to a consistent set of commands.\n\nDocs\nAPI Reference\nPreview\nCode\nStyle:\nCopy\nFile\nEdit\nView\nProfiles\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add menubar\nCopy\nUsage\nimport {\n  Menubar,\n  MenubarContent,\n  MenubarItem,\n  MenubarMenu,\n  MenubarSeparator,\n  MenubarShortcut,\n  MenubarTrigger,\n} from \"@/components/ui/menubar\"\nCopy\n<Menubar>\n  <MenubarMenu>\n    <MenubarTrigger>File</MenubarTrigger>\n    <MenubarContent>\n      <MenubarItem>\n        New Tab <MenubarShortcut>⌘T</MenubarShortcut>\n      </MenubarItem>\n      <MenubarItem>New Window</MenubarItem>\n      <MenubarSeparator />\n      <MenubarItem>Share</MenubarItem>\n      <MenubarSeparator />\n      <MenubarItem>Print</MenubarItem>\n    </MenubarContent>\n  </MenubarMenu>\n</Menubar>\nCopy\nLabel\nNavigation Menu\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Input - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/input",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nInput\nInput\n\nDisplays a form input field or a component that looks like an input field.\n\nPreview\nCode\nStyle:\nDefault\nEdit in\nCopy\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add input\nCopy\nUsage\nimport { Input } from \"@/components/ui/input\"\nCopy\n<Input />\nCopy\nExamples\nDefault\nPreview\nCode\nStyle:\nDefault\nEdit in\nCopy\nFile\nPreview\nCode\nStyle:\nDefault\nEdit in\nCopy\nPicture\nDisabled\nPreview\nCode\nStyle:\nDefault\nEdit in\nCopy\nWith Label\nPreview\nCode\nStyle:\nDefault\nEdit in\nCopy\nEmail\nWith Button\nPreview\nCode\nStyle:\nDefault\nEdit in\nCopy\nSubscribe\nForm\nPreview\nCode\nStyle:\nDefault\nCopy\nLoading...\nHover Card\nInput OTP\n\nOn This Page\n\nInstallation\nUsage\nExamples\nDefault\nFile\nDisabled\nWith Label\nWith Button\nForm\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Input OTP - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/input-otp",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nInput OTP\nInput OTP\n\nAccessible one-time password component with copy paste functionality.\n\nDocs\nPreview\nCode\nStyle:\nEdit in\nCopy\nAbout\n\nInput OTP is built on top of input-otp by @guilherme_rodz.\n\nInstallation\nCLI\nManual\nRun the following command:\nnpx shadcn-ui@latest add input-otp\nCopy\nUpdate tailwind.config.js\n\nAdd the following animations to your tailwind.config.js file:\n\ntailwind.config.js\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  theme: {\n    extend: {\n      keyframes: {\n        \"caret-blink\": {\n          \"0%,70%,100%\": { opacity: \"1\" },\n          \"20%,50%\": { opacity: \"0\" },\n        },\n      },\n      animation: {\n        \"caret-blink\": \"caret-blink 1.25s ease-out infinite\",\n      },\n    },\n  },\n}\nCopy\nUsage\nimport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSeparator,\n  InputOTPSlot,\n} from \"@/components/ui/input-otp\"\nCopy\n<InputOTP maxLength={6}>\n  <InputOTPGroup>\n    <InputOTPSlot index={0} />\n    <InputOTPSlot index={1} />\n    <InputOTPSlot index={2} />\n  </InputOTPGroup>\n  <InputOTPSeparator />\n  <InputOTPGroup>\n    <InputOTPSlot index={3} />\n    <InputOTPSlot index={4} />\n    <InputOTPSlot index={5} />\n  </InputOTPGroup>\n</InputOTP>\nCopy\nExamples\nPattern\n\nUse the pattern prop to define a custom pattern for the OTP input.\n\nPreview\nCode\nStyle:\nEdit in\nCopy\nimport { REGEXP_ONLY_DIGITS_AND_CHARS } from \"input-otp\"\n \n...\n \n<InputOTP\n  maxLength={6}\n  pattern={REGEXP_ONLY_DIGITS_AND_CHARS}\n>\n  <InputOTPGroup>\n    <InputOTPSlot index={0} />\n    {/* ... */}\n  </InputOTPGroup>\n</InputOTP>\nCopy\nSeparator\n\nYou can use the <InputOTPSeparator /> component to add a separator between the input groups.\n\nPreview\nCode\nStyle:\nEdit in\nCopy\nimport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSeparator,\n  InputOTPSlot,\n} from \"@/components/ui/input-otp\"\n \n...\n \n<InputOTP maxLength={4}>\n  <InputOTPGroup>\n    <InputOTPSlot index={0} />\n    <InputOTPSlot index={1} />\n  </InputOTPGroup>\n  <InputOTPSeparator />\n  <InputOTPGroup>\n    <InputOTPSlot index={2} />\n    <InputOTPSlot index={3} />\n  </InputOTPGroup>\n</InputOTP>\nCopy\nControlled\n\nYou can use the value and onChange props to control the input value.\n\nPreview\nCode\nStyle:\nCopy\nEnter your one-time password.\nForm\nPreview\nCode\nStyle:\nCopy\nOne-Time Password\n\nPlease enter the one-time password sent to your phone.\n\nSubmit\nChangelog\n2024-03-19 Composition\n\nWe've made some updates and replaced the render props pattern with composition. Here's how to update your code if you prefer the composition pattern.\n\nNote: You are not required to update your code if you are using the render prop. It is still supported.\n\nUpdate to the latest version of input-otp.\nnpm install input-otp@latest\nCopy\nUpdate input-otp.tsx\ninput-otp.tsx\n- import { OTPInput, SlotProps } from \"input-otp\"\n+ import { OTPInput, OTPInputContext } from \"input-otp\"\n \n const InputOTPSlot = React.forwardRef<\n   React.ElementRef<\"div\">,\n-   SlotProps & React.ComponentPropsWithoutRef<\"div\">\n-  >(({ char, hasFakeCaret, isActive, className, ...props }, ref) => {\n+   React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n+  >(({ index, className, ...props }, ref) => {\n+   const inputOTPContext = React.useContext(OTPInputContext)\n+   const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\nCopy\nThen replace the render prop in your code.\n<InputOTP maxLength={6}>\n  <InputOTPGroup>\n    <InputOTPSlot index={0} />\n    <InputOTPSlot index={1} />\n    <InputOTPSlot index={2} />\n  </InputOTPGroup>\n  <InputOTPSeparator />\n  <InputOTPGroup>\n    <InputOTPSlot index={3} />\n    <InputOTPSlot index={4} />\n    <InputOTPSlot index={5} />\n  </InputOTPGroup>\n</InputOTP>\nCopy\n2024-03-19 Disabled\n\nTo add a disabled state to the input, update <InputOTP /> as follows:\n\ninput-otp.tsx\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\nCopy\nInput\nLabel\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Hover Card - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/hover-card",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nHover Card\nHover Card\n\nFor sighted users to preview content available behind a link.\n\nDocs\nAPI Reference\nPreview\nCode\nStyle:\nDefault\nEdit in\nCopy\nLoading...\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add hover-card\nCopy\nUsage\nimport {\n  HoverCard,\n  HoverCardContent,\n  HoverCardTrigger,\n} from \"@/components/ui/hover-card\"\nCopy\n<HoverCard>\n  <HoverCardTrigger>Hover</HoverCardTrigger>\n  <HoverCardContent>\n    The React Framework – created and maintained by @vercel.\n  </HoverCardContent>\n</HoverCard>\nCopy\nForm\nInput\n\nOn This Page\n\nInstallation\nUsage\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "React Hook Form - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/form",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nReact Hook Form\nReact Hook Form\n\nBuilding forms with React Hook Form and Zod.\n\nDocs\n\nForms are tricky. They are one of the most common things you'll build in a web application, but also one of the most complex.\n\nWell-designed HTML forms are:\n\nWell-structured and semantically correct.\nEasy to use and navigate (keyboard).\nAccessible with ARIA attributes and proper labels.\nHas support for client and server side validation.\nWell-styled and consistent with the rest of the application.\n\nIn this guide, we will take a look at building forms with react-hook-form and zod. We're going to use a <FormField> component to compose accessible forms using Radix UI components.\n\nFeatures\n\nThe <Form /> component is a wrapper around the react-hook-form library. It provides a few things:\n\nComposable components for building forms.\nA <FormField /> component for building controlled form fields.\nForm validation using zod.\nHandles accessibility and error messages.\nUses React.useId() for generating unique IDs.\nApplies the correct aria attributes to form fields based on states.\nBuilt to work with all Radix UI components.\nBring your own schema library. We use zod but you can use anything you want.\nYou have full control over the markup and styling.\nAnatomy\n<Form>\n  <FormField\n    control={...}\n    name=\"...\"\n    render={() => (\n      <FormItem>\n        <FormLabel />\n        <FormControl>\n          { /* Your form field */}\n        </FormControl>\n        <FormDescription />\n        <FormMessage />\n      </FormItem>\n    )}\n  />\n</Form>\nCopy\nExample\nconst form = useForm()\n \n<FormField\n  control={form.control}\n  name=\"username\"\n  render={({ field }) => (\n    <FormItem>\n      <FormLabel>Username</FormLabel>\n      <FormControl>\n        <Input placeholder=\"shadcn\" {...field} />\n      </FormControl>\n      <FormDescription>This is your public display name.</FormDescription>\n      <FormMessage />\n    </FormItem>\n  )}\n/>\nCopy\nInstallation\nCLI\nManual\nCommand\nnpx shadcn-ui@latest add form\nCopy\nUsage\nCreate a form schema\n\nDefine the shape of your form using a Zod schema. You can read more about using Zod in the Zod documentation.\n\n\"use client\"\n \nimport { z } from \"zod\"\n \nconst formSchema = z.object({\n  username: z.string().min(2).max(50),\n})\nCopy\nDefine a form\n\nUse the useForm hook from react-hook-form to create a form.\n\n\"use client\"\n \nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport { z } from \"zod\"\n \nconst formSchema = z.object({\n  username: z.string().min(2, {\n    message: \"Username must be at least 2 characters.\",\n  }),\n})\n \nexport function ProfileForm() {\n  // 1. Define your form.\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      username: \"\",\n    },\n  })\n \n  // 2. Define a submit handler.\n  function onSubmit(values: z.infer<typeof formSchema>) {\n    // Do something with the form values.\n    // ✅ This will be type-safe and validated.\n    console.log(values)\n  }\n}\nCopy\n\nSince FormField is using a controlled component, you need to provide a default value for the field. See the React Hook Form docs to learn more about controlled components.\n\nBuild your form\n\nWe can now use the <Form /> components to build our form.\n\n\"use client\"\n \nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport { z } from \"zod\"\n \nimport { Button } from \"@/components/ui/button\"\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\"\nimport { Input } from \"@/components/ui/input\"\n \nconst formSchema = z.object({\n  username: z.string().min(2, {\n    message: \"Username must be at least 2 characters.\",\n  }),\n})\n \nexport function ProfileForm() {\n  // ...\n \n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n        <FormField\n          control={form.control}\n          name=\"username\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Username</FormLabel>\n              <FormControl>\n                <Input placeholder=\"shadcn\" {...field} />\n              </FormControl>\n              <FormDescription>\n                This is your public display name.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  )\n}\nCopy\nDone\n\nThat's it. You now have a fully accessible form that is type-safe with client-side validation.\n\nStyle:\nDefault\nCopy\nLoading...\nExamples\n\nSee the following links for more examples on how to use the <Form /> component with other components:\n\nCheckbox\nDate Picker\nInput\nRadio Group\nSelect\nSwitch\nTextarea\nCombobox\nDropdown Menu\nHover Card\n\nOn This Page\n\nFeatures\nAnatomy\nExample\nInstallation\nCommand\nUsage\nCreate a form schema\nDefine a form\nBuild your form\nDone\nExamples\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Dropdown Menu - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/dropdown-menu",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nDropdown Menu\nDropdown Menu\n\nDisplays a menu to the user — such as a set of actions or functions — triggered by a button.\n\nDocs\nAPI Reference\nPreview\nCode\nStyle:\nEdit in\nCopy\nOpen\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add dropdown-menu\nCopy\nUsage\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nCopy\n<DropdownMenu>\n  <DropdownMenuTrigger>Open</DropdownMenuTrigger>\n  <DropdownMenuContent>\n    <DropdownMenuLabel>My Account</DropdownMenuLabel>\n    <DropdownMenuSeparator />\n    <DropdownMenuItem>Profile</DropdownMenuItem>\n    <DropdownMenuItem>Billing</DropdownMenuItem>\n    <DropdownMenuItem>Team</DropdownMenuItem>\n    <DropdownMenuItem>Subscription</DropdownMenuItem>\n  </DropdownMenuContent>\n</DropdownMenu>\nCopy\nExamples\nCheckboxes\nPreview\nCode\nStyle:\nEdit in\nCopy\nOpen\nRadio Group\nPreview\nCode\nStyle:\nEdit in\nCopy\nOpen\nDrawer\nForm\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Drawer - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/drawer",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nDrawer\nDrawer\n\nA drawer component for React.\n\nDocs\nPreview\nCode\nStyle:\nCopy\nOpen Drawer\nAbout\n\nDrawer is built on top of Vaul by emilkowalski_.\n\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add drawer\nCopy\nUsage\nimport {\n  Drawer,\n  DrawerClose,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger,\n} from \"@/components/ui/drawer\"\nCopy\n<Drawer>\n  <DrawerTrigger>Open</DrawerTrigger>\n  <DrawerContent>\n    <DrawerHeader>\n      <DrawerTitle>Are you absolutely sure?</DrawerTitle>\n      <DrawerDescription>This action cannot be undone.</DrawerDescription>\n    </DrawerHeader>\n    <DrawerFooter>\n      <Button>Submit</Button>\n      <DrawerClose>\n        <Button variant=\"outline\">Cancel</Button>\n      </DrawerClose>\n    </DrawerFooter>\n  </DrawerContent>\n</Drawer>\nCopy\nExamples\nResponsive Dialog\n\nYou can combine the Dialog and Drawer components to create a responsive dialog. This renders a Dialog component on desktop and a Drawer on mobile.\n\nPreview\nCode\nStyle:\nCopy\nEdit Profile\nDialog\nDropdown Menu\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Dialog - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/dialog",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nDialog\nDialog\n\nA window overlaid on either the primary window or another dialog window, rendering the content underneath inert.\n\nDocs\nAPI Reference\nPreview\nCode\nStyle:\nEdit in\nCopy\nEdit Profile\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add dialog\nCopy\nUsage\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nCopy\n<Dialog>\n  <DialogTrigger>Open</DialogTrigger>\n  <DialogContent>\n    <DialogHeader>\n      <DialogTitle>Are you absolutely sure?</DialogTitle>\n      <DialogDescription>\n        This action cannot be undone. This will permanently delete your account\n        and remove your data from our servers.\n      </DialogDescription>\n    </DialogHeader>\n  </DialogContent>\n</Dialog>\nCopy\nExamples\nCustom close button\nPreview\nCode\nStyle:\nCopy\nShare\nNotes\n\nTo activate the Dialog component from within a Context Menu or Dropdown Menu, you must encase the Context Menu or Dropdown Menu component in the Dialog component. For more information, refer to the linked issue here.\n\n<Dialog>\n  <ContextMenu>\n    <ContextMenuTrigger>Right click</ContextMenuTrigger>\n    <ContextMenuContent>\n      <ContextMenuItem>Open</ContextMenuItem>\n      <ContextMenuItem>Download</ContextMenuItem>\n      <DialogTrigger asChild>\n        <ContextMenuItem>\n          <span>Delete</span>\n        </ContextMenuItem>\n      </DialogTrigger>\n    </ContextMenuContent>\n  </ContextMenu>\n  <DialogContent>\n    <DialogHeader>\n      <DialogTitle>Are you absolutely sure?</DialogTitle>\n      <DialogDescription>\n        This action cannot be undone. Are you sure you want to permanently\n        delete this file from our servers?\n      </DialogDescription>\n    </DialogHeader>\n    <DialogFooter>\n      <Button type=\"submit\">Confirm</Button>\n    </DialogFooter>\n  </DialogContent>\n</Dialog>\nCopy\nDate Picker\nDrawer\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Data Table - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/data-table",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nData Table\nData Table\n\nPowerful table and datagrids built using TanStack Table.\n\nDocs\nPreview\nCode\nStyle:\nCopy\nColumns\n\tStatus\tEmail\n\t\nAmount\n\t\n\n\t\nSuccess\n\t\nken99@yahoo.com\n\t\n$316.00\n\t\nOpen menu\n\n\n\t\nSuccess\n\t\nabe45@gmail.com\n\t\n$242.00\n\t\nOpen menu\n\n\n\t\nProcessing\n\t\nmonserrat44@gmail.com\n\t\n$837.00\n\t\nOpen menu\n\n\n\t\nSuccess\n\t\nsilas22@gmail.com\n\t\n$874.00\n\t\nOpen menu\n\n\n\t\nFailed\n\t\ncarmella@hotmail.com\n\t\n$721.00\n\t\nOpen menu\n0 of 5 row(s) selected.\nPreviousNext\nIntroduction\n\nEvery data table or datagrid I've created has been unique. They all behave differently, have specific sorting and filtering requirements, and work with different data sources.\n\nIt doesn't make sense to combine all of these variations into a single component. If we do that, we'll lose the flexibility that headless UI provides.\n\nSo instead of a data-table component, I thought it would be more helpful to provide a guide on how to build your own.\n\nWe'll start with the basic <Table /> component and build a complex data table from scratch.\n\nTip: If you find yourself using the same table in multiple places in your app, you can always extract it into a reusable component.\n\nTable of Contents\n\nThis guide will show you how to use TanStack Table and the <Table /> component to build your own custom data table. We'll cover the following topics:\n\nBasic Table\nRow Actions\nPagination\nSorting\nFiltering\nVisibility\nRow Selection\nReusable Components\nInstallation\nAdd the <Table /> component to your project:\nnpx shadcn-ui@latest add table\nCopy\nAdd tanstack/react-table dependency:\nnpm install @tanstack/react-table\nCopy\nPrerequisites\n\nWe are going to build a table to show recent payments. Here's what our data looks like:\n\ntype Payment = {\n  id: string\n  amount: number\n  status: \"pending\" | \"processing\" | \"success\" | \"failed\"\n  email: string\n}\n \nexport const payments: Payment[] = [\n  {\n    id: \"728ed52f\",\n    amount: 100,\n    status: \"pending\",\n    email: \"m@example.com\",\n  },\n  {\n    id: \"489e1d42\",\n    amount: 125,\n    status: \"processing\",\n    email: \"example@gmail.com\",\n  },\n  // ...\n]\nCopy\nProject Structure\n\nStart by creating the following file structure:\n\napp\n└── payments\n    ├── columns.tsx\n    ├── data-table.tsx\n    └── page.tsx\nCopy\n\nI'm using a Next.js example here but this works for any other React framework.\n\ncolumns.tsx (client component) will contain our column definitions.\ndata-table.tsx (client component) will contain our <DataTable /> component.\npage.tsx (server component) is where we'll fetch data and render our table.\nBasic Table\n\nLet's start by building a basic table.\n\nColumn Definitions\n\nFirst, we'll define our columns.\n\napp/payments/columns.tsx\n\"use client\"\n \nimport { ColumnDef } from \"@tanstack/react-table\"\n \n// This type is used to define the shape of our data.\n// You can use a Zod schema here if you want.\nexport type Payment = {\n  id: string\n  amount: number\n  status: \"pending\" | \"processing\" | \"success\" | \"failed\"\n  email: string\n}\n \nexport const columns: ColumnDef<Payment>[] = [\n  {\n    accessorKey: \"status\",\n    header: \"Status\",\n  },\n  {\n    accessorKey: \"email\",\n    header: \"Email\",\n  },\n  {\n    accessorKey: \"amount\",\n    header: \"Amount\",\n  },\n]\nCopy\n\nNote: Columns are where you define the core of what your table will look like. They define the data that will be displayed, how it will be formatted, sorted and filtered.\n\n<DataTable /> component\n\nNext, we'll create a <DataTable /> component to render our table.\n\napp/payments/data-table.tsx\n\"use client\"\n \nimport {\n  ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\n \nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\"\n \ninterface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[]\n  data: TData[]\n}\n \nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n  })\n \n  return (\n    <div className=\"rounded-md border\">\n      <Table>\n        <TableHeader>\n          {table.getHeaderGroups().map((headerGroup) => (\n            <TableRow key={headerGroup.id}>\n              {headerGroup.headers.map((header) => {\n                return (\n                  <TableHead key={header.id}>\n                    {header.isPlaceholder\n                      ? null\n                      : flexRender(\n                          header.column.columnDef.header,\n                          header.getContext()\n                        )}\n                  </TableHead>\n                )\n              })}\n            </TableRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows?.length ? (\n            table.getRowModel().rows.map((row) => (\n              <TableRow\n                key={row.id}\n                data-state={row.getIsSelected() && \"selected\"}\n              >\n                {row.getVisibleCells().map((cell) => (\n                  <TableCell key={cell.id}>\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))\n          ) : (\n            <TableRow>\n              <TableCell colSpan={columns.length} className=\"h-24 text-center\">\n                No results.\n              </TableCell>\n            </TableRow>\n          )}\n        </TableBody>\n      </Table>\n    </div>\n  )\n}\nCopy\n\nTip: If you find yourself using <DataTable /> in multiple places, this is the component you could make reusable by extracting it to components/ui/data-table.tsx.\n\n<DataTable columns={columns} data={data} />\n\nRender the table\n\nFinally, we'll render our table in our page component.\n\napp/payments/page.tsx\nimport { Payment, columns } from \"./columns\"\nimport { DataTable } from \"./data-table\"\n \nasync function getData(): Promise<Payment[]> {\n  // Fetch data from your API here.\n  return [\n    {\n      id: \"728ed52f\",\n      amount: 100,\n      status: \"pending\",\n      email: \"m@example.com\",\n    },\n    // ...\n  ]\n}\n \nexport default async function DemoPage() {\n  const data = await getData()\n \n  return (\n    <div className=\"container mx-auto py-10\">\n      <DataTable columns={columns} data={data} />\n    </div>\n  )\n}\nCopy\nCell Formatting\n\nLet's format the amount cell to display the dollar amount. We'll also align the cell to the right.\n\nUpdate columns definition\n\nUpdate the header and cell definitions for amount as follows:\n\napp/payments/columns.tsx\nexport const columns: ColumnDef<Payment>[] = [\n  {\n    accessorKey: \"amount\",\n    header: () => <div className=\"text-right\">Amount</div>,\n    cell: ({ row }) => {\n      const amount = parseFloat(row.getValue(\"amount\"))\n      const formatted = new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\",\n      }).format(amount)\n \n      return <div className=\"text-right font-medium\">{formatted}</div>\n    },\n  },\n]\nCopy\n\nYou can use the same approach to format other cells and headers.\n\nRow Actions\n\nLet's add row actions to our table. We'll use a <Dropdown /> component for this.\n\nUpdate columns definition\n\nUpdate our columns definition to add a new actions column. The actions cell returns a <Dropdown /> component.\n\napp/payments/columns.tsx\n\"use client\"\n \nimport { ColumnDef } from \"@tanstack/react-table\"\nimport { MoreHorizontal } from \"lucide-react\"\n \nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\n \nexport const columns: ColumnDef<Payment>[] = [\n  // ...\n  {\n    id: \"actions\",\n    cell: ({ row }) => {\n      const payment = row.original\n \n      return (\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n              <span className=\"sr-only\">Open menu</span>\n              <MoreHorizontal className=\"h-4 w-4\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            <DropdownMenuLabel>Actions</DropdownMenuLabel>\n            <DropdownMenuItem\n              onClick={() => navigator.clipboard.writeText(payment.id)}\n            >\n              Copy payment ID\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem>View customer</DropdownMenuItem>\n            <DropdownMenuItem>View payment details</DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      )\n    },\n  },\n  // ...\n]\nCopy\n\nYou can access the row data using row.original in the cell function. Use this to handle actions for your row eg. use the id to make a DELETE call to your API.\n\nPagination\n\nNext, we'll add pagination to our table.\n\nUpdate <DataTable>\napp/payments/data-table.tsx\nimport {\n  ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\n \nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n  })\n \n  // ...\n}\nCopy\n\nThis will automatically paginate your rows into pages of 10. See the pagination docs for more information on customizing page size and implementing manual pagination.\n\nAdd pagination controls\n\nWe can add pagination controls to our table using the <Button /> component and the table.previousPage(), table.nextPage() API methods.\n\napp/payments/data-table.tsx\nimport { Button } from \"@/components/ui/button\"\n \nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n  })\n \n  return (\n    <div>\n      <div className=\"rounded-md border\">\n        <Table>\n          { // .... }\n        </Table>\n      </div>\n      <div className=\"flex items-center justify-end space-x-2 py-4\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => table.previousPage()}\n          disabled={!table.getCanPreviousPage()}\n        >\n          Previous\n        </Button>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => table.nextPage()}\n          disabled={!table.getCanNextPage()}\n        >\n          Next\n        </Button>\n      </div>\n    </div>\n  )\n}\nCopy\n\nSee Reusable Components section for a more advanced pagination component.\n\nSorting\n\nLet's make the email column sortable.\n\nUpdate <DataTable>\napp/payments/data-table.tsx\n\"use client\"\n \nimport * as React from \"react\"\nimport {\n  ColumnDef,\n  SortingState,\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\n \nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n \n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    onSortingChange: setSorting,\n    getSortedRowModel: getSortedRowModel(),\n    state: {\n      sorting,\n    },\n  })\n \n  return (\n    <div>\n      <div className=\"rounded-md border\">\n        <Table>{ ... }</Table>\n      </div>\n    </div>\n  )\n}\nCopy\nMake header cell sortable\n\nWe can now update the email header cell to add sorting controls.\n\napp/payments/columns.tsx\n\"use client\"\n \nimport { ColumnDef } from \"@tanstack/react-table\"\nimport { ArrowUpDown, MoreHorizontal } from \"lucide-react\"\n \nexport const columns: ColumnDef<Payment>[] = [\n  {\n    accessorKey: \"email\",\n    header: ({ column }) => {\n      return (\n        <Button\n          variant=\"ghost\"\n          onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}\n        >\n          Email\n          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n        </Button>\n      )\n    },\n  },\n]\nCopy\n\nThis will automatically sort the table (asc and desc) when the user toggles on the header cell.\n\nFiltering\n\nLet's add a search input to filter emails in our table.\n\nUpdate <DataTable>\napp/payments/data-table.tsx\n\"use client\"\n \nimport * as React from \"react\"\nimport {\n  ColumnDef,\n  ColumnFiltersState,\n  SortingState,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\n \nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\n \nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n    []\n  )\n \n  const table = useReactTable({\n    data,\n    columns,\n    onSortingChange: setSorting,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    onColumnFiltersChange: setColumnFilters,\n    getFilteredRowModel: getFilteredRowModel(),\n    state: {\n      sorting,\n      columnFilters,\n    },\n  })\n \n  return (\n    <div>\n      <div className=\"flex items-center py-4\">\n        <Input\n          placeholder=\"Filter emails...\"\n          value={(table.getColumn(\"email\")?.getFilterValue() as string) ?? \"\"}\n          onChange={(event) =>\n            table.getColumn(\"email\")?.setFilterValue(event.target.value)\n          }\n          className=\"max-w-sm\"\n        />\n      </div>\n      <div className=\"rounded-md border\">\n        <Table>{ ... }</Table>\n      </div>\n    </div>\n  )\n}\nCopy\n\nFiltering is now enabled for the email column. You can add filters to other columns as well. See the filtering docs for more information on customizing filters.\n\nVisibility\n\nAdding column visibility is fairly simple using @tanstack/react-table visibility API.\n\nUpdate <DataTable>\napp/payments/data-table.tsx\n\"use client\"\n \nimport * as React from \"react\"\nimport {\n  ColumnDef,\n  ColumnFiltersState,\n  SortingState,\n  VisibilityState,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\n \nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\n \nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n    []\n  )\n  const [columnVisibility, setColumnVisibility] =\n    React.useState<VisibilityState>({})\n \n  const table = useReactTable({\n    data,\n    columns,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    onColumnVisibilityChange: setColumnVisibility,\n    state: {\n      sorting,\n      columnFilters,\n      columnVisibility,\n    },\n  })\n \n  return (\n    <div>\n      <div className=\"flex items-center py-4\">\n        <Input\n          placeholder=\"Filter emails...\"\n          value={table.getColumn(\"email\")?.getFilterValue() as string}\n          onChange={(event) =>\n            table.getColumn(\"email\")?.setFilterValue(event.target.value)\n          }\n          className=\"max-w-sm\"\n        />\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"outline\" className=\"ml-auto\">\n              Columns\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            {table\n              .getAllColumns()\n              .filter(\n                (column) => column.getCanHide()\n              )\n              .map((column) => {\n                return (\n                  <DropdownMenuCheckboxItem\n                    key={column.id}\n                    className=\"capitalize\"\n                    checked={column.getIsVisible()}\n                    onCheckedChange={(value) =>\n                      column.toggleVisibility(!!value)\n                    }\n                  >\n                    {column.id}\n                  </DropdownMenuCheckboxItem>\n                )\n              })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n      <div className=\"rounded-md border\">\n        <Table>{ ... }</Table>\n      </div>\n    </div>\n  )\n}\nCopy\n\nThis adds a dropdown menu that you can use to toggle column visibility.\n\nRow Selection\n\nNext, we're going to add row selection to our table.\n\nUpdate column definitions\napp/payments/columns.tsx\n\"use client\"\n \nimport { ColumnDef } from \"@tanstack/react-table\"\n \nimport { Badge } from \"@/components/ui/badge\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\n \nexport const columns: ColumnDef<Payment>[] = [\n  {\n    id: \"select\",\n    header: ({ table }) => (\n      <Checkbox\n        checked={\n          table.getIsAllPageRowsSelected() ||\n          (table.getIsSomePageRowsSelected() && \"indeterminate\")\n        }\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n        aria-label=\"Select all\"\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label=\"Select row\"\n      />\n    ),\n    enableSorting: false,\n    enableHiding: false,\n  },\n]\nCopy\nUpdate <DataTable>\napp/payments/data-table.tsx\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n    []\n  )\n  const [columnVisibility, setColumnVisibility] =\n    React.useState<VisibilityState>({})\n  const [rowSelection, setRowSelection] = React.useState({})\n \n  const table = useReactTable({\n    data,\n    columns,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    onColumnVisibilityChange: setColumnVisibility,\n    onRowSelectionChange: setRowSelection,\n    state: {\n      sorting,\n      columnFilters,\n      columnVisibility,\n      rowSelection,\n    },\n  })\n \n  return (\n    <div>\n      <div className=\"rounded-md border\">\n        <Table />\n      </div>\n    </div>\n  )\n}\nCopy\n\nThis adds a checkbox to each row and a checkbox in the header to select all rows.\n\nShow selected rows\n\nYou can show the number of selected rows using the table.getFilteredSelectedRowModel() API.\n\n<div className=\"flex-1 text-sm text-muted-foreground\">\n  {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n  {table.getFilteredRowModel().rows.length} row(s) selected.\n</div>\nCopy\nReusable Components\n\nHere are some components you can use to build your data tables. This is from the Tasks demo.\n\nColumn header\n\nMake any column header sortable and hideable.\n\nimport {\n  ArrowDownIcon,\n  ArrowUpIcon,\n  CaretSortIcon,\n  EyeNoneIcon,\n} from \"@radix-ui/react-icons\"\nimport { Column } from \"@tanstack/react-table\"\n \nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/registry/new-york/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/registry/new-york/ui/dropdown-menu\"\n \ninterface DataTableColumnHeaderProps<TData, TValue>\n  extends React.HTMLAttributes<HTMLDivElement> {\n  column: Column<TData, TValue>\n  title: string\n}\n \nexport function DataTableColumnHeader<TData, TValue>({\n  column,\n  title,\n  className,\n}: DataTableColumnHeaderProps<TData, TValue>) {\n  if (!column.getCanSort()) {\n    return <div className={cn(className)}>{title}</div>\n  }\n \n  return (\n    <div className={cn(\"flex items-center space-x-2\", className)}>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"-ml-3 h-8 data-[state=open]:bg-accent\"\n          >\n            <span>{title}</span>\n            {column.getIsSorted() === \"desc\" ? (\n              <ArrowDownIcon className=\"ml-2 h-4 w-4\" />\n            ) : column.getIsSorted() === \"asc\" ? (\n              <ArrowUpIcon className=\"ml-2 h-4 w-4\" />\n            ) : (\n              <CaretSortIcon className=\"ml-2 h-4 w-4\" />\n            )}\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"start\">\n          <DropdownMenuItem onClick={() => column.toggleSorting(false)}>\n            <ArrowUpIcon className=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n            Asc\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={() => column.toggleSorting(true)}>\n            <ArrowDownIcon className=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n            Desc\n          </DropdownMenuItem>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem onClick={() => column.toggleVisibility(false)}>\n            <EyeNoneIcon className=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n            Hide\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </div>\n  )\n}\nCopy\nExpand\nexport const columns = [\n  {\n    accessorKey: \"email\",\n    header: ({ column }) => (\n      <DataTableColumnHeader column={column} title=\"Email\" />\n    ),\n  },\n]\nCopy\nPagination\n\nAdd pagination controls to your table including page size and selection count.\n\nimport {\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  DoubleArrowLeftIcon,\n  DoubleArrowRightIcon,\n} from \"@radix-ui/react-icons\"\nimport { Table } from \"@tanstack/react-table\"\n \nimport { Button } from \"@/registry/new-york/ui/button\"\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/registry/new-york/ui/select\"\n \ninterface DataTablePaginationProps<TData> {\n  table: Table<TData>\n}\n \nexport function DataTablePagination<TData>({\n  table,\n}: DataTablePaginationProps<TData>) {\n  return (\n    <div className=\"flex items-center justify-between px-2\">\n      <div className=\"flex-1 text-sm text-muted-foreground\">\n        {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n        {table.getFilteredRowModel().rows.length} row(s) selected.\n      </div>\n      <div className=\"flex items-center space-x-6 lg:space-x-8\">\n        <div className=\"flex items-center space-x-2\">\n          <p className=\"text-sm font-medium\">Rows per page</p>\n          <Select\n            value={`${table.getState().pagination.pageSize}`}\n            onValueChange={(value) => {\n              table.setPageSize(Number(value))\n            }}\n          >\n            <SelectTrigger className=\"h-8 w-[70px]\">\n              <SelectValue placeholder={table.getState().pagination.pageSize} />\n            </SelectTrigger>\n            <SelectContent side=\"top\">\n              {[10, 20, 30, 40, 50].map((pageSize) => (\n                <SelectItem key={pageSize} value={`${pageSize}`}>\n                  {pageSize}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <div className=\"flex w-[100px] items-center justify-center text-sm font-medium\">\n          Page {table.getState().pagination.pageIndex + 1} of{\" \"}\n          {table.getPageCount()}\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            className=\"hidden h-8 w-8 p-0 lg:flex\"\n            onClick={() => table.setPageIndex(0)}\n            disabled={!table.getCanPreviousPage()}\n          >\n            <span className=\"sr-only\">Go to first page</span>\n            <DoubleArrowLeftIcon className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"h-8 w-8 p-0\"\n            onClick={() => table.previousPage()}\n            disabled={!table.getCanPreviousPage()}\n          >\n            <span className=\"sr-only\">Go to previous page</span>\n            <ChevronLeftIcon className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"h-8 w-8 p-0\"\n            onClick={() => table.nextPage()}\n            disabled={!table.getCanNextPage()}\n          >\n            <span className=\"sr-only\">Go to next page</span>\n            <ChevronRightIcon className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"hidden h-8 w-8 p-0 lg:flex\"\n            onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n            disabled={!table.getCanNextPage()}\n          >\n            <span className=\"sr-only\">Go to last page</span>\n            <DoubleArrowRightIcon className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  )\n}\nCopy\nExpand\n<DataTablePagination table={table} />\nCopy\nColumn toggle\n\nA component to toggle column visibility.\n\n\"use client\"\n \nimport { DropdownMenuTrigger } from \"@radix-ui/react-dropdown-menu\"\nimport { MixerHorizontalIcon } from \"@radix-ui/react-icons\"\nimport { Table } from \"@tanstack/react-table\"\n \nimport { Button } from \"@/registry/new-york/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n} from \"@/registry/new-york/ui/dropdown-menu\"\n \ninterface DataTableViewOptionsProps<TData> {\n  table: Table<TData>\n}\n \nexport function DataTableViewOptions<TData>({\n  table,\n}: DataTableViewOptionsProps<TData>) {\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"ml-auto hidden h-8 lg:flex\"\n        >\n          <MixerHorizontalIcon className=\"mr-2 h-4 w-4\" />\n          View\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-[150px]\">\n        <DropdownMenuLabel>Toggle columns</DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        {table\n          .getAllColumns()\n          .filter(\n            (column) =>\n              typeof column.accessorFn !== \"undefined\" && column.getCanHide()\n          )\n          .map((column) => {\n            return (\n              <DropdownMenuCheckboxItem\n                key={column.id}\n                className=\"capitalize\"\n                checked={column.getIsVisible()}\n                onCheckedChange={(value) => column.toggleVisibility(!!value)}\n              >\n                {column.id}\n              </DropdownMenuCheckboxItem>\n            )\n          })}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\nCopy\nExpand\n<DataTableViewOptions table={table} />\nCopy\nContext Menu\nDate Picker\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Date Picker - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/date-picker",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nDate Picker\nDate Picker\n\nA date picker component with range and presets.\n\nPreview\nCode\nStyle:\nCopy\nPick a date\nInstallation\n\nThe Date Picker is built using a composition of the <Popover /> and the <Calendar /> components.\n\nSee installation instructions for the Popover and the Calendar components.\n\nUsage\n\"use client\"\n \nimport * as React from \"react\"\nimport { format } from \"date-fns\"\nimport { Calendar as CalendarIcon } from \"lucide-react\"\n \nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Calendar } from \"@/components/ui/calendar\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\"\n \nexport function DatePickerDemo() {\n  const [date, setDate] = React.useState<Date>()\n \n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button\n          variant={\"outline\"}\n          className={cn(\n            \"w-[280px] justify-start text-left font-normal\",\n            !date && \"text-muted-foreground\"\n          )}\n        >\n          <CalendarIcon className=\"mr-2 h-4 w-4\" />\n          {date ? format(date, \"PPP\") : <span>Pick a date</span>}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-auto p-0\">\n        <Calendar\n          mode=\"single\"\n          selected={date}\n          onSelect={setDate}\n          initialFocus\n        />\n      </PopoverContent>\n    </Popover>\n  )\n}\nCopy\n\nSee the React DayPicker documentation for more information.\n\nExamples\nDate Picker\nPreview\nCode\nStyle:\nCopy\nPick a date\nDate Range Picker\nPreview\nCode\nStyle:\nCopy\nJan 20, 2022 - Feb 09, 2022\nWith Presets\nPreview\nCode\nStyle:\nCopy\nPick a date\nForm\nPreview\nCode\nStyle:\nCopy\nDate of birth\nPick a date\n\nYour date of birth is used to calculate your age.\n\nSubmit\nData Table\nDialog\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Context Menu - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/context-menu",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nContext Menu\nContext Menu\n\nDisplays a menu to the user — such as a set of actions or functions — triggered by a button.\n\nDocs\nAPI Reference\nPreview\nCode\nStyle:\nEdit in\nCopy\nRight click here\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add context-menu\nCopy\nUsage\nimport {\n  ContextMenu,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuTrigger,\n} from \"@/components/ui/context-menu\"\nCopy\n<ContextMenu>\n  <ContextMenuTrigger>Right click</ContextMenuTrigger>\n  <ContextMenuContent>\n    <ContextMenuItem>Profile</ContextMenuItem>\n    <ContextMenuItem>Billing</ContextMenuItem>\n    <ContextMenuItem>Team</ContextMenuItem>\n    <ContextMenuItem>Subscription</ContextMenuItem>\n  </ContextMenuContent>\n</ContextMenu>\nCopy\nCommand\nData Table\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Command - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/command",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nCommand\nCommand\n\nFast, composable, unstyled command menu for React.\n\nDocs\nPreview\nCode\nStyle:\nEdit in\nCopy\nNo results found.\nSuggestions\nCalendar\nSearch Emoji\nCalculator\nSettings\nProfile\n⌘P\nBilling\n⌘B\nSettings\n⌘S\nAbout\n\nThe <Command /> component uses the cmdk component by pacocoursey.\n\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add command\nCopy\nUsage\nimport {\n  Command,\n  CommandDialog,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n  CommandShortcut,\n} from \"@/components/ui/command\"\nCopy\n<Command>\n  <CommandInput placeholder=\"Type a command or search...\" />\n  <CommandList>\n    <CommandEmpty>No results found.</CommandEmpty>\n    <CommandGroup heading=\"Suggestions\">\n      <CommandItem>Calendar</CommandItem>\n      <CommandItem>Search Emoji</CommandItem>\n      <CommandItem>Calculator</CommandItem>\n    </CommandGroup>\n    <CommandSeparator />\n    <CommandGroup heading=\"Settings\">\n      <CommandItem>Profile</CommandItem>\n      <CommandItem>Billing</CommandItem>\n      <CommandItem>Settings</CommandItem>\n    </CommandGroup>\n  </CommandList>\n</Command>\nCopy\nExamples\nDialog\nPreview\nCode\nStyle:\nCopy\n\nPress \n⌘\nJ\n\nTo show the command menu in a dialog, use the <CommandDialog /> component.\n\nexport function CommandMenu() {\n  const [open, setOpen] = React.useState(false)\n \n  React.useEffect(() => {\n    const down = (e: KeyboardEvent) => {\n      if (e.key === \"k\" && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault()\n        setOpen((open) => !open)\n      }\n    }\n    document.addEventListener(\"keydown\", down)\n    return () => document.removeEventListener(\"keydown\", down)\n  }, [])\n \n  return (\n    <CommandDialog open={open} onOpenChange={setOpen}>\n      <CommandInput placeholder=\"Type a command or search...\" />\n      <CommandList>\n        <CommandEmpty>No results found.</CommandEmpty>\n        <CommandGroup heading=\"Suggestions\">\n          <CommandItem>Calendar</CommandItem>\n          <CommandItem>Search Emoji</CommandItem>\n          <CommandItem>Calculator</CommandItem>\n        </CommandGroup>\n      </CommandList>\n    </CommandDialog>\n  )\n}\nCopy\nCombobox\n\nYou can use the <Command /> component as a combobox. See the Combobox page for more information.\n\nCombobox\nContext Menu\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Combobox - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/combobox",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nCombobox\nCombobox\n\nAutocomplete input and command palette with a list of suggestions.\n\nPreview\nCode\nStyle:\nCopy\nSelect framework...\nInstallation\n\nThe Combobox is built using a composition of the <Popover /> and the <Command /> components.\n\nSee installation instructions for the Popover and the Command components.\n\nUsage\n\"use client\"\n \nimport * as React from \"react\"\nimport { Check, ChevronsUpDown } from \"lucide-react\"\n \nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n} from \"@/components/ui/command\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\"\n \nconst frameworks = [\n  {\n    value: \"next.js\",\n    label: \"Next.js\",\n  },\n  {\n    value: \"sveltekit\",\n    label: \"SvelteKit\",\n  },\n  {\n    value: \"nuxt.js\",\n    label: \"Nuxt.js\",\n  },\n  {\n    value: \"remix\",\n    label: \"Remix\",\n  },\n  {\n    value: \"astro\",\n    label: \"Astro\",\n  },\n]\n \nexport function ComboboxDemo() {\n  const [open, setOpen] = React.useState(false)\n  const [value, setValue] = React.useState(\"\")\n \n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className=\"w-[200px] justify-between\"\n        >\n          {value\n            ? frameworks.find((framework) => framework.value === value)?.label\n            : \"Select framework...\"}\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[200px] p-0\">\n        <Command>\n          <CommandInput placeholder=\"Search framework...\" />\n          <CommandEmpty>No framework found.</CommandEmpty>\n          <CommandGroup>\n            {frameworks.map((framework) => (\n              <CommandItem\n                key={framework.value}\n                value={framework.value}\n                onSelect={(currentValue) => {\n                  setValue(currentValue === value ? \"\" : currentValue)\n                  setOpen(false)\n                }}\n              >\n                <Check\n                  className={cn(\n                    \"mr-2 h-4 w-4\",\n                    value === framework.value ? \"opacity-100\" : \"opacity-0\"\n                  )}\n                />\n                {framework.label}\n              </CommandItem>\n            ))}\n          </CommandGroup>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  )\n}\nCopy\nExamples\nCombobox\nPreview\nCode\nStyle:\nCopy\nSelect framework...\nPopover\nPreview\nCode\nStyle:\nCopy\n\nStatus\n\n+ Set status\nDropdown menu\nPreview\nCode\nStyle:\nCopy\n\nfeatureCreate a new project\n\nResponsive\n\nYou can create a responsive combobox by using the <Popover /> on desktop and the <Drawer /> components on mobile.\n\nPreview\nCode\nStyle:\nCopy\n+ Set status\nForm\nPreview\nCode\nStyle:\nCopy\nLanguage\nSelect language\n\nThis is the language that will be used in the dashboard.\n\nSubmit\nCollapsible\nCommand\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Collapsible - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/collapsible",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nCollapsible\nCollapsible\n\nAn interactive component which expands/collapses a panel.\n\nDocs\nAPI Reference\nPreview\nCode\nStyle:\nDefault\nEdit in\nCopy\nLoading...\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add collapsible\nCopy\nUsage\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\"\nCopy\n<Collapsible>\n  <CollapsibleTrigger>Can I use this in my project?</CollapsibleTrigger>\n  <CollapsibleContent>\n    Yes. Free to use for personal and commercial projects. No attribution\n    required.\n  </CollapsibleContent>\n</Collapsible>\nCopy\nCheckbox\nCombobox\n\nOn This Page\n\nInstallation\nUsage\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Checkbox - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/checkbox",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nCheckbox\nCheckbox\n\nA control that allows the user to toggle between checked and not checked.\n\nDocs\nAPI Reference\nPreview\nCode\nStyle:\nEdit in\nCopy\nAccept terms and conditions\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add checkbox\nCopy\nUsage\nimport { Checkbox } from \"@/components/ui/checkbox\"\nCopy\n<Checkbox />\nCopy\nExamples\nWith text\nPreview\nCode\nStyle:\nEdit in\nCopy\nAccept terms and conditions\n\nYou agree to our Terms of Service and Privacy Policy.\n\nDisabled\nPreview\nCode\nStyle:\nEdit in\nCopy\nAccept terms and conditions\nForm\nPreview\nCode\nStyle:\nCopy\nUse different settings for my mobile devices\n\nYou can manage your mobile notifications in the mobile settings page.\n\nSubmit\nPreview\nCode\nStyle:\nCopy\nSidebar\n\nSelect the items you want to display in the sidebar.\n\nRecents\nHome\nApplications\nDesktop\nDownloads\nDocuments\nSubmit\nCarousel\nCollapsible\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Carousel - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/carousel",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nCarousel\nCarousel\n\nA carousel with motion and swipe built using Embla.\n\nDocs\nAPI Reference\nPreview\nCode\nStyle:\nCopy\n1\n2\n3\n4\n5\nPrevious slide\nNext slide\nAbout\n\nThe carousel component is built using the Embla Carousel library.\n\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add carousel\nCopy\nUsage\nimport {\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n} from \"@/components/ui/carousel\"\nCopy\n<Carousel>\n  <CarouselContent>\n    <CarouselItem>...</CarouselItem>\n    <CarouselItem>...</CarouselItem>\n    <CarouselItem>...</CarouselItem>\n  </CarouselContent>\n  <CarouselPrevious />\n  <CarouselNext />\n</Carousel>\nCopy\nExamples\nSizes\n\nTo set the size of the items, you can use the basis utility class on the <CarouselItem />.\n\nPreview\nCode\nStyle:\nCopy\n1\n2\n3\n4\n5\nPrevious slide\nNext slide\nExample\n// 33% of the carousel width.\n<Carousel>\n  <CarouselContent>\n    <CarouselItem className=\"basis-1/3\">...</CarouselItem>\n    <CarouselItem className=\"basis-1/3\">...</CarouselItem>\n    <CarouselItem className=\"basis-1/3\">...</CarouselItem>\n  </CarouselContent>\n</Carousel>\nCopy\nResponsive\n// 50% on small screens and 33% on larger screens.\n<Carousel>\n  <CarouselContent>\n    <CarouselItem className=\"md:basis-1/2 lg:basis-1/3\">...</CarouselItem>\n    <CarouselItem className=\"md:basis-1/2 lg:basis-1/3\">...</CarouselItem>\n    <CarouselItem className=\"md:basis-1/2 lg:basis-1/3\">...</CarouselItem>\n  </CarouselContent>\n</Carousel>\nCopy\nSpacing\n\nTo set the spacing between the items, we use a pl-[VALUE] utility on the <CarouselItem /> and a negative -ml-[VALUE] on the <CarouselContent />.\n\nWhy: I tried to use the gap property or a grid layout on the <CarouselContent /> but it required a lot of math and mental effort to get the spacing right. I found pl-[VALUE] and -ml-[VALUE] utilities much easier to use.\n\nYou can always adjust this in your own project if you need to.\n\nPreview\nCode\nStyle:\nCopy\n1\n2\n3\n4\n5\nPrevious slide\nNext slide\nExample\n<Carousel>\n  <CarouselContent className=\"-ml-4\">\n    <CarouselItem className=\"pl-4\">...</CarouselItem>\n    <CarouselItem className=\"pl-4\">...</CarouselItem>\n    <CarouselItem className=\"pl-4\">...</CarouselItem>\n  </CarouselContent>\n</Carousel>\nCopy\nResponsive\n<Carousel>\n  <CarouselContent className=\"-ml-2 md:-ml-4\">\n    <CarouselItem className=\"pl-2 md:pl-4\">...</CarouselItem>\n    <CarouselItem className=\"pl-2 md:pl-4\">...</CarouselItem>\n    <CarouselItem className=\"pl-2 md:pl-4\">...</CarouselItem>\n  </CarouselContent>\n</Carousel>\nCopy\nOrientation\n\nUse the orientation prop to set the orientation of the carousel.\n\nPreview\nCode\nStyle:\nCopy\n1\n2\n3\n4\n5\nPrevious slide\nNext slide\n<Carousel orientation=\"vertical | horizontal\">\n  <CarouselContent>\n    <CarouselItem>...</CarouselItem>\n    <CarouselItem>...</CarouselItem>\n    <CarouselItem>...</CarouselItem>\n  </CarouselContent>\n</Carousel>\nCopy\nOptions\n\nYou can pass options to the carousel using the opts prop. See the Embla Carousel docs for more information.\n\n<Carousel\n  opts={{\n    align: \"start\",\n    loop: true,\n  }}\n>\n  <CarouselContent>\n    <CarouselItem>...</CarouselItem>\n    <CarouselItem>...</CarouselItem>\n    <CarouselItem>...</CarouselItem>\n  </CarouselContent>\n</Carousel>\nCopy\nAPI\n\nUse a state and the setApi props to get an instance of the carousel API.\n\nPreview\nCode\nStyle:\nCopy\n1\n2\n3\n4\n5\nPrevious slide\nNext slide\nSlide 0 of 0\nimport { type CarouselApi } from \"@/components/ui/carousel\"\n \nexport function Example() {\n  const [api, setApi] = React.useState<CarouselApi>()\n  const [current, setCurrent] = React.useState(0)\n  const [count, setCount] = React.useState(0)\n \n  React.useEffect(() => {\n    if (!api) {\n      return\n    }\n \n    setCount(api.scrollSnapList().length)\n    setCurrent(api.selectedScrollSnap() + 1)\n \n    api.on(\"select\", () => {\n      setCurrent(api.selectedScrollSnap() + 1)\n    })\n  }, [api])\n \n  return (\n    <Carousel setApi={setApi}>\n      <CarouselContent>\n        <CarouselItem>...</CarouselItem>\n        <CarouselItem>...</CarouselItem>\n        <CarouselItem>...</CarouselItem>\n      </CarouselContent>\n    </Carousel>\n  )\n}\nCopy\nEvents\n\nYou can listen to events using the api instance from setApi.\n\nimport { type CarouselApi } from \"@/components/ui/carousel\"\n \nexport function Example() {\n  const [api, setApi] = React.useState<CarouselApi>()\n \n  React.useEffect(() => {\n    if (!api) {\n      return\n    }\n \n    api.on(\"select\", () => {\n      // Do something on select.\n    })\n  }, [api])\n \n  return (\n    <Carousel setApi={setApi}>\n      <CarouselContent>\n        <CarouselItem>...</CarouselItem>\n        <CarouselItem>...</CarouselItem>\n        <CarouselItem>...</CarouselItem>\n      </CarouselContent>\n    </Carousel>\n  )\n}\nCopy\n\nSee the Embla Carousel docs for more information on using events.\n\nPlugins\n\nYou can use the plugins prop to add plugins to the carousel.\n\nimport Autoplay from \"embla-carousel-autoplay\"\n \nexport function Example() {\n  return (\n    <Carousel\n      plugins={[\n        Autoplay({\n          delay: 2000,\n        }),\n      ]}\n    >\n      // ...\n    </Carousel>\n  )\n}\nCopy\nPreview\nCode\nStyle:\nCopy\n1\n2\n3\n4\n5\nPrevious slide\nNext slide\n\nSee the Embla Carousel docs for more information on using plugins.\n\nCard\nCheckbox\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Card - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/card",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nCard\nCard\n\nDisplays a card with header, content, and footer.\n\nPreview\nCode\nStyle:\nEdit in\nCopy\nCreate project\n\nDeploy your new project in one-click.\n\nName\nFramework\nSelect\nCancel\nDeploy\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add card\nCopy\nUsage\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nCopy\n<Card>\n  <CardHeader>\n    <CardTitle>Card Title</CardTitle>\n    <CardDescription>Card Description</CardDescription>\n  </CardHeader>\n  <CardContent>\n    <p>Card Content</p>\n  </CardContent>\n  <CardFooter>\n    <p>Card Footer</p>\n  </CardFooter>\n</Card>\nCopy\nExamples\nPreview\nCode\nStyle:\nEdit in\nCopy\nNotifications\n\nYou have 3 unread messages.\n\nPush Notifications\n\nSend notifications to device.\n\nYour call has been confirmed.\n\n1 hour ago\n\nYou have a new message!\n\n1 hour ago\n\nYour subscription is expiring soon!\n\n2 hours ago\n\nMark all as read\nCalendar\nCarousel\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Calendar - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/calendar",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nCalendar\nCalendar\n\nA date field component that allows users to enter and edit date.\n\nDocs\nPreview\nCode\nStyle:\nCopy\nJune 2024\nSu\nMo\nTu\nWe\nTh\nFr\nSa\n26\n27\n28\n29\n30\n31\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n1\n2\n3\n4\n5\n6\nAbout\n\nThe Calendar component is built on top of React DayPicker.\n\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add calendar\nCopy\nUsage\nimport { Calendar } from \"@/components/ui/calendar\"\nCopy\nconst [date, setDate] = React.useState<Date | undefined>(new Date())\n \nreturn (\n  <Calendar\n    mode=\"single\"\n    selected={date}\n    onSelect={setDate}\n    className=\"rounded-md border\"\n  />\n)\nCopy\n\nSee the React DayPicker documentation for more information.\n\nDate Picker\n\nYou can use the <Calendar> component to build a date picker. See the Date Picker page for more information.\n\nExamples\nForm\nPreview\nCode\nStyle:\nCopy\nDate of birth\nPick a date\n\nYour date of birth is used to calculate your age.\n\nSubmit\nButton\nCard\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Button - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/button",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nButton\nButton\n\nDisplays a button or a component that looks like a button.\n\nPreview\nCode\nStyle:\nEdit in\nCopy\nButton\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add button\nCopy\nUsage\nimport { Button } from \"@/components/ui/button\"\nCopy\n<Button variant=\"outline\">Button</Button>\nCopy\nLink\n\nYou can use the buttonVariants helper to create a link that looks like a button.\n\nimport { buttonVariants } from \"@/components/ui/button\"\nCopy\n<Link className={buttonVariants({ variant: \"outline\" })}>Click here</Link>\nCopy\n\nAlternatively, you can set the asChild parameter and nest the link component.\n\n<Button asChild>\n  <Link href=\"/login\">Login</Link>\n</Button>\nCopy\nExamples\nPrimary\nPreview\nCode\nStyle:\nEdit in\nCopy\nButton\nSecondary\nPreview\nCode\nStyle:\nEdit in\nCopy\nSecondary\nDestructive\nPreview\nCode\nStyle:\nEdit in\nCopy\nDestructive\nOutline\nPreview\nCode\nStyle:\nEdit in\nCopy\nOutline\nGhost\nPreview\nCode\nStyle:\nEdit in\nCopy\nGhost\nLink\nPreview\nCode\nStyle:\nEdit in\nCopy\nLink\nIcon\nPreview\nCode\nStyle:\nEdit in\nCopy\nWith Icon\nPreview\nCode\nStyle:\nEdit in\nCopy\nLogin with Email\nLoading\nPreview\nCode\nStyle:\nEdit in\nCopy\nPlease wait\nAs Child\nPreview\nCode\nStyle:\nEdit in\nCopy\nLogin\nBreadcrumb\nCalendar\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Breadcrumb - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/breadcrumb",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nBreadcrumb\nBreadcrumb\n\nDisplays the path to the current resource using a hierarchy of links.\n\nPreview\nCode\nStyle:\nEdit in\nCopy\nHome\nMore\nToggle menu\nComponents\nBreadcrumb\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add breadcrumb\nCopy\nUsage\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@/components/ui/breadcrumb\"\nCopy\n<Breadcrumb>\n  <BreadcrumbList>\n    <BreadcrumbItem>\n      <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n    </BreadcrumbItem>\n    <BreadcrumbSeparator />\n    <BreadcrumbItem>\n      <BreadcrumbLink href=\"/components\">Components</BreadcrumbLink>\n    </BreadcrumbItem>\n    <BreadcrumbSeparator />\n    <BreadcrumbItem>\n      <BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n    </BreadcrumbItem>\n  </BreadcrumbList>\n</Breadcrumb>\nCopy\nExamples\nCustom separator\n\nUse a custom component as children for <BreadcrumbSeparator /> to create a custom separator.\n\nPreview\nCode\nStyle:\nEdit in\nCopy\nHome\nComponents\nBreadcrumb\nimport { Slash } from \"lucide-react\"\n \n...\n \n<Breadcrumb>\n  <BreadcrumbList>\n    <BreadcrumbItem>\n      <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n    </BreadcrumbItem>\n    <BreadcrumbSeparator>\n      <Slash />\n    </BreadcrumbSeparator>\n    <BreadcrumbItem>\n      <BreadcrumbLink href=\"/components\">Components</BreadcrumbLink>\n    </BreadcrumbItem>\n  </BreadcrumbList>\n</Breadcrumb>\nCopy\nDropdown\n\nYou can compose <BreadcrumbItem /> with a <DropdownMenu /> to create a dropdown in the breadcrumb.\n\nPreview\nCode\nStyle:\nEdit in\nCopy\nHome\nComponents\nBreadcrumb\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\n \n...\n \n<BreadcrumbItem>\n  <DropdownMenu>\n    <DropdownMenuTrigger className=\"flex items-center gap-1\">\n      Components\n      <ChevronDownIcon />\n    </DropdownMenuTrigger>\n    <DropdownMenuContent align=\"start\">\n      <DropdownMenuItem>Documentation</DropdownMenuItem>\n      <DropdownMenuItem>Themes</DropdownMenuItem>\n      <DropdownMenuItem>GitHub</DropdownMenuItem>\n    </DropdownMenuContent>\n  </DropdownMenu>\n</BreadcrumbItem>\nCopy\nCollapsed\n\nWe provide a <BreadcrumbEllipsis /> component to show a collapsed state when the breadcrumb is too long.\n\nPreview\nCode\nStyle:\nEdit in\nCopy\nHome\nMore\nComponents\nBreadcrumb\nimport { BreadcrumbEllipsis } from \"@/components/ui/breadcrumb\"\n \n...\n \n<Breadcrumb>\n  <BreadcrumbList>\n    {/* ... */}\n    <BreadcrumbItem>\n      <BreadcrumbEllipsis />\n    </BreadcrumbItem>\n    {/* ... */}\n  </BreadcrumbList>\n</Breadcrumb>\nCopy\nLink component\n\nTo use a custom link component from your routing library, you can use the asChild prop on <BreadcrumbLink />.\n\nPreview\nCode\nStyle:\nEdit in\nCopy\nHome\nComponents\nBreadcrumb\nimport { Link } from \"next/link\"\n \n...\n \n<Breadcrumb>\n  <BreadcrumbList>\n    <BreadcrumbItem>\n      <BreadcrumbLink asChild>\n        <Link href=\"/\">Home</Link>\n      </BreadcrumbLink>\n    </BreadcrumbItem>\n    {/* ... */}\n  </BreadcrumbList>\n</Breadcrumb>\nCopy\nResponsive\n\nHere's an example of a responsive breadcrumb that composes <BreadcrumbItem /> with <BreadcrumbEllipsis />, <DropdownMenu />, and <Drawer />.\n\nIt displays a dropdown on desktop and a drawer on mobile.\n\nPreview\nCode\nStyle:\nEdit in\nCopy\nHome\nMore\nData Fetching\nCaching and Revalidating\nBadge\nButton\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Badge - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/badge",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nBadge\nBadge\n\nDisplays a badge or a component that looks like a badge.\n\nPreview\nCode\nStyle:\nEdit in\nCopy\nBadge\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add badge\nCopy\nUsage\nimport { Badge } from \"@/components/ui/badge\"\nCopy\n<Badge variant=\"outline\">Badge</Badge>\nCopy\nLink\n\nYou can use the badgeVariants helper to create a link that looks like a badge.\n\nimport { badgeVariants } from \"@/components/ui/badge\"\nCopy\n<Link className={badgeVariants({ variant: \"outline\" })}>Badge</Link>\nCopy\nExamples\nDefault\nPreview\nCode\nStyle:\nEdit in\nCopy\nBadge\nSecondary\nPreview\nCode\nStyle:\nEdit in\nCopy\nSecondary\nOutline\nPreview\nCode\nStyle:\nEdit in\nCopy\nOutline\nDestructive\nPreview\nCode\nStyle:\nEdit in\nCopy\nDestructive\nAvatar\nBreadcrumb\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Avatar - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/avatar",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nAvatar\nAvatar\n\nAn image element with a fallback for representing the user.\n\nDocs\nAPI Reference\nPreview\nCode\nStyle:\nDefault\nEdit in\nCopy\nLoading...\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add avatar\nCopy\nUsage\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nCopy\n<Avatar>\n  <AvatarImage src=\"https://github.com/shadcn.png\" />\n  <AvatarFallback>CN</AvatarFallback>\n</Avatar>\nCopy\nAspect Ratio\nBadge\n\nOn This Page\n\nInstallation\nUsage\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Aspect Ratio - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/aspect-ratio",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nAspect Ratio\nAspect Ratio\n\nDisplays content within a desired ratio.\n\nDocs\nAPI Reference\nPreview\nCode\nStyle:\nDefault\nCopy\nLoading...\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add aspect-ratio\nCopy\nUsage\nimport Image from \"next/image\"\n \nimport { AspectRatio } from \"@/components/ui/aspect-ratio\"\nCopy\n<div className=\"w-[450px]\">\n  <AspectRatio ratio={16 / 9}>\n    <Image src=\"...\" alt=\"Image\" className=\"rounded-md object-cover\" />\n  </AspectRatio>\n</div>\nCopy\nAlert Dialog\nAvatar\n\nOn This Page\n\nInstallation\nUsage\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Alert Dialog - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/alert-dialog",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nAlert Dialog\nAlert Dialog\n\nA modal dialog that interrupts the user with important content and expects a response.\n\nDocs\nAPI Reference\nPreview\nCode\nStyle:\nDefault\nEdit in\nCopy\nLoading...\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add alert-dialog\nCopy\nUsage\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\"\nCopy\n<AlertDialog>\n  <AlertDialogTrigger>Open</AlertDialogTrigger>\n  <AlertDialogContent>\n    <AlertDialogHeader>\n      <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n      <AlertDialogDescription>\n        This action cannot be undone. This will permanently delete your account\n        and remove your data from our servers.\n      </AlertDialogDescription>\n    </AlertDialogHeader>\n    <AlertDialogFooter>\n      <AlertDialogCancel>Cancel</AlertDialogCancel>\n      <AlertDialogAction>Continue</AlertDialogAction>\n    </AlertDialogFooter>\n  </AlertDialogContent>\n</AlertDialog>\nCopy\nAlert\nAspect Ratio\n\nOn This Page\n\nInstallation\nUsage\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Alert - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/alert",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nAlert\nAlert\n\nDisplays a callout for user attention.\n\nPreview\nCode\nStyle:\nDefault\nEdit in\nCopy\nLoading...\nInstallation\nCLI\nManual\nnpx shadcn-ui@latest add alert\nCopy\nUsage\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\"\nCopy\n<Alert>\n  <Terminal className=\"h-4 w-4\" />\n  <AlertTitle>Heads up!</AlertTitle>\n  <AlertDescription>\n    You can add components and dependencies to your app using the cli.\n  </AlertDescription>\n</Alert>\nCopy\nExamples\nDefault\nPreview\nCode\nStyle:\nDefault\nEdit in\nCopy\nLoading...\nDestructive\nPreview\nCode\nStyle:\nDefault\nEdit in\nCopy\nLoading...\nAccordion\nAlert Dialog\n\nOn This Page\n\nInstallation\nUsage\nExamples\nDefault\nDestructive\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Typography - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/typography",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nTypography\nTypography\n\nStyles for headings, paragraphs, lists...etc\n\nPreview\nCode\nStyle:\nEdit in\nCopy\nThe Joke Tax Chronicles\n\nOnce upon a time, in a far-off land, there was a very lazy king who spent all day lounging on his throne. One day, his advisors came to him with a problem: the kingdom was running out of money.\n\nThe King's Plan\n\nThe king thought long and hard, and finally came up with a brilliant plan: he would tax the jokes in the kingdom.\n\n\"After all,\" he said, \"everyone enjoys a good joke, so it's only fair that they should pay for the privilege.\"\nThe Joke Tax\n\nThe king's subjects were not amused. They grumbled and complained, but the king was firm:\n\n1st level of puns: 5 gold coins\n2nd level of jokes: 10 gold coins\n3rd level of one-liners : 20 gold coins\n\nAs a result, people stopped telling jokes, and the kingdom fell into a gloom. But there was one person who refused to let the king's foolishness get him down: a court jester named Jokester.\n\nJokester's Revolt\n\nJokester began sneaking into the castle in the middle of the night and leaving jokes all over the place: under the king's pillow, in his soup, even in the royal toilet. The king was furious, but he couldn't seem to stop Jokester.\n\nAnd then, one day, the people of the kingdom discovered that the jokes left by Jokester were so funny that they couldn't help but laugh. And once they started laughing, they couldn't stop.\n\nThe People's Rebellion\n\nThe people of the kingdom, feeling uplifted by the laughter, started to tell jokes and puns again, and soon the entire kingdom was in on the joke.\n\nKing's Treasury\tPeople's happiness\nEmpty\tOverflowing\nModest\tSatisfied\nFull\tEcstatic\n\nThe king, seeing how much happier his subjects were, realized the error of his ways and repealed the joke tax. Jokester was declared a hero, and the kingdom lived happily ever after.\n\nThe moral of the story is: never underestimate the power of a good laugh and always be careful of bad ideas.\n\nh1\nPreview\nCode\nStyle:\nCopy\nTaxing Laughter: The Joke Tax Chronicles\nh2\nPreview\nCode\nStyle:\nCopy\nThe People of the Kingdom\nh3\nPreview\nCode\nStyle:\nCopy\nThe Joke Tax\nh4\nPreview\nCode\nStyle:\nCopy\nPeople stopped telling jokes\np\nPreview\nCode\nStyle:\nCopy\n\nThe king, seeing how much happier his subjects were, realized the error of his ways and repealed the joke tax.\n\nblockquote\nPreview\nCode\nStyle:\nCopy\n\"After all,\" he said, \"everyone enjoys a good joke, so it's only fair that they should pay for the privilege.\"\ntable\nPreview\nCode\nStyle:\nCopy\nKing's Treasury\tPeople's happiness\nEmpty\tOverflowing\nModest\tSatisfied\nFull\tEcstatic\nlist\nPreview\nCode\nStyle:\nCopy\n1st level of puns: 5 gold coins\n2nd level of jokes: 10 gold coins\n3rd level of one-liners : 20 gold coins\nInline code\nPreview\nCode\nStyle:\nCopy\n@radix-ui/react-alert-dialog\nLead\nPreview\nCode\nStyle:\nCopy\n\nA modal dialog that interrupts the user with important content and expects a response.\n\nLarge\nPreview\nCode\nStyle:\nCopy\nAre you absolutely sure?\nSmall\nPreview\nCode\nStyle:\nCopy\nEmail address\nMuted\nPreview\nCode\nStyle:\nCopy\n\nEnter your email address.\n\nCLI\nFigma\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Accordion - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/accordion",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nAccordion\nAccordion\n\nA vertically stacked set of interactive headings that each reveal a section of content.\n\nDocs\nAPI Reference\nPreview\nCode\nStyle:\nDefault\nEdit in\nCopy\nLoading...\nInstallation\nCLI\nManual\nRun the following command:\nnpx shadcn-ui@latest add accordion\nCopy\nUpdate tailwind.config.js\n\nAdd the following animations to your tailwind.config.js file:\n\ntailwind.config.js\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  theme: {\n    extend: {\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n}\nCopy\nUsage\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\"\nCopy\n<Accordion type=\"single\" collapsible>\n  <AccordionItem value=\"item-1\">\n    <AccordionTrigger>Is it accessible?</AccordionTrigger>\n    <AccordionContent>\n      Yes. It adheres to the WAI-ARIA design pattern.\n    </AccordionContent>\n  </AccordionItem>\n</Accordion>\nCopy\nChangelog\nAlert\n\nOn This Page\n\nInstallation\nUsage\n\nBuilt by shadcn. The source code is available on GitHub."
  },
  {
    "title": "Accordion - shadcn/ui",
    "url": "https://ui.shadcn.com/docs/components/accordion",
    "html": "shadcn/ui\nDocs\nComponents\nThemes\nExamples\nBlocks\nGitHub\nSearch documentation...\n⌘\nK\nGitHub\nTwitter\nToggle theme\nGetting Started\nIntroduction\nInstallation\ncomponents.json\nTheming\nDark mode\nCLI\nTypography\nFigma\nChangelog\nComponents\nAccordion\nAlert\nAlert Dialog\nAspect Ratio\nAvatar\nBadge\nBreadcrumb\nNew\nButton\nCalendar\nCard\nCarousel\nCheckbox\nCollapsible\nCombobox\nCommand\nContext Menu\nData Table\nDate Picker\nDialog\nDrawer\nDropdown Menu\nForm\nHover Card\nInput\nInput OTP\nNew\nLabel\nMenubar\nNavigation Menu\nPagination\nPopover\nProgress\nRadio Group\nResizable\nScroll Area\nSelect\nSeparator\nSheet\nSkeleton\nSlider\nSonner\nSwitch\nTable\nTabs\nTextarea\nToast\nToggle\nToggle Group\nTooltip\nDocs\nAccordion\nAccordion\n\nA vertically stacked set of interactive headings that each reveal a section of content.\n\nDocs\nAPI Reference\nPreview\nCode\nStyle:\nEdit in\nCopy\nIs it accessible?\nIs it styled?\nIs it animated?\nInstallation\nCLI\nManual\nRun the following command:\nnpx shadcn-ui@latest add accordion\nCopy\nUpdate tailwind.config.js\n\nAdd the following animations to your tailwind.config.js file:\n\ntailwind.config.js\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  theme: {\n    extend: {\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n}\nCopy\nUsage\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\"\nCopy\n<Accordion type=\"single\" collapsible>\n  <AccordionItem value=\"item-1\">\n    <AccordionTrigger>Is it accessible?</AccordionTrigger>\n    <AccordionContent>\n      Yes. It adheres to the WAI-ARIA design pattern.\n    </AccordionContent>\n  </AccordionItem>\n</Accordion>\nCopy\nChangelog\nAlert\n\nBuilt by shadcn. The source code is available on GitHub."
  }
]