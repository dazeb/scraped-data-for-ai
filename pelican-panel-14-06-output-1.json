[
  {
    "title": "Pelican",
    "url": "https://pelican.dev/docs/panel/advanced/redis/",
    "html": "Skip to main content\nPelican\nInstall\nBlog\nDonate\nNewsletter\nFAQ\nWelcome to Pelican!\nPanel\nGetting Started\nWebserver Configuration\nConfiguration Options\nUpdating the Panel\nAdvanced\nRedis\nMySQL\nWings\nGuides\nTroubleshooting\nWhat is ...?\nPanelAdvancedRedis\nRedis\nInstall Redis​\n\nTo install Redis you first need add their repository.\n\ncurl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\necho \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n\n\nNow you can install Redis by simply running the following commands.\n\nsudo apt update -y\nsudo apt install -y redis-server\n\n\nAlso make sure to enable that redis will start on boot. You can do that by running the following command:\n\nsudo systemctl enable --now redis-server\n\nSetup Pelican for Redis​\nUse Redis as driver​\n\nRun the following commands and choose redis for the drivers you want. For all other options you can simply hit Enter to use the current selected values.\n\nWhen asked if you want to overwrite the queue worker file answer with yes.\n\ncd /var/www/pelican\nphp artisan p:environment:setup\n\nEdit this page\nPrevious\nUpdating the Panel\nNext\nMySQL\nInstall Redis\nSetup Pelican for Redis\nUse Redis as driver\nDocumentation\nPanel\nWings\nSSL Setup\nCommunity\nDiscord\nBlog\nGitHub\nCopyright © 2024 Pelican"
  },
  {
    "title": "Pelican",
    "url": "https://pelican.dev/docs/panel/advanced/mysql/",
    "html": "Skip to main content\nPelican\nInstall\nBlog\nDonate\nNewsletter\nFAQ\nWelcome to Pelican!\nPanel\nGetting Started\nWebserver Configuration\nConfiguration Options\nUpdating the Panel\nAdvanced\nRedis\nMySQL\nWings\nGuides\nTroubleshooting\nWhat is ...?\nPanelAdvancedMySQL\nMySQL\nInstall MariaDB​\n\nMariaDB is a MySQL fork and the preferred MySQL software. Run the following commands to quickly install it.\n\ncurl -sS https://downloads.mariadb.com/MariaDB/mariadb_repo_setup | sudo bash\nsudo apt install -y mariadb-server \n\nCreate User & Database​\nLogging In​\n\nAfter installing you want to login to the MySQL command line where we will be executing statements to get things setup. To do so, simply run the command below and provide the Root MySQL account's password that you setup when installing MySQL. If you do not remember doing this, chances are you can just hit enter as no password is set.\n\nmysql -u root -p\n\nCreating User​\n\nNext, we will create a user called pelican and allow logins from localhost which prevents any external connections to our database. You can also use % as a wildcard or enter a numeric IP. We will also set the account password to somePassword.\n\nCREATE USER 'pelican'@'127.0.0.1' IDENTIFIED BY 'somePassword';\n\nCreating Database​\n\nNext, we need to create a database for the panel. In this tutorial we will be naming the database panel, but you can substitute that for whatever name you wish.\n\nCREATE DATABASE panel;\n\nAssigning Permissions​\n\nFinally, we need to tell MySQL that our pelican user should have access to the panel database. To do this, simply run the command below.\n\nGRANT ALL PRIVILEGES ON panel.* TO 'pelican'@'127.0.0.1';\n\nSetup Pelican for MySQL​\n\nAfter you created the user and database you can run the database setup command to use MySQL for Pelican.\n\ncd /var/www/pelican\nphp artisan p:environment:database\n\nEdit this page\nPrevious\nRedis\nNext\nInstalling Wings\nInstall MariaDB\nCreate User & Database\nLogging In\nCreating User\nCreating Database\nAssigning Permissions\nSetup Pelican for MySQL\nDocumentation\nPanel\nWings\nSSL Setup\nCommunity\nDiscord\nBlog\nGitHub\nCopyright © 2024 Pelican"
  },
  {
    "title": "Pelican",
    "url": "https://pelican.dev/docs/panel/update/",
    "html": "Skip to main content\nPelican\nInstall\nBlog\nDonate\nNewsletter\nFAQ\nWelcome to Pelican!\nPanel\nGetting Started\nWebserver Configuration\nConfiguration Options\nUpdating the Panel\nAdvanced\nWings\nGuides\nTroubleshooting\nWhat is ...?\nPanelUpdating the Panel\nUpdating the Panel\n\nThis documentation covers the process for updating the panel portion of Pelican.\n\nVersion Requirements​\n\nEach version of Pelican Panel also has a corresponding minimum version of Wings that is required for it to run.\n\nPlease see the chart below for how these versions line up. In most cases your base Wings version should match that of your Panel.\n\nPanel Version\tWings Version\tSupported\tPHP Version\n3.x\t3.x\t✅︎\t8.2/ 8.3\nEnter Maintenance Mode​\n\nWhenever you are performing an update you should be sure to place your Panel into maintenance mode. This will prevent users from encountering unexpected errors.\n\ncd /var/www/pelican\nphp artisan down\n\nDownload Update​\n\nThe first step in the update process is to download the new panel files from GitHub. The command below will download the release archive for the most recent version of Pelican, save it in the current directory and will automatically unpack the archive into your current folder.\n\ncurl -L https://github.com/pelican-dev/panel/releases/latest/download/panel.tar.gz | tar -xzv\n\n\nOnce the zip is downloaded and extracted we need to set the correct permissions on the cache and storage directories to avoid any webserver related errors.\n\nchmod -R 755 storage/* bootstrap/cache\n\nUpdate Dependencies​\ncomposer install --no-dev --optimize-autoloader\n\nClear Compiled Template Cache​\n\nYou'll also want to clear the compiled template cache to ensure that new and modified templates show up correctly for users.\n\nphp artisan view:clear\nphp artisan config:clear\n\nUpdate Database​\n\nYou'll also need to update your database schema. Running the command below will update the schema and ensure the default eggs we ship are up to date (and add any new ones we might have). Just remember, never edit core eggs we ship! They will be overwritten by this update process.\n\nphp artisan migrate --seed --force\n\nSet Permissions​\n\nThe last step is to set proper ownership of the files. In most cases this is www-data but can vary from system to system — sometimes being nginx, caddy, apache, or even nobody.\n\nNGINX/Apache\nRocky Linux NGINX\nRocky Linux Apache\nchown -R www-data:www-data /var/www/pelican/* \n\nRestart Queue Workers​\n\nAfter every update you should restart the queue worker.\n\nphp artisan queue:restart\n\nExit Maintenance Mode​\n\nNow that everything has been updated you need to exit maintenance mode.\n\nphp artisan up\n\nEdit this page\nPrevious\nConfiguration Options\nNext\nRedis\nVersion Requirements\nEnter Maintenance Mode\nDownload Update\nUpdate Dependencies\nClear Compiled Template Cache\nUpdate Database\nSet Permissions\nRestart Queue Workers\nExit Maintenance Mode\nDocumentation\nPanel\nWings\nSSL Setup\nCommunity\nDiscord\nBlog\nGitHub\nCopyright © 2024 Pelican"
  },
  {
    "title": "Configuration Options | Pelican",
    "url": "https://pelican.dev/docs/panel/config/",
    "html": "Skip to main content\nPelican\nInstall\nBlog\nDonate\nNewsletter\nFAQ\nWelcome to Pelican!\nPanel\nGetting Started\nWebserver Configuration\nConfiguration Options\nUpdating the Panel\nAdvanced\nWings\nGuides\nTroubleshooting\nWhat is ...?\nPanelConfiguration Options\nConfiguration Options\nBackups​\n\nPelican allows users to create backups of their servers. In order to create backups, a backup storage method has to be configured.\n\nWhen changing Pelican's backup storage method, users may still download or delete existing backups from the prior storage driver. In the instance of migrating from S3 to local backups, S3 credentials must remain configured after switching to the local backup storage method.\n\nMake sure to clear the config cache (cd /var/www/pelican && php artisan config:clear) and to restart the queue worker (systemctl restart pelican) after changing the backup driver to apply the changes.\n\nUsing Local Backups​\n\nBy default, Pelican uses local storage via Wings for backups. That said, this method of backup storage can be explicitly set with the following configuration in the .env file:\n\nAPP_BACKUP_DRIVER=daemon\n\n\nPlease note that, when using local storage via Wings, the destination for backups is set in the Wings config file with the following setting key:\n\nsystem:\n\n  backup_directory: /path/to/backup/storage\n\nUsing S3 Backups​\n\nAWS S3 (or compatible storage) can be used to store remote or cloud-based backups. The following configuration options have to be set in the .env file or as environment variables in order to enable it:\n\n# Sets your panel to use s3 for backups\nAPP_BACKUP_DRIVER=s3\n\n# Info to connect to AWS S3\nAWS_DEFAULT_REGION=\nAWS_ACCESS_KEY_ID=\nAWS_SECRET_ACCESS_KEY=\nAWS_BACKUPS_BUCKET=\nAWS_ENDPOINT=\n\n\nFor some configurations, you might have to change your S3 URL from bucket.domain.com to domain.com/bucket. To accomplish this, add AWS_USE_PATH_STYLE_ENDPOINT=true to your .env file.\n\nMultipart Upload​\n\nThe S3 backup is using the S3 multipart upload capabilities. In rare situations, you might want to adjust the size of a single part or the lifespan of the generated pre-signed URLs. The default part size is 5GB, and the default pre-signed URL lifespan is 60 minutes.\n\nYou can configure the maximal part size using the BACKUP_MAX_PART_SIZE environment variable. You must specify the size in bytes. To define the pre-signed URL lifespan, use the BACKUP_PRESIGNED_URL_LIFESPAN variable. The expected unit is minutes.\n\nThe following .env snippet configures 1GB parts and uses 120 minutes as the pre-signed URL lifespan:\n\nBACKUP_MAX_PART_SIZE=1073741824\nBACKUP_PRESIGNED_URL_LIFESPAN=120\n\nStorage Class​\n\nShould you need to specify a storage class, use the AWS_BACKUPS_STORAGE_CLASS environment variable. Default option is STANDARD (S3 Standard).\n\nAWS_BACKUPS_STORAGE_CLASS=\n\nReverse Proxy Setup​\n\nWhen running Pelican behind a reverse proxy, such as Cloudflare's Flexible SSL or NGINX/Apache/Caddy, etc., you will need to make a quick modification to the Panel to ensure things continue to work as expected. By default, when using these reverse proxies, your Panel will not correctly handle requests. You'll most likely be unable to login or see security warnings in your browser console as it attempts to load insecure assets. This is because the internal logic the Panel uses to determine how links should be generated thinks it is running over HTTP and not over HTTPS.\n\nYou will need to edit the .env file in the Panel's root directory to contain TRUSTED_PROXIES=* at minimum. We highly suggest providing a specific IP address (or comma-separated list of IPs) rather than allowing *. For example, if your proxy is running on the same machine as the server, the chances are that something like TRUSTED_PROXIES=127.0.0.1 will work for you.\n\nNGINX Specific Configuration​\n\nTo properly respond to an NGINX reverse proxy, the NGINX location config must contain the following lines:\n\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header Host $host;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\nproxy_set_header X-Forwarded-Proto $scheme;\nproxy_redirect off;\nproxy_buffering off;\nproxy_request_buffering off;\n\nCloudflare Specific Configuration​\n\nIf you're using Cloudflare's Flexible SSL you should set TRUSTED_PROXIES to contain their IP addresses. Below is an example of how to set this.\n\nTRUSTED_PROXIES=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/13,104.24.0.0/14,172.64.0.0/13,131.0.72.0/22\n\nDisabling recaptcha​\n\nIf you cannot access your panel, you can modify the database directly using the following commands.\n\nmysql -u root -p\nUPDATE panel.settings SET value = 'false' WHERE `key` = 'settings::recaptcha:enabled';\n\n2FA​\n\nIf possible you should use the panel to update your 2FA settings. If you can't access your panel for what ever reason you can use the following steps.\n\nDisable 2FA requirement​\nmysql -u root -p\nUPDATE panel.settings SET value = 0 WHERE `key` = 'settings::pelican:auth:2fa_required';\n\nDisable 2FA for a specific user​\n\nRun the following command in your /var/www/pelican directory.\n\nphp artisan p:user:disable2fa\n\nEdit this page\nPrevious\nWebserver Configuration\nNext\nUpdating the Panel\nBackups\nUsing Local Backups\nUsing S3 Backups\nReverse Proxy Setup\nNGINX Specific Configuration\nCloudflare Specific Configuration\n2FA\nDisable 2FA requirement\nDisable 2FA for a specific user\nDocumentation\nPanel\nWings\nSSL Setup\nCommunity\nDiscord\nBlog\nGitHub\nCopyright © 2024 Pelican"
  },
  {
    "title": "Webserver Configuration | Pelican",
    "url": "https://pelican.dev/docs/panel/webserver-config/",
    "html": "Skip to main content\nPelican\nInstall\nBlog\nDonate\nNewsletter\nFAQ\nWelcome to Pelican!\nPanel\nGetting Started\nWebserver Configuration\nConfiguration Options\nUpdating the Panel\nAdvanced\nWings\nGuides\nTroubleshooting\nWhat is ...?\nPanelWebserver Configuration\nWebserver Configuration\nINFO\n\nWhen using the SSL (https) configuration you MUST create SSL certificates, otherwise your webserver will fail to start. See the Creating SSL Certificates documentation page to learn how to create these certificates before continuing.\n\nNginx\nApache\nCaddy\nPHP & FPM\n\nIf you're not using php8.3, you will need to edit the config file to point to the proper php fpm socket.\n\nThe line is highlighted below.\n\nFirst, remove the default NGINX configuration.\n\nrm /etc/nginx/sites-enabled/default\n\n\nNow, you should paste the contents of the file below, replacing <domain> with your domain or IP being used in a file called pelican.conf and place the file in /etc/nginx/sites-available/.\n\nhttps\nhttp\nWARNING\n\nNote: IPs cannot be used with SSL.\n\n/etc/nginx/sites-available/pelican.conf\nserver_tokens off;\n\nserver {\n    listen 80;\n\n    server_name <domain>;\n\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n\n    server_name <domain>;\n\n\n    root /var/www/pelican/public;\n    index index.php;\n\n    access_log /var/log/nginx/pelican.app-access.log;\n    error_log  /var/log/nginx/pelican.app-error.log error;\n\n    # allow larger file uploads and longer script runtimes\n    client_max_body_size 100m;\n    client_body_timeout 120s;\n\n    sendfile off;\n\n\n    ssl_certificate /etc/letsencrypt/live/<domain>/fullchain.pem;\n\n    ssl_certificate_key /etc/letsencrypt/live/<domain>/privkey.pem;\n\n    ssl_session_cache shared:SSL:10m;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers \"ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384\";\n    ssl_prefer_server_ciphers on;\n\n    # See https://hstspreload.org/ before uncommenting the line below.\n    # add_header Strict-Transport-Security \"max-age=15768000; preload;\";\n    add_header X-Content-Type-Options nosniff;\n    add_header X-XSS-Protection \"1; mode=block\";\n    add_header X-Robots-Tag none;\n    add_header Content-Security-Policy \"frame-ancestors 'self'\";\n    add_header X-Frame-Options DENY;\n    add_header Referrer-Policy same-origin;\n\n    location / {\n        try_files $uri $uri/ /index.php?$query_string;\n    }\n\n    location ~ \\.php$ {\n        fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n\n        fastcgi_pass unix:/run/php/php8.3-fpm.sock;\n\n        fastcgi_index index.php;\n        include fastcgi_params;\n        fastcgi_param PHP_VALUE \"upload_max_filesize = 100M \\n post_max_size=100M\";\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        fastcgi_param HTTP_PROXY \"\";\n        fastcgi_intercept_errors off;\n        fastcgi_buffer_size 16k;\n        fastcgi_buffers 4 16k;\n        fastcgi_connect_timeout 300;\n        fastcgi_send_timeout 300;\n        fastcgi_read_timeout 300;\n        include /etc/nginx/fastcgi_params;\n    }\n\n    location ~ /\\.ht {\n        deny all;\n    }\n}\n\nEnabling Configuration​\n\nThe final step is to enable your NGINX configuration and restart it.\n\nsudo ln -s /etc/nginx/sites-available/pelican.conf /etc/nginx/sites-enabled/pelican.conf\n\nYou need to restart nginx to load the new config file.​\nsudo systemctl restart nginx\n\nEdit this page\nPrevious\nGetting Started\nNext\nConfiguration Options\nEnabling Configuration\nEnabling Configuration\nDocumentation\nPanel\nWings\nSSL Setup\nCommunity\nDiscord\nBlog\nGitHub\nCopyright © 2024 Pelican"
  },
  {
    "title": "Pelican",
    "url": "https://pelican.dev/docs/panel/getting-started/",
    "html": "Skip to main content\nPelican\nInstall\nBlog\nDonate\nNewsletter\nFAQ\nWelcome to Pelican!\nPanel\nGetting Started\nWebserver Configuration\nConfiguration Options\nUpdating the Panel\nAdvanced\nWings\nGuides\nTroubleshooting\nWhat is ...?\nPanelGetting Started\nGetting Started\n\nPelican Panel is designed to run on your webserver.\n\nYou are expected to read through our documentation. We have spent a lot of time curating these docs for the community, so please take some time to read through them before asking for help on the forums!\n\nDANGER\n\nYou should have some basic familiarity with Linux before you proceed!\n\nWARNING\n\nPelican is currently in Beta! Some things might change / break between beta versions!\n\nPicking an Operating System (OS)​\n\nPelican runs on a wide range of operating systems, so pick whichever you are most comfortable using. Note: Other OS's, not listed below, might still work.\n\nWARNING\n\nOpenVZ, unless specifically configured, will not work with Pelican.\n\nOperating System\tVersion\tSupported\tNotes\nUbuntu\t20.04\t⚠️︎\tNo SQLite Support, Ubuntu 20.04 EoL is April 2025, not recommended\n\t22.04\t✅︎\t\n\t24.04\t✅︎\tDocumentation written assuming Ubuntu 24.04 as the base OS.\nRocky Linux\t9\t✅︎\t\nDebian\t11\t⚠️\tNo SQLite Support\n\t12\t✅︎\t\n\nSQLite support depends on libsqlite3-0_3.35+ being on the host system. Ubuntu 20.04 & Debian 11 do not meet this requirement.\n\nDependencies​\nWARNING\n\nThe ondrej/php repository is required to install the latest versions of PHP and its required extensions.\n\nIt can be added with the following command.\n\nsudo add-apt-repository ppa:ondrej/php\n\nPHP 8.3 (recommended) or 8.2 with the following extensions: gd, mysql, mbstring, bcmath, xml, curl, zip, intl, sqlite3 and fpm\nMySQL 8 (mysql-server) or MariaDB 10.3+\nA webserver (Apache, NGINX, Caddy, etc.)\ncurl\ntar\ncomposer v2\nInstalling Composer​\n\nComposer is a dependency manager for PHP, You'll need composer installed before continuing in this guide.\n\ncurl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer\n\nCreate Directories & Downloading Files​\n\nThe first step in this process is to create the folder where the panel will live and then move ourselves into that newly created folder.\n\nmkdir -p /var/www/pelican\ncd /var/www/pelican\n\n\nOnce you have created a new directory to use and moved into it you'll need to download the Panel files. This is as simple as using curl to download the latest release.\n\ncurl -Lo panel.tar.gz https://github.com/pelican-dev/panel/releases/latest/download/panel.tar.gz\n\n\nOnce it is downloaded you'll need to unpack the archive and then set the correct permissions on the storage/ and bootstrap/cache/ directories.\n\ntar -xzvf panel.tar.gz\nchmod -R 755 storage/* bootstrap/cache/\n\nInstallation​\n\nNext we will set up the default environment settings file, dependencies, and then generate a new application encryption key.\n\nsudo composer install --no-dev --optimize-autoloader\n\nEnvironment Configuration​\n\nThe core environment is easily configured using a few different CLI commands built into the app. This step will cover setting up things such as sessions, caching, database credentials, and email sending.\n\nRunning php artisan p:environment:setup will, if it does not exist, auto create the required .env file and generate a APP_KEY.\n\nINFO\n\nMake sure to read the MySQL guide first if you want to use MySQL instead of SQLite!\n\nphp artisan p:environment:setup\nphp artisan p:environment:database\n\nSetting up Mail - Optional​\n\nIf you'd like to set up the panel to send emails for newly created servers to users & password resets. Use this command.\n\nphp artisan p:environment:mail\n\nWARNING\n\nBack up your encryption key (APP_KEY in the .env file). This is used as an encryption key for all data that needs to be stored securely (e.g. api keys). Store it somewhere safe - not just on your server. If you lose it all encrypted data is irrecoverable -- even if you have database backups.\n\nDatabase Initialization​\n\nNow we need to set up database for the Panel that you created before. The command below may take some time to run depending on your machine. Please DO NOT exit the process until it is completed!\n\nphp artisan migrate --seed --force\n\nCreating User​\n\nYou'll then need to create an administrative user so that you can log into the panel. To do so, run the command below.\n\nPasswords must meet the following requirements: 8 characters, mixed case, at least one number.\n\nphp artisan p:user:make\n\nCrontab Configuration​\n\nWe need to create a new cronjob that runs every minute to process specific tasks, such as session cleanup and scheduled tasks. You'll want to open your crontab.\n\nNGINX/Apache\nRocky Linux NGINX\nRocky Linux Apache\nsudo crontab -e -u www-data\n\n\nAnd then paste the line below.\n\n* * * * * php /var/www/pelican/artisan schedule:run >> /dev/null 2>&1\n\nSetting Permissions​\n\nThe last step in the installation process is to set the correct permissions on the Panel files so that the webserver can use them correctly.\n\nNGINX/Apache\nRocky Linux NGINX\nRocky Linux Apache\nchown -R www-data:www-data /var/www/pelican\n\nEdit this page\nPrevious\nWelcome to Pelican!\nNext\nWebserver Configuration\nPicking an Operating System (OS)\nDependencies\nInstalling Composer\nCreate Directories & Downloading Files\nInstallation\nEnvironment Configuration\nSetting up Mail - Optional\nDatabase Initialization\nCreating User\nCrontab Configuration\nSetting Permissions\nDocumentation\nPanel\nWings\nSSL Setup\nCommunity\nDiscord\nBlog\nGitHub\nCopyright © 2024 Pelican"
  }
]