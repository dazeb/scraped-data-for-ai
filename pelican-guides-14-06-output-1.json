[
  {
    "title": "Pelican",
    "url": "https://pelican.dev/docs/guides/database-hosts/",
    "html": "Skip to main content\nPelican\nInstall\nBlog\nDonate\nNewsletter\nFAQ\nWelcome to Pelican!\nPanel\nGetting Started\nWebserver Configuration\nConfiguration Options\nUpdating the Panel\nAdvanced\nWings\nGuides\nUsing Mounts\nCreating SSL Certificates\nUpgrading PHP\nDatabase Hosts\nTroubleshooting\nWhat is ...?\nGuidesDatabase Hosts\nDatabase Hosts\n\nDatabase hosts allow to create per-server databases on the given host.\n\nDatabase Configuration​\nCreate Database Host user​\n\nYou will need a database user with the correct permissions before continuing any further.\n\nRun the following commands to quickly create a user for your new database host:\n\nmysql -u root -p\n\n# Remember to change 'yourPassword' below to be a unique password\n# Replace 127.0.0.1 with your panel ip if your panel and wings are on different machines\nCREATE USER 'pelicanuser'@'127.0.0.1' IDENTIFIED BY 'yourPassword';\nGRANT ALL PRIVILEGES ON *.* TO 'pelicanuser'@'127.0.0.1' WITH GRANT OPTION;\nexit\n\nAllow external database access​\n\nChances are you'll need to allow external access to this MySQL instance in order to allow servers to connect to it.\n\nTo do this, open my.cnf, which varies in location depending on your OS and how MySQL was installed. You can type find /etc -iname my.cnf to locate it.\n\nOpen my.cnf, add text below to the bottom of the file and save it:\n\n[mysqld]\nbind-address=0.0.0.0\n\n\nRestart MySQL/ MariaDB to apply these changes. This will override the default MySQL configuration, which by default will only accept requests from localhost. Updating this will allow connections on all interfaces, and thus, external connections. Make sure to allow the MySQL port (default 3306) in your firewall.\n\nPanel Configuration​\n\nIn the admin area of the panel, go to \"Databases\" and click the \"New Database Host\" button.\n\nTIP\n\nUsers will later see the host as their database endpoint. Therefore, you should set it to a public ip or FQDN and not to localhost for example.\n\nHit \"Create\" and if everything was entered correctly you should be redirected to the database host list and see your new database host.\n\nCommon issues​\n\nConnection refused: Make sure that your database server is running and that you allowed external access to your database.\n\nHost '_______' is not allowed to connect to this MariaDB server: You most likely created the database user with a 127.0.0.1 host and are trying to connect from a different host.\n\nAccess denied for user '_______'@'_______': You either entered a wrong password or something is wrong with the database user you entered. Make sure that the database user exists and has the required permissions.\n\nEdit this page\nPrevious\nUpgrading PHP\nNext\nTroubleshooting\nDatabase Configuration\nCreate Database Host user\nAllow external database access\nPanel Configuration\nCommon issues\nDocumentation\nPanel\nWings\nSSL Setup\nCommunity\nDiscord\nBlog\nGitHub\nCopyright © 2024 Pelican"
  },
  {
    "title": "Pelican",
    "url": "https://pelican.dev/docs/guides/ssl/",
    "html": "Skip to main content\nPelican\nInstall\nBlog\nDonate\nNewsletter\nFAQ\nWelcome to Pelican!\nPanel\nGetting Started\nWebserver Configuration\nConfiguration Options\nUpdating the Panel\nAdvanced\nWings\nGuides\nUsing Mounts\nCreating SSL Certificates\nUpgrading PHP\nDatabase Hosts\nTroubleshooting\nWhat is ...?\nGuidesCreating SSL Certificates\nCreating SSL Certificates\n\nThese tutorials briefly cover creating a new SSL certificates for your panel and/or wings.\n\nCertbot\nApache w/CloudFlare API\nCaddy w/CloudFlare API\nINFO\n\nThis way is the most recommended and should work in 98% of setups.\n\nTo begin, we will install certbot, a simple script that automatically renews our certificates and allows much easier creation of them. The command below is for Ubuntu distributions, but you can always check Certbot's official site for installation instructions. We have also included a command below to install certbot's Nginx/Apache plugin so you won't have to stop your webserver.\n\nNGINX\nApache\nCaddy / Other\nsudo apt install -y python3-certbot-nginx\n\nCreating a Certificate​\n\nAfter installing certbot, we need to generate a certificate. There are a couple of ways to do that, but the easiest is to use the web server-specific certbot plugin you just installed.\n\nINFO\n\nFor Wings-only machines that don't need a web server, use the standalone or DNS method of the certbot as you don't need a web server for it.\n\nThen, in the command below, you should replace example.com with the domain you would like to generate a certificate for. When you have multiple domains you would like certificates for, simply add more -d anotherdomain.com flags to the command. You can also look into generating a wildcard certificate but that is not covered in this tutorial.\n\nWhen you are using certbot's Nginx/Apache plugin, you won't need to restart your webserver to have the certificate applied assuming that you've already configured the webservers to use SSL as instructed in the web server configuration step.\n\nHTTP challenge​\n\nHTTP challenge requires you to expose port 80 for the challenge verification.\n\nNGINX\nApache\nStandalone\ncertbot certonly --nginx -d example.com\n\nDNS challenge​\n\nDNS challenge requires you to create a new TXT DNS record to verify domain ownership, instead of having to expose port 80. The instructions are displayed when you run the certbot command below.\n\ncertbot -d example.com --manual --preferred-challenges dns certonly\n\nAuto Renewal​\n\nYou'll also probably wasnt to configure the automatic renewal of certificates to prevent unexpected certificate expirations. You can open crontab with sudo crontab -e and add the line from below to the bottom of it for attempting renewal every day at 23 (11 PM).\n\nDeploy hook would restart the Nginx service to apply a new certificate when it's renewed successfully. Change nginx in the restart command to suit your own needs, such as to apache or wings.\n\nINFO\n\nFor advanced users, we suggest installing and using acme.sh which provides more options, and is much more powerful than certbot.\n\n0 23 * * * certbot renew --quiet --deploy-hook \"systemctl restart nginx\"\n\nTroubleshooting​\n\nIf you get an Insecure Connection or SSL/TLS related error when trying to access your panel or wings, the certificate has likely expired. This can be easily fixed by renewing the SSL certificate, although using the command certbot renew might not do the job if port 80 is in use, as it'll return errors like: Error: Attempting to renew cert (domain) from /etc/letsencrypt/renew/domain.conf produced an unexpected error.\n\nThis will happen especially if you're running Nginx instead of Apache. The solution for this is to use Nginx or Apache plugins with --nginx and --apache. Alternatively, you can stop Nginx, then renew the certificate, finally restart Nginx. Replace nginx with your own web server or with wings should you be renewing the certificate for Wings.\n\nStop Nginx:\n\nsystemctl stop nginx\n\n\nRenew the certificate:\n\ncertbot renew\n\n\nOnce the process has completed, you can restart Nginx:\n\nsystemctl start nginx\n\n\nYou may also need to restart Wings as not every service is able to automatically apply an updated certificate:\n\nsystemctl restart wings\n\nEdit this page\nPrevious\nUsing Mounts\nNext\nUpgrading PHP\nCreating a Certificate\nHTTP challenge\nDNS challenge\nAuto Renewal\nTroubleshooting\nObtaining CloudFlare API Key (Legacy)\nCreating a Certificate\nObtaining CloudFlare API Key (Modern)\nCreating a Certificate\nInstalling Caddy with Cloudflare DNS plugin\nObtaining CloudFlare API Token\nReconfiguring Caddy to use Cloudflare DNS for obtaining certificates\nDocumentation\nPanel\nWings\nSSL Setup\nCommunity\nDiscord\nBlog\nGitHub\nCopyright © 2024 Pelican"
  },
  {
    "title": "Pelican",
    "url": "https://pelican.dev/docs/guides/php-upgrade/",
    "html": "Skip to main content\nPelican\nInstall\nBlog\nDonate\nNewsletter\nFAQ\nWelcome to Pelican!\nPanel\nGetting Started\nWebserver Configuration\nConfiguration Options\nUpdating the Panel\nAdvanced\nWings\nGuides\nUsing Mounts\nCreating SSL Certificates\nUpgrading PHP\nDatabase Hosts\nTroubleshooting\nWhat is ...?\nGuidesUpgrading PHP\nUpgrading PHP\n\nThis documentation includes instructions for upgrading your system to the latest version of PHP. Please reference the table below to check what PHP version you need for your version of Pelican.\n\nPanel Version\tPHP Version\n1.0.0+\t8.2, 8.3\nInstall PHP​\n\nIn order to install PHP 8.3, you will need to run the following commands. Please keep in mind different operating systems may have slightly different requirements for how this commands are formatted.\n\n# Add additional repository for PHP\nsudo add-apt-repository -y ppa:ondrej/php\nsudo apt -y update\n\n# Optional: Remove old PHP versions\nsudo apt -y purge php*\n\n# Install PHP 8.3\nsudo apt -y install php8.3 php8.3-{gd,mysql,mbstring,bcmath,xml,curl,zip,intl,sqlite3,fpm}\n\nWebserver Configuration​\nNGINX\nApache\nCaddy\n\nAfter upgrading to PHP 8.3, you will most likely need to update your NGINX configuration. Your configuration file is most likely called pelican.conf and located in the /etc/nginx/sites-available/ directory, or if on CentOS, /etc/nginx/conf.d/.\n\nMake sure to update the path in the command below to reflect the actual location of your configuration file.\n\nsed -i -e 's/php[7|8].[0-9]-fpm.sock/php8.3-fpm.sock/' /etc/nginx/sites-available/pelican.conf\n\n\nOnce you have edited the file run the command below to reload NGINX and apply your changes.\n\nsystemctl reload nginx\n\nEdit this page\nPrevious\nCreating SSL Certificates\nNext\nDatabase Hosts\nInstall PHP\nWebserver Configuration\nDocumentation\nPanel\nWings\nSSL Setup\nCommunity\nDiscord\nBlog\nGitHub\nCopyright © 2024 Pelican"
  },
  {
    "title": "Pelican",
    "url": "https://pelican.dev/docs/guides/mounts/",
    "html": "Skip to main content\nPelican\nInstall\nBlog\nDonate\nNewsletter\nFAQ\nWelcome to Pelican!\nPanel\nGetting Started\nWebserver Configuration\nConfiguration Options\nUpdating the Panel\nAdvanced\nWings\nGuides\nUsing Mounts\nCreating SSL Certificates\nUpgrading PHP\nDatabase Hosts\nTroubleshooting\nWhat is ...?\nGuidesUsing Mounts\nUsing Mounts\n\nMounts is a feature that allows administrators to mount other directories from the host file-system into a Server's container.\n\nWings Configuration​\n\nFor security reasons it is not possible to mount directories on a node by default.\n\nDirectories that should be mountable have to be specified explicitly in the Wings configuration.\n\nIn the Wings configuration file (/etc/pelican/config.yml) the allowed_mounts field is used to list mountable directories. The listed directories and all their subdirectories can be mounted.\n\n/etc/pelican/config.yml\nallowed_mounts:\n- /example\n\n\nYou have to restart Wings to apply new changes to your Wings config.\n\nPanel Configuration​\n\nYou have to configure mounts in admin Panel in order to use them with your servers. They consist of a source pad on the node and a target path where it will be mounted in the container.\n\nWARNING\n\nMounts cannot be mounted to or inside of /home/container or any subdirectory of it, nor can you cross-mount servers such as Server A's directory into Server B.\n\nCreating a Mount​\nIn the admin Panel go to Mounts.\nCreate a new mount.\nFill in the details as required.\nName: Name for your mount.\nDescription: Description for your mount.\nSource: The absolute path to the folder or files on the Node machine.\nTarget: The absolute path where the mount will be placed inside of your server, can not include /home/container in the path.\nRead Only: Whether the mount will be read-only for the servers using it.\nUser Mountable: Whether to allow users to self mount this mount.\nAfter creating the mount, you are required to add both Eggs and Nodes that this mount may be used on.\nWARNING\n\nAll servers using the same mounts will only share their contents when they are on the same node. Mounts are not synchronized between nodes.\n\nAssigning a Mount to a Server​\nIn the admin Panel navigate to the server you would like to use a mount with\nGo to the mounts page\nClick the + button\nRestart the server\n\nThe files of the mount should become available in the target path in the container. You can temporarily change your server startup command to ls <mount target>, which should output the contents of the mount if configured correctly.\n\nTIP\n\nMounts do not appear in the Panel's file manager, nor are they accessible via SFTP. However, the server itself will be able to see and use the mounts.\n\nExample Mount​\n\nThe example mount below is stored in the path /var/lib/pelican/mounts, which we add to the Wings config.yml\n\n/etc/pelican/config.yml\nallowed_mounts:\n  - /var/lib/pelican/mounts\n\nEdit this page\nPrevious\nUpdating Wings\nNext\nCreating SSL Certificates\nWings Configuration\nPanel Configuration\nCreating a Mount\nAssigning a Mount to a Server\nExample Mount\nDocumentation\nPanel\nWings\nSSL Setup\nCommunity\nDiscord\nBlog\nGitHub\nCopyright © 2024 Pelican"
  }
]