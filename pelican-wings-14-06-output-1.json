[
  {
    "title": "Updating Wings | Pelican",
    "url": "https://pelican.dev/docs/wings/update/",
    "html": "Skip to main content\nPelican\nInstall\nBlog\nDonate\nNewsletter\nFAQ\nWelcome to Pelican!\nPanel\nGetting Started\nWebserver Configuration\nConfiguration Options\nUpdating the Panel\nAdvanced\nWings\nInstalling Wings\nAdditional Configuration\nUpdating Wings\nGuides\nTroubleshooting\nWhat is ...?\nWingsUpdating Wings\nUpdating Wings\n\nUpdating Wings is a painless process and should take less than a minute to complete.\n\nWings Version Requirements​\nPanel Version\tWings Version\tSupported\n3.x\t3.x\t✅︎\nDownload Update​\n\nFirst, download the updated wings binary into /usr/local/bin. You will need to stop Wings briefly.\n\nTIP\n\nRunning servers will not be affected.\n\nsystemctl stop wings\ncurl -L -o /usr/local/bin/wings \"https://github.com/pelican-dev/wings/releases/latest/download/wings_linux_$([[ \"$(uname -m)\" == \"x86_64\" ]] && echo \"amd64\" || echo \"arm64\")\"\nchmod u+x /usr/local/bin/wings\n\nRestart​\n\nSecondly, Restart the process.\n\nsystemctl restart wings\n\n\nEazy as 1..2.. Oh it's done...\n\nEdit this page\nPrevious\nAdditional Configuration\nNext\nUsing Mounts\nWings Version Requirements\nDownload Update\nRestart\nDocumentation\nPanel\nWings\nSSL Setup\nCommunity\nDiscord\nBlog\nGitHub\nCopyright © 2024 Pelican"
  },
  {
    "title": "Additional Configuration | Pelican",
    "url": "https://pelican.dev/docs/wings/optional-config/",
    "html": "Skip to main content\nPelican\nInstall\nBlog\nDonate\nNewsletter\nFAQ\nWelcome to Pelican!\nPanel\nGetting Started\nWebserver Configuration\nConfiguration Options\nUpdating the Panel\nAdvanced\nWings\nInstalling Wings\nAdditional Configuration\nUpdating Wings\nGuides\nTroubleshooting\nWhat is ...?\nWingsAdditional Configuration\nAdditional Configuration\nDANGER\n\nThese are advanced configurations for Wings. You risk breaking Wings and making containers unusable if you misconfigure something. Proceed only if you know what each configuration value does.\n\nYou must apply all changes to your Wings config.yml file located at /etc/pelican and restart wings.\nVerify your config file using Yaml Lint should you receive errors related to YAML parsing.\n\nPrivate Registries​\n\nYou can use these settings to authenticate against (private) docker registries when pulling images.\n\nAvailable Keys​\nSetting Key\tDefault Value\tNotes\nname\tnull\tRegistry address\nusername\tnull\tRegistry username\npassword\tnull\tRegistry password\nExample of usage​\ndocker:\n  registries:\n    registry.example.com:\n      username: \"registryusername\"\n      password: \"registrypassword\"\n\nCustom Network Interfaces​\n\nYou can change the network interface that Wings uses for all containers by editing the network name; it is by default set to pelican_nw. For example, to enable Docker host mode change the network name to host.\n\nWARNING\n\nChanging network mode to host grants Pelican direct access to all machine interfaces and Panel users can bind to any IP or Port even if it's not allocated to their container. You will lose all benefits of Docker network isolation. It is not recommended for public installations that are hosting other users' servers.\n\nExample of usage​\ndocker:\n  network:\n    name: host\n    network_mode: host\n\n\nAfter making changes, the following commands will stop the Wings, remove the Pelican network, and start the Wings again. Run at your own risk. systemctl stop wings && docker network rm pelican_nw && systemctl start wings\n\nEnabling Cloudflare proxy​\n\nCloudflare proxying of the Wings isn't beneficial since users will be connecting to the machine directly and bypassing any Cloudflare protection. As such, your Node machine IP will still be exposed.\n\nTo enable Cloudflare proxy, you must change the Wings port to one of the Cloudflare HTTPS ports with caching enabled (more info here), such as 8443, because Cloudflare only supports HTTP on port 8080. Select your Node in the Admin Panel, and on the settings tab, change the port. Make sure that you set \"Not Behind Proxy\" when using Full SSL settings in Cloudflare. Then on Cloudflare dashboard, your FQDN must have an orange cloud enabled beside it.\n\nYou are unable to proxy the SFTP port through Cloudflare unless you have their enterprise plan. Server transfers will most likely not work either due to Cloudflare's request body limits.\n\nContainer PID Limit​\n\nYou can change the total number of processes that can be active in a container at any given moment by changing the container_pid_limit value. The default value is 512. You can set it to 0 to disable the limit completely. However, this is not recommended as the limit prevents malicious overloading of the node. Restart wings and your game server to apply the new limit.\n\nExample of usage​\ndocker:\n  ...\n  container_pid_limit: 512\n  ...\n\nThrottles Limits​\n\nYou can use these settings to adjust or completely disable throttling.\n\nSetting Key\tDefault Value\tNotes\nenabled\ttrue\tWhether or not the throttler is enabled\nlines\t2000\tTotal lines that can be output in a given line_reset_interval period\nmaximum_trigger_count\t5\tAmount of times throttle limit can be triggered before the server will be stopped\nline_reset_interval\t100\tThe amount of time after which the number of lines processed is reset to 0\ndecay_interval\t10000\tTime in milliseconds that must pass without triggering throttle limit before trigger count is decremented\nstop_grace_period\t15\tTime that a server is allowed to be stopping for before it is terminated forcefully if it triggers output throttle\nwrite_limit\t0\tImpose I/O write limit for backups to the disk, 0 = unlimited. Value greater than 0 throttles write speed to the set value in MiB/s\ndownload_limit\t0\tImpose a Network I/O read limit for archives, 0 = unlimited. Value greater than 0 throttles read speed to the set value in MiB/s\nExample of usage​\nthrottles:\n  enabled: true\n  lines: 2000\n  maximum_trigger_count: 5\n  line_reset_interval: 100\n  decay_interval: 10000\n  stop_grace_period: 15\n\nInstaller Limits​\n\nDefines the limits on the installer containers that prevents a server's installation process from unintentionally consuming more resources than expected. This is used in conjunction with the server's defined limits. Whichever value is higher will take precedence in the install containers.\n\nSetting Key\tDefault Value\tNotes\nmemory\t1024\tThe maximum amount of memory install container can use unless server memory limit is higher than this value\ncpu\t100\tThe maximum amount of cpu install container can use unless server cpu limit is higher than this value\nExample of usage​\ninstaller_limits:\n  memory: 1024\n  cpu: 100\n\nOther values​\n\nMore commonly discussed values.\n\nSetting Key\tDefault Value\tNotes\ndebug\tfalse\tForce Wings to run in debug mode\ntmpfs_size\t100\tThe size of the /tmp directory in MB when mounted into a container\nwebsocket_log_count\t150\tThe number of lines to display in the console\ndetect_clean_exit_as_crash\ttrue\tMark server as crashed if it's stopped without user interaction, e.g., not pressing stop button\n(crash detection) timeout\t60\tTimeout between server crashes that will not cause the server to be automatically restarted\ncheck_permissions_on_boot\ttrue\tCheck all file permissions on each boot. Disable this when you have a very large amount of files and the server startup is hanging on checking permissions\nEdit this page\nPrevious\nInstalling Wings\nNext\nUpdating Wings\nPrivate Registries\nAvailable Keys\nExample of usage\nCustom Network Interfaces\nExample of usage\nEnabling Cloudflare proxy\nContainer PID Limit\nExample of usage\nThrottles Limits\nExample of usage\nInstaller Limits\nExample of usage\nOther values\nDocumentation\nPanel\nWings\nSSL Setup\nCommunity\nDiscord\nBlog\nGitHub\nCopyright © 2024 Pelican"
  },
  {
    "title": "Pelican",
    "url": "https://pelican.dev/docs/wings/install/",
    "html": "Skip to main content\nPelican\nInstall\nBlog\nDonate\nNewsletter\nFAQ\nWelcome to Pelican!\nPanel\nGetting Started\nWebserver Configuration\nConfiguration Options\nUpdating the Panel\nAdvanced\nWings\nInstalling Wings\nAdditional Configuration\nUpdating Wings\nGuides\nTroubleshooting\nWhat is ...?\nWingsInstalling Wings\nInstalling Wings\nWARNING\n\nThis software will not work on Windows operating systems.\n\nSupported Systems​\n\nThe following is a list of supported operating systems. Please be aware that this is not an exhaustive list, there is a high probability that you can run the software on other Linux distributions without much effort. You are responsible for determining which packages may be necessary on those systems. There is also a very high probability that new releases of the supported OSes below will work just fine, you are not restricted to only the versions listed below.\n\nOperating System\tVersion\tSupported\tNotes\nUbuntu\t20.04\t⚠️︎︎\tUbuntu 20.04 EoL is April 2025, not recommended\n\t22.04\t✅︎\t\n\t24.04\t✅︎\tDocumentation written assuming Ubuntu 24.04 as the base OS.\nRocky Linux\t9\t✅︎\t\nDebian\t11\t✅︎\t\n\t12\t✅︎\t\nSystem Requirements​\nWARNING\n\nPlease be aware that some hosts install a modified kernel that does not support some docker features required for Wings to operate correctly. Please check your kernel by running uname -r. If your kernel ends in -xxxx-grs-ipv6-64 or -xxxx-mod-std-ipv6-64 you're probably using a non-supported kernel. You should contact your host, and request a non-modified kernel.\n\nTo run Wings, you will need a Linux system capable of running Docker containers. Most VPS and almost all dedicated servers should be capable of running Docker, but there are edge cases.\n\nWhen your provider uses Virtuozzo, OpenVZ (or OVZ), or LXC virtualization, you will most likely be unable to run Wings. Some providers have made the necessary changes for nested virtualization to support Docker. Ask your provider's support team to make sure. KVM is guaranteed to work.\n\nThe easiest way to check is to type systemd-detect-virt. If the result doesn't contain OpenVZ orLXC, it should be fine. The result of none will appear when running dedicated hardware without any virtualization.\n\nShould that not work for some reason, or you're still unsure, you can also run the command below.\n\nsudo dmidecode -s system-manufacturer\n\nInstalling Docker​\n\nFor a quick install of Docker CE, you can use the command below:\n\ncurl -sSL https://get.docker.com/ | CHANNEL=stable sh\n\nINSTALLING DOCKER CE\n\nIf the above command does not work, please reference the official Docker documentation for how to install Docker CE on your server.\n\nDocker CE Install Overview\nStart Docker on Boot​\n\nIf you are on an operating system with systemd (Ubuntu 16+, Debian 8+, CentOS 7+) run the command below to have Docker start when you boot your machine.\n\nsudo systemctl enable --now docker\n\nEnabling Swap​\n\nOn most systems, Docker will be unable to setup swap space by default. You can confirm this by running docker info and looking for the output of WARNING: No swap limit support near the bottom.\n\nEnabling swap is entirely optional, but we recommended doing it if you will be hosting for others and to prevent OOM errors.\n\nTo enable swap, open /etc/default/grub as a root user and find the line starting with GRUB_CMDLINE_LINUX_DEFAULT. Make sure the line includes swapaccount=1 somewhere inside the double-quotes.\n\nAfter that, run sudo update-grub followed by sudo reboot to restart the server and have swap enabled. Below is an example of what the line should look like, do not copy this line verbatim. It often has additional OS-specific parameters.\n\nGRUB_CMDLINE_LINUX_DEFAULT=\"swapaccount=1\"\n\nGRUB CONFIGURATIONS\n\nSome Linux distros may ignore GRUB_CMDLINE_LINUX_DEFAULT.\nTherefore you might have to use GRUB_CMDLINE_LINUX instead should the above variable not work for you.\n\nInstalling Wings​\n\nThe first step for installing Wings is to ensure we have the required directory structure setup. To do so, run the commands below, which will create the base directory and download the wings executable.\n\nsudo mkdir -p /etc/pelican /var/run/wings\ncurl -L -o /usr/local/bin/wings \"https://github.com/pelican-dev/wings/releases/latest/download/wings_linux_$([[ \"$(uname -m)\" == \"x86_64\" ]] && echo \"amd64\" || echo \"arm64\")\"\nsudo chmod u+x /usr/local/bin/wings\n\nOVH/SYS DEDICATED SERVERS\n\nIf you are using a server provided by OVH or SoYouStart please be aware that your main drive space is probably allocated to /home, and not / by default. Please consider using /home/daemon-data for server data. This can be set when creating the node.\n\nConfigure​\n\nOnce you have installed Wings and the required components, the next step is to create a node on your installed Panel. Go to your Panel administrative view, select Nodes from the sidebar, and on the right side click Create New button.\n\nAfter you have created a node, click on it and there will be a tab called Configuration. Copy the code block content, paste it into a new file called config.yml in /etc/pelican and save it.\n\nAlternatively, you can click on the Generate Token button, copy the sh command and paste it into your terminal.\n\nUSING SSL?\n\nIf your Panel is using SSL, then Wings must also use SSL.\n\nSee Creating SSL Certificates documentation page for how to create these certificates before continuing.\n\nStarting Wings​\n\nTo start Wings, simply run the command below, which will start it in a debug mode. Once you confirmed that it is running without errors, use CTRL+C to terminate the process and daemonize it by following the instructions below. Depending on your server's internet connection pulling and starting Wings for the first time may take a few minutes.\n\nsudo wings --debug\n\n\nYou may optionally add the --debug flag to run Wings in debug mode.\n\nDaemonizing (using systemd)​\n\nRunning Wings in the background is a simple task, just make sure that it runs without errors before doing this. Place the contents below in a file called wings.service in the /etc/systemd/system directory.\n\n/etc/systemd/system/wings.service\n[Unit]\nDescription=Wings Daemon\nAfter=docker.service\nRequires=docker.service\nPartOf=docker.service\n\n[Service]\nUser=root\n\nWorkingDirectory=/etc/pelican\n\nLimitNOFILE=4096\nPIDFile=/var/run/wings/daemon.pid\nExecStart=/usr/local/bin/wings\nRestart=on-failure\nStartLimitInterval=180\nStartLimitBurst=30\nRestartSec=5s\n\n[Install]\nWantedBy=multi-user.target\n\n\nThen, run the commands below to reload systemd and start Wings.\n\nsystemctl enable --now wings\n\nEdit this page\nPrevious\nMySQL\nNext\nAdditional Configuration\nSupported Systems\nSystem Requirements\nInstalling Docker\nEnabling Swap\nInstalling Wings\nConfigure\nStarting Wings\nDaemonizing (using systemd)\nDocumentation\nPanel\nWings\nSSL Setup\nCommunity\nDiscord\nBlog\nGitHub\nCopyright © 2024 Pelican"
  }
]